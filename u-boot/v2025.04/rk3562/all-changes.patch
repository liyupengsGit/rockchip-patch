diff --git a/.gitignore b/.gitignore
index e93c33da1bd..8733e4597fb 100644
--- a/.gitignore
+++ b/.gitignore
@@ -133,3 +133,4 @@ __pycache__
 
 # Clang's compilation database file
 /compile_commands.json
+/binman-fake/*
diff --git a/arch/arm/dts/rk3562-geekpi-1-u-boot.dtsi b/arch/arm/dts/rk3562-geekpi-1-u-boot.dtsi
new file mode 100644
index 00000000000..60db08c120f
--- /dev/null
+++ b/arch/arm/dts/rk3562-geekpi-1-u-boot.dtsi
@@ -0,0 +1,336 @@
+/*
+ * (C) Copyright 2022 Rockchip Electronics Co., Ltd
+ *
+ * SPDX-License-Identifier:     GPL-2.0+
+ */
+#include "rockchip-u-boot.dtsi"
+
+/ {
+	aliases {
+		mmc0 = &sdhci;
+		mmc1 = &sdmmc0;
+	};
+
+	chosen {
+		stdout-path = &uart0;
+		u-boot,spl-boot-order = &sdmmc0, &sdhci;
+	};
+
+	dmc: dmc {
+		compatible = "rockchip,rk3562-dmc";
+		bootph-all;
+	};
+
+	secure-otp@ff920000 {
+		compatible = "rockchip,rk3562-secure-otp";
+		reg = <0x0 0xff920000 0x0 0x4000>;
+		secure_conf = <0xff020034>;
+		mask_addr = <0x0>;
+		cru_rst_addr = <0xff130438>;
+		bootph-all;
+		status = "okay";
+	};
+
+	syscon: syscon {
+        	bootph-all;
+        	status = "okay";
+        	sysreset: sysreset {
+                	compatible = "rockchip,rk8xx-sysreset";
+                	rockchip,pmic = <&rk809>;
+                	bootph-all;
+                	status = "okay";
+        	};
+	};
+	
+};
+
+&otp {
+	bootph-all;
+	status = "okay";
+};
+
+&sys_grf {
+	bootph-all;
+	status = "okay";
+};
+
+&ioc_grf {
+	bootph-all;
+	status = "okay";
+};
+
+&pmu_grf {
+	bootph-all;
+	status = "okay";
+};
+
+&usbphy_grf {
+	bootph-pre-ram;
+	status = "okay";
+};
+
+&firmware {
+	bootph-all;
+};
+
+&scmi {
+	bootph-all;
+};
+
+&scmi_clk {
+	bootph-all;
+};
+
+&scmi_shmem {
+	bootph-all;
+};
+
+&cru {
+	clocks = <&xin24m>;
+	reset-controller;
+	bootph-all;
+	status = "okay";
+};
+
+&crypto {
+	bootph-all;
+	status = "okay";
+};
+
+&rng {
+	bootph-pre-ram;
+	status = "okay";
+};
+
+&uart0 {
+	clock-frequency = <24000000>;
+	pinctrl-names = "default";
+	pinctrl-0 = <&uart0m0_xfer>;
+	bootph-all;
+	status = "okay";
+};
+
+&tsadc {
+	bootph-all;
+	status = "okay";
+};
+
+&vcc_3v3 {
+        bootph-all;
+        status = "okay";
+};
+
+&vcca_1v8 {
+	bootph-all;
+        status = "okay";
+};
+
+&vcc3v3_sd {
+	bootph-all;
+        status = "okay";
+};
+
+&vccio_sd {
+	bootph-all;
+        status = "okay";
+};
+
+&saradc0 {
+	bootph-some-ram;
+	vref-supply = <&vcca_1v8>;
+	status = "okay";
+};
+
+&psci {
+	bootph-pre-ram;
+	status = "okay";
+};
+
+&sdhci {
+	bus-width = <8>;
+	bootph-all;
+	/delete-property/ pinctrl-names;
+	/delete-property/ pinctrl-0;
+	mmc-hs400-1_8v;
+	mmc-hs400-enhanced-strobe;
+	fixed-emmc-driver-type = <1>;
+	status = "okay";
+	vmmc-supply = <&vcc3v3_sd>;
+	vqmmc-supply = <&vcc_1v8>;
+};
+
+&sdmmc0 {
+	bootph-all;
+	pinctrl-names = "default";
+	pinctrl-0 = <&sdmmc0_clk &sdmmc0_cmd &sdmmc0_det &sdmmc0_bus4>;
+	status = "okay";
+	vmmc-supply = <&vcc3v3_sd>;
+        vqmmc-supply = <&vccio_sd>;
+};
+
+&sdmmc0_pins {
+	bootph-all;
+};
+
+&sdmmc0_bus4 {
+	bootph-all;
+};
+
+&sdmmc0_clk {
+	bootph-all;
+};
+
+&sdmmc0_cmd {
+	bootph-all;
+};
+
+&sdmmc0_det {
+	bootph-all;
+};
+
+&sfc {
+	bootph-all;
+	status = "okay";
+
+	#address-cells = <1>;
+	#size-cells = <0>;
+	spi_nand: flash@0 {
+		bootph-all;
+		compatible = "spi-nand";
+		reg = <0>;
+		spi-tx-bus-width = <1>;
+		spi-rx-bus-width = <4>;
+		spi-max-frequency = <80000000>;
+	};
+
+	spi_nor: flash@1 {
+		bootph-all;
+		compatible = "jedec,spi-nor";
+		label = "sfc_nor";
+		reg = <0>;
+		spi-tx-bus-width = <1>;
+		spi-rx-bus-width = <4>;
+		spi-max-frequency = <80000000>;
+	};
+};
+
+&pinctrl {
+	bootph-all;
+	status = "okay";
+	pinctrl-names = "default";
+	pinctrl-0 = <&som_led1_pin>;
+	gmac_reset: gmac-reset {
+		bootph-all;
+        	rockchip,pins = <3 RK_PD0 RK_FUNC_GPIO &pcfg_pull_down>;
+    	};
+
+
+	gpio-leds {
+		bootph-all;
+		som_led1_pin: som-led1-pin {
+			rockchip,pins = <0 RK_PA5 RK_FUNC_GPIO &pcfg_pull_none>;
+		};
+	};
+
+};
+
+&gpio0 {
+	bootph-all;
+	status = "okay";
+};
+
+&gpio1 {
+	bootph-all;
+	status = "okay";
+};
+
+&gpio2 {
+	bootph-all;
+	status = "okay";
+};
+
+&gpio3 {
+	bootph-all;
+	status = "okay";
+};
+
+&gpio4 {
+	bootph-all;
+	status = "okay";
+};
+
+&pcfg_pull_up_drv_level_2 {
+	bootph-all;
+	status = "okay";
+};
+
+&pcfg_pull_up {
+	bootph-all;
+	status = "okay";
+};
+
+&u2phy {
+	bootph-pre-ram;
+	status = "okay";
+};
+
+&u2phy_otg {
+	bootph-pre-ram;
+	status = "okay";
+};
+
+&u2phy_host {
+	bootph-pre-ram;
+        status = "okay";
+};
+
+&pcfg_pull_none_smt {
+	bootph-all;
+        status = "okay";
+};
+
+&pcfg_pull_none {
+        bootph-all;
+        status = "okay";
+};
+
+&pcfg_pull_down {
+	bootph-all;
+        status = "okay";
+};
+
+&uart0m0_xfer {
+	bootph-all;
+	status = "okay";
+};
+
+&i2c0_xfer {
+	bootph-all;
+	status = "okay";
+};
+
+&pmic_int {
+	bootph-all;
+        status = "okay";
+};
+
+&xin24m {
+	bootph-all;
+	status = "okay";
+};
+
+&xin32k {
+        bootph-all;
+        status = "okay";
+};
+
+&usb_host0_ehci {
+	bootph-all;
+        status = "okay";
+};
+
+&usb_host0_ohci {
+	bootph-all;
+        status = "okay";
+};
+
diff --git a/arch/arm/include/asm/arch-rk3562/boot0.h b/arch/arm/include/asm/arch-rk3562/boot0.h
new file mode 100644
index 00000000000..2db48c854d9
--- /dev/null
+++ b/arch/arm/include/asm/arch-rk3562/boot0.h
@@ -0,0 +1,6 @@
+#ifndef __ASM_ARCH_BOOT0_H__
+#define __ASM_ARCH_BOOT0_H__
+
+#include <asm/arch-rockchip/boot0.h>
+
+#endif
diff --git a/arch/arm/include/asm/arch-rockchip/clock.h b/arch/arm/include/asm/arch-rockchip/clock.h
index 73e5283108b..0cffdd0aa8c 100644
--- a/arch/arm/include/asm/arch-rockchip/clock.h
+++ b/arch/arm/include/asm/arch-rockchip/clock.h
@@ -32,6 +32,8 @@ enum {
 	ROCKCHIP_SYSCON_PIPE_PHY2_GRF,
 	ROCKCHIP_SYSCON_VOP_GRF,
 	ROCKCHIP_SYSCON_VO_GRF,
+	ROCKCHIP_SYSCON_IOC,
+	ROCKCHIP_SYSCON_SDGMAC_GRF,
 };
 
 /* Standard Rockchip clock numbers */
@@ -146,6 +148,12 @@ struct sysreset_reg {
 	unsigned int glb_srst_snd_value;
 };
 
+struct softreset_reg {
+        void __iomem *base;
+        unsigned int sf_reset_offset;
+        unsigned int sf_reset_num;
+};
+
 /**
  * clk_get_divisor() - Calculate the required clock divisior
  *
@@ -218,4 +226,8 @@ int rockchip_reset_bind_lut(struct udevice *pdev, const int *lookup_table,
  */
 int rk3588_reset_bind_lut(struct udevice *pdev, u32 reg_offset, u32 reg_number);
 
+int rk3562_reset_bind_lut(struct udevice *pdev, u32 reg_offset, u32 reg_number);
+
+int rockchip_get_scmi_clk(struct udevice **devp);
+
 #endif
diff --git a/arch/arm/include/asm/arch-rockchip/cru.h b/arch/arm/include/asm/arch-rockchip/cru.h
index c3259b8e7cc..ad28ce0674b 100644
--- a/arch/arm/include/asm/arch-rockchip/cru.h
+++ b/arch/arm/include/asm/arch-rockchip/cru.h
@@ -17,6 +17,8 @@
 # include <asm/arch-rockchip/cru_rk3399.h>
 #elif defined(CONFIG_ROCKCHIP_RK3568)
 #include <asm/arch-rockchip/cru_rk3568.h>
+#elif defined(CONFIG_ROCKCHIP_RK3562)
+#include <asm/arch-rockchip/cru_rk3562.h>
 #elif defined(CONFIG_ROCKCHIP_RK3588)
 #include <asm/arch-rockchip/cru_rk3588.h>
 #endif
diff --git a/arch/arm/include/asm/arch-rockchip/cru_rk3562.h b/arch/arm/include/asm/arch-rockchip/cru_rk3562.h
new file mode 100644
index 00000000000..30356c1e43d
--- /dev/null
+++ b/arch/arm/include/asm/arch-rockchip/cru_rk3562.h
@@ -0,0 +1,418 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+/*
+ * Copyright (c) 2022 Rockchip Electronics Co. Ltd.
+ * Author:
+ * 	Elaine Zhang <zhangqing@rock-chips.com>
+ *	Finley Xiao <finley.xiao@rock-chips.com>
+ */
+
+#ifndef _ASM_ARCH_CRU_RK3562_H
+#define _ASM_ARCH_CRU_RK3562_H
+
+#define MHz		1000000
+#define KHz		1000
+#define OSC_HZ		(24 * MHz)
+
+#define CPU_PVTPLL_HZ	(1008 * MHz)
+#define APLL_HZ		(600 * MHz)
+#define GPLL_HZ		(1188 * MHz)
+#define CPLL_HZ		(1000 * MHz)
+#define HPLL_HZ		(1000 * MHz)
+
+/* RK3562 pll id */
+enum rk3562_pll_id {
+	APLL,
+	GPLL,
+	VPLL,
+	HPLL,
+	CPLL,
+	DPLL,
+	PLL_COUNT,
+};
+
+struct rk3562_clk_info {
+	unsigned long id;
+	char *name;
+};
+
+struct rk3562_clk_priv {
+	struct rk3562_cru *cru;
+	ulong gpll_hz;
+	ulong vpll_hz;
+	ulong hpll_hz;
+	ulong cpll_hz;
+	ulong armclk_hz;
+	ulong armclk_enter_hz;
+	ulong armclk_init_hz;
+	bool sync_kernel;
+	bool set_armclk_rate;
+};
+
+struct rk3562_cru {
+	/* top cru */
+	uint32_t apll_con[5];
+	uint32_t reserved0014[19];
+	uint32_t gpll_con[5];
+	uint32_t reserved0074[3];
+	uint32_t vpll_con[5];
+	uint32_t reserved0094[3];
+	uint32_t hpll_con[5];
+	uint32_t reserved00b4[19];
+	uint32_t clksel_con[48];
+	uint32_t reserved01c0[80];
+	uint32_t gate_con[28];
+	uint32_t reserved370[36];
+	uint32_t softrst_con[28];
+	uint32_t reserved0470[100];
+	uint32_t mode_con[1];
+	uint32_t reserved0604[3];
+	uint32_t glb_cnt_th;
+	uint32_t glb_srst_fst;
+	uint32_t glb_srst_snd;
+	uint32_t glb_rst_con;
+	uint32_t glb_rst_st;
+	unsigned int sdmmc0_con[2];
+	unsigned int sdmmc1_con[2];
+	uint32_t reserved0634[2];
+	unsigned int emmc_con[1];
+	uint32_t reserved0640[15984];
+
+	/* pmu0 cru */
+	uint32_t reserved10000[64];
+	uint32_t pmu0clksel_con[4];
+	uint32_t reserved10110[28];
+	uint32_t pmu0gate_con[3];
+	uint32_t reserved1018c[29];
+	uint32_t pmu0softrst_con[3];
+	uint32_t reserved1020c[8061];
+
+	/* pmu1 cru */
+	uint32_t reserved18000[16];
+	uint32_t cpll_con[5];
+	uint32_t reserved18054[43];
+	uint32_t pmu1clksel_con[7];
+	uint32_t reserved1811c[25];
+	uint32_t pmu1gate_con[4];
+	uint32_t reserved18190[28];
+	uint32_t pmu1softrst_con[3];
+	uint32_t reserved1820c[93];
+	uint32_t pmu1mode_con[1];
+	uint32_t reserved18384[7967];
+
+	/* ddr cru */
+	uint32_t reserved20000[64];
+	uint32_t ddrclksel_con[2];
+	uint32_t reserved20108[30];
+	uint32_t ddrgate_con[2];
+	uint32_t reserved20188[30];
+	uint32_t ddrsoftrst_con[2];
+	uint32_t reserved20208[8062];
+
+	/* subddr cru */
+	uint32_t reserved28000[8];
+	uint32_t dpll_con[5];
+	uint32_t reserved28034[51];
+	uint32_t sudbddrclksel_con[1];
+	uint32_t reserved28104[31];
+	uint32_t subddrgate_con[1];
+	uint32_t reserved28184[31];
+	uint32_t sudbddrsoftrst_con[1];
+	uint32_t reserved28204[95];
+	uint32_t subddrmode_con[1];
+	uint32_t reserved28384[7967];
+
+	/* peri cru */
+	uint32_t reserved30000[64];
+	uint32_t periclksel_con[48];
+	uint32_t reserved301c0[80];
+	uint32_t perigate_con[18];
+	uint32_t reserved30348[46];
+	uint32_t perisoftrst_con[18];
+	uint32_t reserved30448[143];
+};
+
+#define rockchip_cru rk3562_cru
+check_member(rk3562_cru, reserved0640[0], 0x00640);
+check_member(rk3562_cru, reserved1020c[0], 0x1020c);
+check_member(rk3562_cru, reserved18384[0], 0x18384);
+check_member(rk3562_cru, reserved20208[0], 0x20208);
+check_member(rk3562_cru, reserved28384[0], 0x28384);
+check_member(rk3562_cru, reserved30448[0], 0x30448);
+
+struct pll_rate_table {
+	unsigned long rate;
+	unsigned int fbdiv;
+	unsigned int postdiv1;
+	unsigned int refdiv;
+	unsigned int postdiv2;
+	unsigned int dsmpd;
+	unsigned int frac;
+};
+
+#define RK3562_PMU0_CRU_BASE		0x10000
+#define RK3562_PMU1_CRU_BASE		0x18000
+#define RK3562_DDR_CRU_BASE		0x20000
+#define RK3562_SUBDDR_CRU_BASE		0x28000
+#define RK3562_PERI_CRU_BASE		0x30000
+
+#define RK3562_PLL_CON(x)		((x) * 0x4)
+#define RK3562_PMU1_PLL_CON(x)		((x) * 0x4 + RK3562_PMU1_CRU_BASE + 0x40)
+#define RK3562_SUBDDR_PLL_CON(x)	((x) * 0x4 + RK3562_SUBDDR_CRU_BASE + 0x20)
+#define RK3562_MODE_CON			0x600
+#define RK3562_PMU1_MODE_CON		(RK3562_PMU1_CRU_BASE + 0x380)
+#define RK3562_SUBDDR_MODE_CON		(RK3562_SUBDDR_CRU_BASE + 0x380)
+#define RK3562_GLB_SRST_FST		0x614
+#define RK3562_GLB_SRST_SND		0x618
+#define RK3562_GLB_RST_CON		0x61c
+#define RK3562_GLB_RST_ST		0x620
+
+enum {
+	/* CRU_CLKSEL_CON10 */
+	CLK_CORE_PRE_DIV_SHIFT		= 0,
+	CLK_CORE_PRE_DIV_MASK		= 0x1f << CLK_CORE_PRE_DIV_SHIFT,
+
+	/* CRU_CLKSEL_CON11 */
+	ACLK_CORE_PRE_DIV_SHIFT		= 0,
+	ACLK_CORE_PRE_DIV_MASK		= 0x7 << ACLK_CORE_PRE_DIV_SHIFT,
+	CLK_SCANHS_ACLKM_CORE_DIV_SHIFT	= 8,
+	CLK_SCANHS_ACLKM_CORE_DIV_MASK	= 0x7 << CLK_SCANHS_ACLKM_CORE_DIV_SHIFT,
+
+	/* CRU_CLKSEL_CON12 */
+	PCLK_DBG_PRE_DIV_SHIFT		= 0,
+	PCLK_DBG_PRE_DIV_MASK		= 0xf << PCLK_DBG_PRE_DIV_SHIFT,
+	CLK_SCANHS_PCLK_DBG_DIV_SHIFT	= 8,
+	CLK_SCANHS_PCLK_DBG_DIV_MASK	= 0xf << CLK_SCANHS_PCLK_DBG_DIV_SHIFT,
+
+	/* CRU_CLKSEL_CON28 */
+	ACLK_VOP_DIV_SHIFT		= 0,
+	ACLK_VOP_DIV_MASK		= 0x1f << ACLK_VOP_DIV_SHIFT,
+	ACLK_VOP_SEL_SHIFT		= 6,
+	ACLK_VOP_SEL_MASK		= 0x3 << ACLK_VOP_SEL_SHIFT,
+	ACLK_VOP_SEL_GPLL		= 0,
+	ACLK_VOP_SEL_CPLL,
+	ACLK_VOP_SEL_VPLL,
+	ACLK_VOP_SEL_HPLL,
+
+	/* CRU_CLKSEL_CON30 */
+	DCLK_VOP_DIV_SHIFT		= 0,
+	DCLK_VOP_DIV_MASK		= 0xff << DCLK_VOP_DIV_SHIFT,
+	DCLK_VOP_SEL_SHIFT		= 14,
+	DCLK_VOP_SEL_MASK		= 0x3 << DCLK_VOP_SEL_SHIFT,
+	DCLK_VOP_SEL_GPLL		= 0,
+	DCLK_VOP_SEL_HPLL,
+	DCLK_VOP_SEL_VPLL,
+	DCLK_VOP_SEL_APLL,
+
+	/* CRU_CLKSEL_CON31 */
+	DCLK_VOP1_DIV_SHIFT		= 0,
+	DCLK_VOP1_DIV_MASK		= 0xff << DCLK_VOP1_DIV_SHIFT,
+	DCLK_VOP1_SEL_SHIFT		= 14,
+	DCLK_VOP1_SEL_MASK		= 0x3 << DCLK_VOP1_SEL_SHIFT,
+
+	/* CRU_CLKSEL_CON40 */
+	ACLK_BUS_DIV_SHIFT		= 0,
+	ACLK_BUS_DIV_MASK		= 0x1f << ACLK_BUS_DIV_SHIFT,
+	ACLK_BUS_SEL_SHIFT		= 7,
+	ACLK_BUS_SEL_MASK		= 0x1 << ACLK_BUS_SEL_SHIFT,
+	ACLK_BUS_SEL_GPLL		= 0,
+	ACLK_BUS_SEL_CPLL,
+	HCLK_BUS_DIV_SHIFT		= 8,
+	HCLK_BUS_DIV_MASK		= 0x3f << HCLK_BUS_DIV_SHIFT,
+	HCLK_BUS_SEL_SHIFT		= 15,
+	HCLK_BUS_SEL_MASK		= 0x1 << HCLK_BUS_SEL_SHIFT,
+
+	/* CRU_CLKSEL_CON41 */
+	PCLK_BUS_DIV_SHIFT		= 0,
+	PCLK_BUS_DIV_MASK		= 0x1f << PCLK_BUS_DIV_SHIFT,
+	PCLK_BUS_SEL_SHIFT		= 7,
+	PCLK_BUS_SEL_MASK		= 0x1 << PCLK_BUS_SEL_SHIFT,
+	CLK_I2C_SEL_SHIFT		= 8,
+	CLK_I2C_SEL_MASK		= 0x3 << CLK_I2C_SEL_SHIFT,
+	CLK_I2C_SEL_200M		= 0,
+	CLK_I2C_SEL_100M,
+	CLK_I2C_SEL_50M,
+	CLK_I2C_SEL_24M,
+	DCLK_BUS_GPIO_SEL_SHIFT		= 15,
+	DCLK_BUS_GPIO_SEL_MASK		= 0x1 << DCLK_BUS_GPIO_SEL_SHIFT,
+
+	/* CRU_CLKSEL_CON43 */
+	CLK_TSADC_DIV_SHIFT		= 0,
+	CLK_TSADC_DIV_MASK		= 0x7ff << CLK_TSADC_DIV_SHIFT,
+	CLK_TSADC_TSEN_DIV_SHIFT	= 11,
+	CLK_TSADC_TSEN_DIV_MASK		= 0x1f << CLK_TSADC_TSEN_DIV_SHIFT,
+
+	/* CRU_CLKSEL_CON44 */
+	CLK_SARADC_VCCIO156_DIV_SHIFT	= 0,
+	CLK_SARADC_VCCIO156_DIV_MASK 	= 0xfff << CLK_SARADC_VCCIO156_DIV_SHIFT,
+
+	/* CRU_CLKSEL_CON45 */
+	CLK_GMAC_125M_SEL_SHIFT		= 8,
+	CLK_GMAC_125M_SEL_MASK		= 0x1 << CLK_GMAC_125M_SEL_SHIFT,
+	CLK_GMAC_125M			= 0,
+	CLK_GMAC_24M,
+	CLK_GMAC_50M_SEL_SHIFT		= 7,
+	CLK_GMAC_50M_SEL_MASK		= 0x1 << CLK_GMAC_50M_SEL_SHIFT,
+	CLK_GMAC_50M			= 0,
+
+	/* CRU_CLKSEL_CON46 */
+	CLK_GMAC_ETH_OUT2IO_SEL_SHIFT	= 7,
+	CLK_GMAC_ETH_OUT2IO_SEL_MASK	= 0x1 << CLK_GMAC_ETH_OUT2IO_SEL_SHIFT,
+	CLK_GMAC_ETH_OUT2IO_GPLL	= 0,
+	CLK_GMAC_ETH_OUT2IO_CPLL,
+	CLK_GMAC_ETH_OUT2IO_DIV_SHIFT	= 0,
+	CLK_GMAC_ETH_OUT2IO_DIV_MASK	= 0x7f,
+
+	/* PMU0CRU_CLKSEL_CON03 */
+	CLK_PMU0_I2C0_DIV_SHIFT		= 8,
+	CLK_PMU0_I2C0_DIV_MASK		= 0x1f << CLK_PMU0_I2C0_DIV_SHIFT,
+	CLK_PMU0_I2C0_SEL_SHIFT		= 14,
+	CLK_PMU0_I2C0_SEL_MASK		= 0x3 << CLK_PMU0_I2C0_SEL_SHIFT,
+	CLK_PMU0_I2C0_SEL_200M		= 0,
+	CLK_PMU0_I2C0_SEL_24M,
+	CLK_PMU0_I2C0_SEL_32K,
+
+	/* PMU1CRU_CLKSEL_CON02 */
+	CLK_PMU1_UART0_SRC_DIV_SHIFT	= 0,
+	CLK_PMU1_UART0_SRC_DIV_MASK	= 0xf << CLK_PMU1_UART0_SRC_DIV_SHIFT,
+	CLK_PMU1_UART0_SEL_SHIFT	= 6,
+	CLK_PMU1_UART0_SEL_MASK		= 0x3 << CLK_PMU1_UART0_SEL_SHIFT,
+
+	/* PMU1CRU_CLKSEL_CON04 */
+	CLK_PMU1_SPI0_DIV_SHIFT		= 0,
+	CLK_PMU1_SPI0_DIV_MASK		= 0x3 << CLK_PMU1_SPI0_DIV_SHIFT,
+	CLK_PMU1_SPI0_SEL_SHIFT		= 6,
+	CLK_PMU1_SPI0_SEL_MASK		= 0x3 << CLK_PMU1_SPI0_SEL_SHIFT,
+	CLK_PMU1_SPI0_SEL_200M		= 0,
+	CLK_PMU1_SPI0_SEL_24M,
+	CLK_PMU1_SPI0_SEL_32K,
+	CLK_PMU1_PWM0_DIV_SHIFT		= 8,
+	CLK_PMU1_PWM0_DIV_MASK		= 0x3 << CLK_PMU1_PWM0_DIV_SHIFT,
+	CLK_PMU1_PWM0_SEL_SHIFT		= 14,
+	CLK_PMU1_PWM0_SEL_MASK		= 0x3 << CLK_PMU1_PWM0_SEL_SHIFT,
+	CLK_PMU1_PWM0_SEL_200M		= 0,
+	CLK_PMU1_PWM0_SEL_24M,
+	CLK_PMU1_PWM0_SEL_32K,
+
+	/* PERICRU_CLKSEL_CON00 */
+	ACLK_PERI_DIV_SHIFT		= 0,
+	ACLK_PERI_DIV_MASK		= 0x1f << ACLK_PERI_DIV_SHIFT,
+	ACLK_PERI_SEL_SHIFT		= 7,
+	ACLK_PERI_SEL_MASK		= 0x1 << ACLK_PERI_SEL_SHIFT,
+	ACLK_PERI_SEL_GPLL		= 0,
+	ACLK_PERI_SEL_CPLL,
+	HCLK_PERI_DIV_SHIFT		= 8,
+	HCLK_PERI_DIV_MASK		= 0x3f << HCLK_PERI_DIV_SHIFT,
+	HCLK_PERI_SEL_SHIFT		= 15,
+	HCLK_PERI_SEL_MASK		= 0x1 << HCLK_PERI_SEL_SHIFT,
+
+	/* PERICRU_CLKSEL_CON01 */
+	PCLK_PERI_DIV_SHIFT		= 0,
+	PCLK_PERI_DIV_MASK		= 0x1f << PCLK_PERI_DIV_SHIFT,
+	PCLK_PERI_SEL_SHIFT		= 7,
+	PCLK_PERI_SEL_MASK		= 0x1 << PCLK_PERI_SEL_SHIFT,
+	CLK_SAI0_SRC_DIV_SHIFT		= 8,
+	CLK_SAI0_SRC_DIV_MASK		= 0x3f << CLK_SAI0_SRC_DIV_SHIFT,
+	CLK_SAI0_SRC_SEL_SHIFT		= 14,
+	CLK_SAI0_SRC_SEL_MASK		= 0x3 << CLK_SAI0_SRC_SEL_SHIFT,
+
+	/* PERICRU_CLKSEL_CON16 */
+	CCLK_SDMMC0_DIV_SHIFT		= 0,
+	CCLK_SDMMC0_DIV_MASK		= 0xff << CCLK_SDMMC0_DIV_SHIFT,
+	CCLK_SDMMC0_SEL_SHIFT		= 14,
+	CCLK_SDMMC0_SEL_MASK		= 0x3 << CCLK_SDMMC0_SEL_SHIFT,
+	CCLK_SDMMC_SEL_GPLL		= 0,
+	CCLK_SDMMC_SEL_CPLL,
+	CCLK_SDMMC_SEL_24M,
+	CCLK_SDMMC_SEL_HPLL,
+
+	/* PERICRU_CLKSEL_CON17 */
+	CCLK_SDMMC1_DIV_SHIFT		= 0,
+	CCLK_SDMMC1_DIV_MASK		= 0xff << CCLK_SDMMC1_DIV_SHIFT,
+	CCLK_SDMMC1_SEL_SHIFT		= 14,
+	CCLK_SDMMC1_SEL_MASK		= 0x3 << CCLK_SDMMC1_SEL_SHIFT,
+
+	/* PERICRU_CLKSEL_CON18 */
+	CCLK_EMMC_DIV_SHIFT		= 0,
+	CCLK_EMMC_DIV_MASK		= 0xff << CCLK_EMMC_DIV_SHIFT,
+	CCLK_EMMC_SEL_SHIFT		= 14,
+	CCLK_EMMC_SEL_MASK		= 0x3 << CCLK_EMMC_SEL_SHIFT,
+	CCLK_EMMC_SEL_GPLL		= 0,
+	CCLK_EMMC_SEL_CPLL,
+	CCLK_EMMC_SEL_24M,
+	CCLK_EMMC_SEL_HPLL,
+
+	/* PERICRU_CLKSEL_CON19 */
+	BCLK_EMMC_DIV_SHIFT		= 8,
+	BCLK_EMMC_DIV_MASK		= 0x7f << BCLK_EMMC_DIV_SHIFT,
+	BCLK_EMMC_SEL_SHIFT		= 15,
+	BCLK_EMMC_SEL_MASK		= 0x1 << BCLK_EMMC_SEL_SHIFT,
+	BCLK_EMMC_SEL_GPLL		= 0,
+	BCLK_EMMC_SEL_CPLL,
+
+	/* PERICRU_CLKSEL_CON20 */
+	SCLK_SFC_DIV_SHIFT		= 0,
+	SCLK_SFC_DIV_MASK		= 0xff << SCLK_SFC_DIV_SHIFT,
+	SCLK_SFC_SEL_SHIFT		= 8,
+	SCLK_SFC_SEL_MASK		= 0x3 << SCLK_SFC_SEL_SHIFT,
+	SCLK_SFC_SRC_SEL_GPLL		= 0,
+	SCLK_SFC_SRC_SEL_CPLL,
+	SCLK_SFC_SRC_SEL_24M,
+	CLK_SPI1_SEL_SHIFT		= 12,
+	CLK_SPI1_SEL_MASK		= 0x3 << CLK_SPI1_SEL_SHIFT,
+	CLK_SPI_SEL_200M		= 0,
+	CLK_SPI_SEL_100M,
+	CLK_SPI_SEL_50M,
+	CLK_SPI_SEL_24M,
+	CLK_SPI2_SEL_SHIFT		= 14,
+	CLK_SPI2_SEL_MASK		= 0x3 << CLK_SPI2_SEL_SHIFT,
+
+	/* PERICRU_CLKSEL_CON21 */
+	CLK_UART_SRC_DIV_SHIFT		= 0,
+	CLK_UART_SRC_DIV_MASK		= 0x7f << CLK_UART_SRC_DIV_SHIFT,
+	CLK_UART_SRC_SEL_SHIFT		= 8,
+	CLK_UART_SRC_SEL_MASK		= 0x1 << CLK_UART_SRC_SEL_SHIFT,
+	CLK_UART_SRC_SEL_GPLL		= 0,
+	CLK_UART_SRC_SEL_CPLL,
+	CLK_UART_SEL_SHIFT		= 14,
+	CLK_UART_SEL_MASK		= 0x3 << CLK_UART_SEL_SHIFT,
+	CLK_UART_SEL_SRC		= 0,
+	CLK_UART_SEL_FRAC,
+	CLK_UART_SEL_XIN24M,
+
+	/* PERICRU_CLKSEL_CON22 */
+	CLK_UART_FRAC_NUMERATOR_SHIFT	= 16,
+	CLK_UART_FRAC_NUMERATOR_MASK	= 0xffff << 16,
+	CLK_UART_FRAC_DENOMINATOR_SHIFT	= 0,
+	CLK_UART_FRAC_DENOMINATOR_MASK	= 0xffff,
+
+	/* PERICRU_CLKSEL_CON40 */
+	CLK_PWM1_PERI_SEL_SHIFT		= 0,
+	CLK_PWM1_PERI_SEL_MASK		= 0x3 << CLK_PWM1_PERI_SEL_SHIFT,
+	CLK_PWM_SEL_100M		= 0,
+	CLK_PWM_SEL_50M,
+	CLK_PWM_SEL_24M,
+	CLK_PWM2_PERI_SEL_SHIFT		= 6,
+	CLK_PWM2_PERI_SEL_MASK		= 0x3 << CLK_PWM2_PERI_SEL_SHIFT,
+	CLK_PWM3_PERI_SEL_SHIFT		= 8,
+	CLK_PWM3_PERI_SEL_MASK		= 0x3 << CLK_PWM3_PERI_SEL_SHIFT,
+
+	/* PERICRU_CLKSEL_CON43 */
+	CLK_CORE_CRYPTO_SEL_SHIFT	= 0,
+	CLK_CORE_CRYPTO_SEL_MASK	= 0x3 << CLK_CORE_CRYPTO_SEL_SHIFT,
+	CLK_CORE_CRYPTO_SEL_200M	= 0,
+	CLK_CORE_CRYPTO_SEL_100M,
+	CLK_CORE_CRYPTO_SEL_24M,
+	CLK_PKA_CRYPTO_SEL_SHIFT	= 6,
+	CLK_PKA_CRYPTO_SEL_MASK		= 0x3 << CLK_PKA_CRYPTO_SEL_SHIFT,
+	CLK_PKA_CRYPTO_SEL_300M		= 0,
+	CLK_PKA_CRYPTO_SEL_200M,
+	CLK_PKA_CRYPTO_SEL_100M,
+	CLK_PKA_CRYPTO_SEL_24M,
+	TCLK_PERI_WDT_SEL_SHIFT		= 15,
+	TCLK_PERI_WDT_SEL_MASK		= 0x1 << TCLK_PERI_WDT_SEL_SHIFT,
+
+	/* PERICRU_CLKSEL_CON46 */
+	CLK_SARADC_DIV_SHIFT		= 0,
+	CLK_SARADC_DIV_MASK		= 0xfff << CLK_SARADC_DIV_SHIFT,
+};
+#endif
diff --git a/arch/arm/include/asm/arch-rockchip/grf_rk3562.h b/arch/arm/include/asm/arch-rockchip/grf_rk3562.h
new file mode 100644
index 00000000000..7bd84b5e6ac
--- /dev/null
+++ b/arch/arm/include/asm/arch-rockchip/grf_rk3562.h
@@ -0,0 +1,75 @@
+/*
+ * (C) Copyright 2022 Rockchip Electronics Co., Ltd.
+ *
+ * SPDX-License-Identifier:     GPL-2.0+
+ */
+#ifndef _ASM_ARCH_GRF_RK3562_H
+#define _ASM_ARCH_GRF_RK3562_H
+
+
+struct rk3562_pmu_grf {
+        /* pmugrf */
+        uint32_t reserved1[(0x0100 - 0x0000) / 4];        /* address offset: 0x0000 */
+        uint32_t soc_con[13];                             /* address offset: 0x0100 */
+        uint32_t soc_status[1];                           /* address offset: 0x0134 */
+        uint32_t reserved2[(0x0180 - 0x0134) / 4 - 1];    /* address offset: 0x0138 */
+        uint32_t pvtm_con[1];                             /* address offset: 0x0180 */
+        uint32_t reserved3[(0x0200 - 0x0180) / 4 - 1];    /* address offset: 0x0184 */
+        uint32_t os_reg[12];                              /* address offset: 0x0200 */
+        uint32_t reset_function_status;                   /* address offset: 0x0230 */
+        uint32_t reset_function_clr;                      /* address offset: 0x0234 */
+        uint32_t reserved4[(0x0380 - 0x0234) / 4 - 1];    /* address offset: 0x0238 */
+        uint32_t sig_detect_con;                          /* address offset: 0x0380 */
+        uint32_t reserved5[(0x0390 - 0x0380) / 4 - 1];    /* address offset: 0x0384 */
+        uint32_t sig_detect_status;                       /* address offset: 0x0390 */
+        uint32_t reserved6[(0x03a0 - 0x0390) / 4 - 1];    /* address offset: 0x0394 */
+        uint32_t sig_detect_status_clear;                 /* address offset: 0x03a0 */
+        uint32_t reserved7[(0x03b0 - 0x03a0) / 4 - 1];    /* address offset: 0x03a4 */
+        uint32_t sdmmc_det_counter;                       /* address offset: 0x03b0 */
+};
+
+check_member(rk3562_pmu_grf, sdmmc_det_counter, 0x03b0);
+
+struct rk3562_grf {
+        /* sysgrf */
+        uint32_t reserved1[(0x0400 - 0x0000) / 4];        /* address offset: 0x0000 */
+        uint32_t soc_con[7];                              /* address offset: 0x0400 */
+        uint32_t reserved2[(0x0430 - 0x0400) / 4 - 7];    /* address offset: 0x041c */
+        uint32_t soc_status[3];                           /* address offset: 0x0430 */
+        uint32_t reserved3;                               /* address offset: 0x043c */
+        uint32_t biu_con[2];                              /* address offset: 0x0440 */
+        uint32_t reserved4[(0x0460 - 0x0440) / 4 - 2];    /* address offset: 0x0448 */
+        uint32_t ram_con;                                 /* address offset: 0x0460 */
+        uint32_t core_ram_con;                            /* address offset: 0x0464 */
+        uint32_t reserved5[(0x0500 - 0x0464) / 4 - 1];    /* address offset: 0x0468 */
+        uint32_t cpu_con[2];                              /* address offset: 0x0500 */
+        uint32_t reserved6[(0x0510 - 0x0500) / 4 - 2];    /* address offset: 0x0508 */
+        uint32_t cpu_status[2];                           /* address offset: 0x0510 */
+        uint32_t reserved7[(0x0520 - 0x0510) / 4 - 2];    /* address offset: 0x0518 */
+        uint32_t vi_con[2];                               /* address offset: 0x0520 */
+        uint32_t reserved8[(0x0530 - 0x0520) / 4 - 2];    /* address offset: 0x0528 */
+        uint32_t vi_status[1];                            /* address offset: 0x0530 */
+        uint32_t reserved9[(0x0570 - 0x0530) / 4 - 1];    /* address offset: 0x0534 */
+        uint32_t gpu_con[2];                              /* address offset: 0x0570 */
+        uint32_t reserved10[(0x0580 - 0x0570) / 4 - 2];   /* address offset: 0x0578 */
+        uint32_t tsadc_con;                               /* address offset: 0x0580 */
+        uint32_t reserved11[(0x05d0 - 0x0580) / 4 - 1];   /* address offset: 0x0584 */
+        uint32_t vo_con[2];                               /* address offset: 0x05d0 */
+        uint32_t reserved12[(0x0600 - 0x05d0) / 4 - 2];   /* address offset: 0x05d8 */
+        uint32_t top_pvtpll_con[4];                       /* address offset: 0x0600 */
+        uint32_t top_pvtpll_status[2];                    /* address offset: 0x0610 */
+        uint32_t reserved13[(0x0620 - 0x0610) / 4 - 2];   /* address offset: 0x0618 */
+        uint32_t cpu_pvtpll_con[4];                       /* address offset: 0x0620 */
+        uint32_t cpu_pvtpll_status[2];                    /* address offset: 0x0630 */
+        uint32_t reserved14[(0x0640 - 0x0630) / 4 - 2];   /* address offset: 0x0638 */
+        uint32_t gpu_pvtpll_con[4];                       /* address offset: 0x0640 */
+        uint32_t gpu_pvtpll_status[2];                    /* address offset: 0x0650 */
+        uint32_t reserved15[(0x0660 - 0x0650) / 4 - 2];   /* address offset: 0x0658 */
+        uint32_t npu_pvtpll_con[4];                       /* address offset: 0x0660 */
+        uint32_t npu_pvtpll_status[2];                    /* address offset: 0x0670 */
+        uint32_t reserved16[(0x0800 - 0x0670) / 4 - 2];   /* address offset: 0x0678 */
+        uint32_t chip_id;                                 /* address offset: 0x0800 */
+};
+check_member(rk3562_grf, chip_id, 0x0800);
+
+#endif
diff --git a/arch/arm/include/asm/arch-rockchip/ioc_rk3562.h b/arch/arm/include/asm/arch-rockchip/ioc_rk3562.h
new file mode 100644
index 00000000000..168fd1fa4b6
--- /dev/null
+++ b/arch/arm/include/asm/arch-rockchip/ioc_rk3562.h
@@ -0,0 +1,210 @@
+/*
+ * (C) Copyright 2022 Rockchip Electronics Co., Ltd.
+ *
+ * SPDX-License-Identifier:     GPL-2.0+
+ */
+#ifndef _ASM_ARCH_IOC_RK3562_H
+#define _ASM_ARCH_IOC_RK3562_H
+
+
+struct rk3562_ioc {
+	uint32_t gpio1a_iomux_sel_l;                 /* Address Offset: 0x0000 */
+	uint32_t gpio1a_iomux_sel_h;                 /* Address Offset: 0x0004 */
+	uint32_t gpio1b_iomux_sel_l;                 /* Address Offset: 0x0008 */
+	uint32_t gpio1b_iomux_sel_h;                 /* Address Offset: 0x000C */
+	uint32_t gpio1c_iomux_sel_l;                 /* Address Offset: 0x0010 */
+	uint32_t gpio1c_iomux_sel_h;                 /* Address Offset: 0x0014 */
+	uint32_t gpio1d_iomux_sel_l;                 /* Address Offset: 0x0018 */
+	uint32_t gpio1d_iomux_sel_h;                 /* Address Offset: 0x001C */
+	uint32_t gpio2a_iomux_sel_l;                 /* Address Offset: 0x0020 */
+	uint32_t reserved0024[23];                   /* Address Offset: 0x0024 */
+	uint32_t gpio1a_p;                           /* Address Offset: 0x0080 */
+	uint32_t gpio1b_p;                           /* Address Offset: 0x0084 */
+	uint32_t gpio1c_p;                           /* Address Offset: 0x0088 */
+	uint32_t gpio1d_p;                           /* Address Offset: 0x008C */
+	uint32_t gpio2a_p;                           /* Address Offset: 0x0090 */
+	uint32_t reserved0094[11];                   /* Address Offset: 0x0094 */
+	uint32_t gpio1a_ie;                          /* Address Offset: 0x00C0 */
+	uint32_t gpio1b_ie;                          /* Address Offset: 0x00C4 */
+	uint32_t gpio1c_ie;                          /* Address Offset: 0x00C8 */
+	uint32_t gpio1d_ie;                          /* Address Offset: 0x00CC */
+	uint32_t gpio2a_ie;                          /* Address Offset: 0x00D0 */
+	uint32_t reserved00d4[11];                   /* Address Offset: 0x00D4 */
+	uint32_t gpio1a_od;                          /* Address Offset: 0x0100 */
+	uint32_t gpio1b_od;                          /* Address Offset: 0x0104 */
+	uint32_t gpio1c_od;                          /* Address Offset: 0x0108 */
+	uint32_t gpio1d_od;                          /* Address Offset: 0x010C */
+	uint32_t gpio2a_od;                          /* Address Offset: 0x0110 */
+	uint32_t reserved0114[11];                   /* Address Offset: 0x0114 */
+	uint32_t gpio1a_sus;                         /* Address Offset: 0x0140 */
+	uint32_t gpio1b_sus;                         /* Address Offset: 0x0144 */
+	uint32_t gpio1c_sus;                         /* Address Offset: 0x0148 */
+	uint32_t gpio1d_sus;                         /* Address Offset: 0x014C */
+	uint32_t gpio2a_sus;                         /* Address Offset: 0x0150 */
+	uint32_t reserved0154[11];                   /* Address Offset: 0x0154 */
+	uint32_t gpio1a_sl;                          /* Address Offset: 0x0180 */
+	uint32_t gpio1b_sl;                          /* Address Offset: 0x0184 */
+	uint32_t gpio1c_sl;                          /* Address Offset: 0x0188 */
+	uint32_t gpio1d_sl;                          /* Address Offset: 0x018C */
+	uint32_t gpio2a_sl;                          /* Address Offset: 0x0190 */
+	uint32_t reserved0194[27];                   /* Address Offset: 0x0194 */
+	uint32_t gpio1a_ds0;                         /* Address Offset: 0x0200 */
+	uint32_t gpio1a_ds1;                         /* Address Offset: 0x0204 */
+	uint32_t gpio1a_ds2;                         /* Address Offset: 0x0208 */
+	uint32_t gpio1a_ds3;                         /* Address Offset: 0x020C */
+	uint32_t gpio1b_ds0;                         /* Address Offset: 0x0210 */
+	uint32_t gpio1b_ds1;                         /* Address Offset: 0x0214 */
+	uint32_t gpio1b_ds2;                         /* Address Offset: 0x0218 */
+	uint32_t gpio1b_ds3;                         /* Address Offset: 0x021C */
+	uint32_t gpio1c_ds0;                         /* Address Offset: 0x0220 */
+	uint32_t gpio1c_ds1;                         /* Address Offset: 0x0224 */
+	uint32_t gpio1c_ds2;                         /* Address Offset: 0x0228 */
+	uint32_t gpio1c_ds3;                         /* Address Offset: 0x022C */
+	uint32_t gpio1d_ds0;                         /* Address Offset: 0x0230 */
+	uint32_t gpio1d_ds1;                         /* Address Offset: 0x0234 */
+	uint32_t gpio1d_ds2;                         /* Address Offset: 0x0238 */
+	uint32_t gpio1d_ds3;                         /* Address Offset: 0x023C */
+	uint32_t gpio2a_ds0;                         /* Address Offset: 0x0240 */
+	uint32_t reserved0244[47];                   /* Address Offset: 0x0244 */
+	uint32_t io_vsel0;                           /* Address Offset: 0x0300 */
+	uint32_t reserved0304[63];                   /* Address Offset: 0x0304 */
+	uint32_t mac1_io_con0;                       /* Address Offset: 0x0400 */
+	uint32_t mac1_io_con1;                       /* Address Offset: 0x0404 */
+	uint32_t reserved0408[62];                   /* Address Offset: 0x0408 */
+	uint32_t sdcard0_io_con;                     /* Address Offset: 0x0500 */
+	uint32_t jtag_m1_con;                        /* Address Offset: 0x0504 */
+	uint32_t reserved0508[16078];                /* Address Offset: 0x0508 */
+	uint32_t gpio3a_iomux_sel_l;                 /* Address Offset: 0x10040 */
+	uint32_t gpio3a_iomux_sel_h;                 /* Address Offset: 0x10044 */
+	uint32_t gpio3b_iomux_sel_l;                 /* Address Offset: 0x10048 */
+	uint32_t gpio3b_iomux_sel_h;                 /* Address Offset: 0x1004C */
+	uint32_t gpio3c_iomux_sel_l;                 /* Address Offset: 0x10050 */
+	uint32_t gpio3c_iomux_sel_h;                 /* Address Offset: 0x10054 */
+	uint32_t gpio3d_iomux_sel_l;                 /* Address Offset: 0x10058 */
+	uint32_t gpio3d_iomux_sel_h;                 /* Address Offset: 0x1005C */
+	uint32_t gpio4a_iomux_sel_l;                 /* Address Offset: 0x10060 */
+	uint32_t gpio4a_iomux_sel_h;                 /* Address Offset: 0x10064 */
+	uint32_t gpio4b_iomux_sel_l;                 /* Address Offset: 0x10068 */
+	uint32_t gpio4b_iomux_sel_h;                 /* Address Offset: 0x1006C */
+	uint32_t reserved10070[12];                  /* Address Offset: 0x10070 */
+	uint32_t gpio3a_p;                           /* Address Offset: 0x100A0 */
+	uint32_t gpio3b_p;                           /* Address Offset: 0x100A4 */
+	uint32_t gpio3c_p;                           /* Address Offset: 0x100A8 */
+	uint32_t gpio3d_p;                           /* Address Offset: 0x100AC */
+	uint32_t gpio4a_p;                           /* Address Offset: 0x100B0 */
+	uint32_t gpio4b_p;                           /* Address Offset: 0x100B4 */
+	uint32_t reserved100b8[10];                  /* Address Offset: 0x100B8 */
+	uint32_t gpio3a_ie;                          /* Address Offset: 0x100E0 */
+	uint32_t gpio3b_ie;                          /* Address Offset: 0x100E4 */
+	uint32_t gpio3c_ie;                          /* Address Offset: 0x100E8 */
+	uint32_t gpio3d_ie;                          /* Address Offset: 0x100EC */
+	uint32_t gpio4a_ie;                          /* Address Offset: 0x100F0 */
+	uint32_t gpio4b_ie;                          /* Address Offset: 0x100F4 */
+	uint32_t reserved100f8[10];                  /* Address Offset: 0x100F8 */
+	uint32_t gpio3a_od;                          /* Address Offset: 0x10120 */
+	uint32_t gpio3b_od;                          /* Address Offset: 0x10124 */
+	uint32_t gpio3c_od;                          /* Address Offset: 0x10128 */
+	uint32_t gpio3d_od;                          /* Address Offset: 0x1012C */
+	uint32_t gpio4a_od;                          /* Address Offset: 0x10130 */
+	uint32_t gpio4b_od;                          /* Address Offset: 0x10134 */
+	uint32_t reserved10138[10];                  /* Address Offset: 0x10138 */
+	uint32_t gpio3a_sus;                         /* Address Offset: 0x10160 */
+	uint32_t gpio3b_sus;                         /* Address Offset: 0x10164 */
+	uint32_t gpio3c_sus;                         /* Address Offset: 0x10168 */
+	uint32_t gpio3d_sus;                         /* Address Offset: 0x1016C */
+	uint32_t gpio4a_sus;                         /* Address Offset: 0x10170 */
+	uint32_t gpio4b_sus;                         /* Address Offset: 0x10174 */
+	uint32_t reserved10178[10];                  /* Address Offset: 0x10178 */
+	uint32_t gpio3a_sl;                          /* Address Offset: 0x101A0 */
+	uint32_t gpio3b_sl;                          /* Address Offset: 0x101A4 */
+	uint32_t gpio3c_sl;                          /* Address Offset: 0x101A8 */
+	uint32_t gpio3d_sl;                          /* Address Offset: 0x101AC */
+	uint32_t gpio4a_sl;                          /* Address Offset: 0x101B0 */
+	uint32_t gpio4b_sl;                          /* Address Offset: 0x101B4 */
+	uint32_t reserved101b8[50];                  /* Address Offset: 0x101B8 */
+	uint32_t gpio3a_ds0;                         /* Address Offset: 0x10280 */
+	uint32_t gpio3a_ds1;                         /* Address Offset: 0x10284 */
+	uint32_t gpio3a_ds2;                         /* Address Offset: 0x10288 */
+	uint32_t gpio3a_ds3;                         /* Address Offset: 0x1028C */
+	uint32_t gpio3b_ds0;                         /* Address Offset: 0x10290 */
+	uint32_t gpio3b_ds1;                         /* Address Offset: 0x10294 */
+	uint32_t gpio3b_ds2;                         /* Address Offset: 0x10298 */
+	uint32_t gpio3b_ds3;                         /* Address Offset: 0x1029C */
+	uint32_t gpio3c_ds0;                         /* Address Offset: 0x102A0 */
+	uint32_t gpio3c_ds1;                         /* Address Offset: 0x102A4 */
+	uint32_t gpio3c_ds2;                         /* Address Offset: 0x102A8 */
+	uint32_t gpio3c_ds3;                         /* Address Offset: 0x102AC */
+	uint32_t gpio3d_ds0;                         /* Address Offset: 0x102B0 */
+	uint32_t gpio3d_ds1;                         /* Address Offset: 0x102B4 */
+	uint32_t gpio3d_ds2;                         /* Address Offset: 0x102B8 */
+	uint32_t gpio3d_ds3;                         /* Address Offset: 0x102BC */
+	uint32_t gpio4a_ds0;                         /* Address Offset: 0x102C0 */
+	uint32_t gpio4a_ds1;                         /* Address Offset: 0x102C4 */
+	uint32_t gpio4a_ds2;                         /* Address Offset: 0x102C8 */
+	uint32_t gpio4a_ds3;                         /* Address Offset: 0x102CC */
+	uint32_t gpio4b_ds0;                         /* Address Offset: 0x102D0 */
+	uint32_t gpio4b_ds1;                         /* Address Offset: 0x102D4 */
+	uint32_t gpio4b_ds2;                         /* Address Offset: 0x102D8 */
+	uint32_t gpio4b_ds3;                         /* Address Offset: 0x102DC */
+	uint32_t reserved102e0[8];                   /* Address Offset: 0x102E0 */
+	uint32_t io_vsel1;                           /* Address Offset: 0x10300 */
+	uint32_t reserved10304[63];                  /* Address Offset: 0x10304 */
+	uint32_t mac0_io_con0;                       /* Address Offset: 0x10400 */
+	uint32_t mac0_io_con1;                       /* Address Offset: 0x10404 */
+	uint32_t reserved10408[62];                  /* Address Offset: 0x10408 */
+	uint32_t vo_io_con;                          /* Address Offset: 0x10500 */
+	uint32_t reserved10504[35];                  /* Address Offset: 0x10504 */
+	uint32_t saradc1_con;                        /* Address Offset: 0x10590 */
+	uint32_t reserved10594[16027];               /* Address Offset: 0x10594 */
+	uint32_t gpio0a_iomux_sel_l;                 /* Address Offset: 0x20000 */
+	uint32_t gpio0a_iomux_sel_h;                 /* Address Offset: 0x20004 */
+	uint32_t gpio0b_iomux_sel_l;                 /* Address Offset: 0x20008 */
+	uint32_t gpio0b_iomux_sel_h;                 /* Address Offset: 0x2000C */
+	uint32_t gpio0c_iomux_sel_l;                 /* Address Offset: 0x20010 */
+	uint32_t gpio0c_iomux_sel_h;                 /* Address Offset: 0x20014 */
+	uint32_t gpio0d_iomux_sel_l;                 /* Address Offset: 0x20018 */
+	uint32_t reserved2001c;                      /* Address Offset: 0x2001C */
+	uint32_t gpio0a_p;                           /* Address Offset: 0x20020 */
+	uint32_t gpio0b_p;                           /* Address Offset: 0x20024 */
+	uint32_t gpio0c_p;                           /* Address Offset: 0x20028 */
+	uint32_t gpio0d_p;                           /* Address Offset: 0x2002C */
+	uint32_t gpio0a_ie;                          /* Address Offset: 0x20030 */
+	uint32_t gpio0b_ie;                          /* Address Offset: 0x20034 */
+	uint32_t gpio0c_ie;                          /* Address Offset: 0x20038 */
+	uint32_t gpio0d_ie;                          /* Address Offset: 0x2003C */
+	uint32_t gpio0a_od;                          /* Address Offset: 0x20040 */
+	uint32_t gpio0b_od;                          /* Address Offset: 0x20044 */
+	uint32_t gpio0c_od;                          /* Address Offset: 0x20048 */
+	uint32_t gpio0d_od;                          /* Address Offset: 0x2004C */
+	uint32_t gpio0a_sus;                         /* Address Offset: 0x20050 */
+	uint32_t gpio0b_sus;                         /* Address Offset: 0x20054 */
+	uint32_t gpio0c_sus;                         /* Address Offset: 0x20058 */
+	uint32_t gpio0d_sus;                         /* Address Offset: 0x2005C */
+	uint32_t gpio0a_sl;                          /* Address Offset: 0x20060 */
+	uint32_t gpio0b_sl;                          /* Address Offset: 0x20064 */
+	uint32_t gpio0c_sl;                          /* Address Offset: 0x20068 */
+	uint32_t gpio0d_sl;                          /* Address Offset: 0x2006C */
+	uint32_t gpio0a_ds0;                         /* Address Offset: 0x20070 */
+	uint32_t gpio0a_ds1;                         /* Address Offset: 0x20074 */
+	uint32_t gpio0a_ds2;                         /* Address Offset: 0x20078 */
+	uint32_t gpio0a_ds3;                         /* Address Offset: 0x2007C */
+	uint32_t gpio0b_ds0;                         /* Address Offset: 0x20080 */
+	uint32_t gpio0b_ds1;                         /* Address Offset: 0x20084 */
+	uint32_t gpio0b_ds2;                         /* Address Offset: 0x20088 */
+	uint32_t gpio0b_ds3;                         /* Address Offset: 0x2008C */
+	uint32_t gpio0c_ds0;                         /* Address Offset: 0x20090 */
+	uint32_t gpio0c_ds1;                         /* Address Offset: 0x20094 */
+	uint32_t gpio0c_ds2;                         /* Address Offset: 0x20098 */
+	uint32_t gpio0c_ds3;                         /* Address Offset: 0x2009C */
+	uint32_t gpio0d_ds0;                         /* Address Offset: 0x200A0 */
+	uint32_t reserved200a4[23];                  /* Address Offset: 0x200A4 */
+	uint32_t jtag_m0_con;                        /* Address Offset: 0x20100 */
+	uint32_t uart_io_con;                        /* Address Offset: 0x20104 */
+	uint32_t reserved20108[16];                  /* Address Offset: 0x20108 */
+	uint32_t io_vsel2;                           /* Address Offset: 0x20148 */
+	uint32_t xin_con;                            /* Address Offset: 0x2014C */
+};
+check_member(rk3562_ioc, xin_con, 0x2014c);
+
+#endif
+
diff --git a/arch/arm/include/asm/arch-rockchip/rockchip_smccc.h b/arch/arm/include/asm/arch-rockchip/rockchip_smccc.h
new file mode 100644
index 00000000000..e7cb14efe48
--- /dev/null
+++ b/arch/arm/include/asm/arch-rockchip/rockchip_smccc.h
@@ -0,0 +1,241 @@
+/*
+ * (C) Copyright 2017 Rockchip Electronics Co., Ltd
+ *
+ * SPDX-License-Identifier:     GPL-2.0+
+ */
+
+#ifndef __ROCKCHIP_SMCCC_H__
+#define __ROCKCHIP_SMCCC_H__
+
+#include <linux/arm-smccc.h>
+
+/* Rockchip platform SiP call ID */
+#define SIP_ATF_VERSION			0x82000001
+#define SIP_ACCESS_REG			0x82000002
+#define SIP_SUSPEND_MODE		0x82000003
+#define SIP_PENDING_CPUS		0x82000004
+#define SIP_UARTDBG_CFG			0x82000005
+#define SIP_UARTDBG_CFG64		0xc2000005
+#define SIP_MCU_EL3FIQ_CFG		0x82000006
+#define SIP_ACCESS_CHIP_STATE64		0xc2000006
+#define SIP_SECURE_MEM_CONFIG		0x82000007
+#define SIP_ACCESS_CHIP_EXTRA_STATE64	0xc2000007
+#define SIP_DRAM_CONFIG			0x82000008
+#define SIP_SHARE_MEM			0x82000009
+#define SIP_SIP_VERSION			0x8200000a
+#define SIP_REMOTECTL_CFG		0x8200000b
+#define SIP_VPU_RESET			0x8200000c
+#define SIP_SOC_BUS_DIV			0x8200000d
+#define SIP_LAST_LOG			0x8200000e
+#define SIP_ACCESS_MEM_OS_REG		0x8200000f
+#define SIP_AMP_CFG			0x82000022
+#define SIP_HDCP_CONFIG			0x82000025
+#define SIP_MCU_CFG			0x82000028
+
+#define ROCKCHIP_SIP_CONFIG_DRAM_INIT		0x00
+#define ROCKCHIP_SIP_CONFIG_DRAM_SET_RATE	0x01
+#define ROCKCHIP_SIP_CONFIG_DRAM_ROUND_RATE	0x02
+#define ROCKCHIP_SIP_CONFIG_DRAM_SET_AT_SR	0x03
+#define ROCKCHIP_SIP_CONFIG_DRAM_GET_BW		0x04
+#define ROCKCHIP_SIP_CONFIG_DRAM_GET_RATE	0x05
+#define ROCKCHIP_SIP_CONFIG_DRAM_CLR_IRQ	0x06
+#define ROCKCHIP_SIP_CONFIG_DRAM_SET_PARAM	0x07
+#define ROCKCHIP_SIP_CONFIG_DRAM_GET_VERSION	0x08
+#define ROCKCHIP_SIP_CONFIG_DRAM_POST_SET_RATE	0x09
+#define ROCKCHIP_SIP_CONFIG_DRAM_SET_NOC_RL	0x0a
+#define ROCKCHIP_SIP_CONFIG_DRAM_DEBUG		0x0b
+#define ROCKCHIP_SIP_CONFIG_DRAM_MCU_START	0x0c
+#define ROCKCHIP_SIP_CONFIG_DRAM_ECC		0x0d
+#define ROCKCHIP_SIP_CONFIG_DRAM_GET_FREQ_INFO	0x0e
+#define ROCKCHIP_SIP_CONFIG_DRAM_FSP_INIT	0x0f
+
+/* SIP_ACCESS_MEM_OS_REG child configs */
+enum {
+	RK_MEM_OS_REG_READ = 0,
+	RK_MEM_OS_REG_WRITE,
+};
+
+/* RK_SIP_MCU_CFG child configs, MCU ID */
+#define ROCKCHIP_SIP_CONFIG_BUSMCU_0_ID		0x00
+#define ROCKCHIP_SIP_CONFIG_BUSMCU_1_ID		0x01
+#define ROCKCHIP_SIP_CONFIG_PMUMCU_0_ID		0x10
+#define ROCKCHIP_SIP_CONFIG_DDRMCU_0_ID		0x20
+#define ROCKCHIP_SIP_CONFIG_NPUMCU_0_ID		0x30
+
+/* RK_SIP_MCU_CFG child configs */
+#define ROCKCHIP_SIP_CONFIG_MCU_CODE_START_ADDR		0x01
+#define ROCKCHIP_SIP_CONFIG_MCU_EXPERI_START_ADDR	0x02
+#define ROCKCHIP_SIP_CONFIG_MCU_SRAM_START_ADDR		0x03
+#define ROCKCHIP_SIP_CONFIG_MCU_EXSRAM_START_ADDR	0x04
+
+/* Rockchip Sip version */
+#define SIP_IMPLEMENT_V1                (1)
+#define SIP_IMPLEMENT_V2                (2)
+
+/* Error return code */
+#define IS_SIP_ERROR(x)			(!!(x))
+
+#define SIP_RET_SUCCESS			0
+#define SIP_RET_SMC_UNKNOWN		-1
+#define SIP_RET_NOT_SUPPORTED		-2
+#define SIP_RET_INVALID_PARAMS		-3
+#define SIP_RET_INVALID_ADDRESS		-4
+#define SIP_RET_DENIED			-5
+
+/* SIP_ACCESS_REG: read or write */
+#define SECURE_REG_RD			0x0
+#define SECURE_REG_WR			0x1
+
+/* SIP_AMP_CFG */
+#define AMP_PE_STATE			0x0
+#define AMP_BOOT_ARG01			0x1
+#define AMP_BOOT_ARG23			0x2
+
+/* Share mem page types */
+typedef enum {
+	SHARE_PAGE_TYPE_INVALID = 0,
+	SHARE_PAGE_TYPE_UARTDBG,
+	SHARE_PAGE_TYPE_DDR,
+	SHARE_PAGE_TYPE_DDRDBG,
+	SHARE_PAGE_TYPE_DDRECC,
+	SHARE_PAGE_TYPE_DDRFSP,
+	SHARE_PAGE_TYPE_DDR_ADDRMAP,
+	SHARE_PAGE_TYPE_LAST_LOG,
+	SHARE_PAGE_TYPE_HDCP,
+	SHARE_PAGE_TYPE_SLEEP,
+	SHARE_PAGE_TYPE_MAX,
+} share_page_type_t;
+
+/* hdcp config func */
+typedef enum {
+	HDCP_FUNC_STORAGE_ENCRYPT = 1,
+	HDCP_FUNC_KEY_DECRYPT,
+	HDCP_FUNC_KEY_LOAD,
+	HDCP_FUNC_ENCRYPT_MODE
+} sip_hdcp_func_t;
+
+/*
+ * sip_smc_set_suspend_mode() - Set U-Boot system suspend state before trap to trust.
+ *
+ * see kernel-4.4: drivers/soc/rockchip/rockchip_pm_config.c
+ */
+int sip_smc_set_suspend_mode(unsigned long ctrl,
+			     unsigned long config1,
+			     unsigned long config2);
+
+int sip_smc_remotectl_config(unsigned long func, unsigned long data);
+
+/*
+ * sip_smc_access_mem_os_reg() - access mem os reg
+ */
+int sip_smc_access_mem_os_reg(unsigned long func, unsigned long id,
+			      unsigned long *val);
+
+/*
+ * sip_smc_amp_cfg() - config AMP
+ */
+int sip_smc_amp_cfg(unsigned long func, unsigned long arg0, unsigned long arg1,
+		    unsigned long arg2);
+
+/*
+ * sip_smc_dram() - Set dram configure for trust.
+ *
+ * see: ./drivers/ram/rockchip/rockchip_dmc.c
+ */
+struct arm_smccc_res sip_smc_dram(unsigned long arg0,
+				  unsigned long arg1,
+				  unsigned long arg2);
+
+/*
+ * sip_smc_request_share_mem() - Request share memory from trust.
+ *
+ * @page_num:	page numbers
+ * @page_type:  page type, see: share_page_type_t
+ *
+ * @return arm_smccc_res structure, res.a0 equals 0 on success(res.a1 contains
+ *  share memory base address), otherwise failed.
+ */
+struct arm_smccc_res sip_smc_request_share_mem(unsigned long page_num,
+					       share_page_type_t page_type);
+
+/*
+ * sip_smc_secure_reg_read() - Read secure info(ddr/register...) from trust.
+ *
+ * @addr_phy:	address to read
+ *
+ * @return arm_smccc_res structure, res.a0 equals 0 on success(res.a1 contains
+ *  valid data), otherwise failed.
+ */
+struct arm_smccc_res sip_smc_secure_reg_read(unsigned long addr_phy);
+
+/*
+ * sip_smc_secure_reg_write() - Write data to trust secure info(ddr/register...).
+ *
+ * @addr_phy:	address to write
+ * @val:	value to write
+ *
+ * @return 0 on success, otherwise failed.
+ */
+int sip_smc_secure_reg_write(unsigned long addr_phy, unsigned long val);
+
+/*
+ * sip_smc_set_sip_version() - Set sip version to trust.
+ *
+ * @return 0 on success, otherwise failed.
+ */
+int sip_smc_set_sip_version(unsigned long version);
+
+/*
+ * sip_smc_get_sip_version() - Get sip version to trust.
+ *
+ * @return arm_smccc_res structure, res.a0 equals 0 on success(res.a1 contains
+ *  sip version), otherwise failed.
+ */
+struct arm_smccc_res sip_smc_get_sip_version(void);
+
+/*
+ * sip_smc_hdcp_config() - handle hdcp.
+ *
+ * @return  0 on success, otherwise failed.
+ */
+int sip_smc_hdcp_config(unsigned long func,
+			unsigned long arg1, unsigned long arg2);
+
+/*
+ * sip_smc_mcu_config() - handle mcu.
+ *
+ * @return  0 on success, otherwise failed.
+ */
+int sip_smc_mcu_config(unsigned long mcu_id, unsigned long func, unsigned long arg2);
+
+/*
+ * psci_cpu_on() - Standard ARM PSCI cpu on call.
+ *
+ * @cpuid:		cpu id
+ * @entry_point:	boot entry point
+ *
+ * @return 0 on success, otherwise failed.
+ */
+int psci_cpu_on(unsigned long cpuid, unsigned long entry_point);
+
+/*
+ * psci_cpu_off() - Standard ARM PSCI cpu off call.
+ *
+ * @state:		dummy, set 0 by default.
+ *
+ * @return 0 on success, otherwise failed.
+ */
+int psci_cpu_off(uint32_t state);
+
+#ifdef CONFIG_ARM_CPU_SUSPEND
+/*
+ * psci_system_suspend() - Standard ARM PSCI system suspend call.
+ *
+ * @unused:		unused now, always 0 recommend
+ *
+ * @return 0 on success, otherwise failed.
+ */
+int psci_system_suspend(unsigned long unused);
+#endif
+
+#endif
diff --git a/arch/arm/include/asm/arch-rockchip/sdram_rk3562.h b/arch/arm/include/asm/arch-rockchip/sdram_rk3562.h
new file mode 100644
index 00000000000..3357d8fab60
--- /dev/null
+++ b/arch/arm/include/asm/arch-rockchip/sdram_rk3562.h
@@ -0,0 +1,12 @@
+/* SPDX-License-Identifier: GPL-2.0+ */
+/*
+ * Copyright (C) 2022 Rockchip Electronics Co., Ltd.
+ */
+
+#ifndef _ASM_ARCH_SDRAM_RK3562_H
+#define _ASM_ARCH_SDRAM_RK3562_H
+
+#include <asm/arch-rockchip/sdram.h>
+#include <asm/arch-rockchip/sdram_common.h>
+
+#endif /* _ASM_ARCH_SDRAM_RK3562_H */
diff --git a/arch/arm/mach-rockchip/Kconfig b/arch/arm/mach-rockchip/Kconfig
index adac11a6b89..0d1d5c94f6a 100644
--- a/arch/arm/mach-rockchip/Kconfig
+++ b/arch/arm/mach-rockchip/Kconfig
@@ -312,6 +312,37 @@ config ROCKCHIP_RK3399
 	  and video codec support. Peripherals include Gigabit Ethernet,
 	  USB2 host and OTG, SDIO, I2S, UARTs, SPI, I2C and PWMs.
 
+
+config ROCKCHIP_RK3562
+        bool "Support Rockchip RK3562"
+        select ARM64
+        select SUPPORT_SPL
+        select SPL
+        select CLK
+        select PINCTRL
+        select RAM
+        select REGMAP
+        select SYSCON
+        select BOARD_LATE_INIT
+        select DM_REGULATOR_FIXED
+        select DM_RESET
+        imply BOOTSTD_FULL
+        imply DM_RNG
+        imply MISC_INIT_R
+        imply MMC_HS200_SUPPORT if MMC_SDHCI_ROCKCHIP
+        imply OF_LIBFDT_OVERLAY
+        imply OF_UPSTREAM
+        imply PHY_GIGE if DWC_ETH_QOS_ROCKCHIP
+        imply RNG_ROCKCHIP
+        imply ROCKCHIP_COMMON_BOARD
+        imply ROCKCHIP_OTP
+        imply SPL_ATF_NO_PLATFORM_PARAM if SPL_ATF
+        imply SPL_MMC_HS200_SUPPORT if SPL_MMC && MMC_HS200_SUPPORT
+        help
+          The Rockchip RK3562 is a ARM-based SoC with a quad-core Cortex-A53.
+
+
+
 config ROCKCHIP_RK3568
 	bool "Support Rockchip RK3568"
 	select ARM64
@@ -629,6 +660,7 @@ source "arch/arm/mach-rockchip/rk3308/Kconfig"
 source "arch/arm/mach-rockchip/rk3328/Kconfig"
 source "arch/arm/mach-rockchip/rk3368/Kconfig"
 source "arch/arm/mach-rockchip/rk3399/Kconfig"
+source "arch/arm/mach-rockchip/rk3562/Kconfig"
 source "arch/arm/mach-rockchip/rk3568/Kconfig"
 source "arch/arm/mach-rockchip/rk3588/Kconfig"
 source "arch/arm/mach-rockchip/rv1108/Kconfig"
diff --git a/arch/arm/mach-rockchip/Makefile b/arch/arm/mach-rockchip/Makefile
index 5e7edc99cdc..617b89890ff 100644
--- a/arch/arm/mach-rockchip/Makefile
+++ b/arch/arm/mach-rockchip/Makefile
@@ -40,6 +40,7 @@ obj-$(CONFIG_ROCKCHIP_RK322X) += rk322x/
 obj-$(CONFIG_ROCKCHIP_RK3288) += rk3288/
 obj-$(CONFIG_ROCKCHIP_RK3308) += rk3308/
 obj-$(CONFIG_ROCKCHIP_RK3328) += rk3328/
+obj-$(CONFIG_ROCKCHIP_RK3562) += rk3562/
 obj-$(CONFIG_ROCKCHIP_RK3368) += rk3368/
 obj-$(CONFIG_ROCKCHIP_RK3399) += rk3399/
 obj-$(CONFIG_ROCKCHIP_RK3568) += rk3568/
diff --git a/arch/arm/mach-rockchip/rk3562/Kconfig b/arch/arm/mach-rockchip/rk3562/Kconfig
new file mode 100644
index 00000000000..04017d701f2
--- /dev/null
+++ b/arch/arm/mach-rockchip/rk3562/Kconfig
@@ -0,0 +1,36 @@
+if ROCKCHIP_RK3562
+
+config TARGET_GEEKPI_1_RK3562
+        bool "GEEK PI 1"
+        select BOARD_LATE_INIT
+        help
+          RK3562 Geek PI for Rockchp RK3562.
+
+config TARGET_EVB_RK3562
+	bool "EVB_RK3562"
+	select BOARD_LATE_INIT
+	help
+	  RK3562 EVB is a evaluation board for Rockchp RK3562.
+
+config SYS_SOC
+	default "rk3562"
+
+config TEXT_BASE
+        default 0x00200000
+
+config ROCKCHIP_BOOT_MODE_REG
+        default 0xff010220
+
+config SYS_LOAD_ADDR
+        default 0x00c00800
+
+config SPL_BSS_MAX_SIZE
+        default 0x00010000
+
+config ROCKCHIP_COMMON_STACK_ADDR
+        default y
+
+source board/rockchip/evb_rk3562/Kconfig
+source board/geekpi/geekpi-1-rk3562/Kconfig
+
+endif
diff --git a/arch/arm/mach-rockchip/rk3562/Makefile b/arch/arm/mach-rockchip/rk3562/Makefile
new file mode 100644
index 00000000000..e643f8c72f9
--- /dev/null
+++ b/arch/arm/mach-rockchip/rk3562/Makefile
@@ -0,0 +1,11 @@
+#
+# (C) Copyright 2022 Rockchip Electronics Co., Ltd
+#
+# SPDX-License-Identifier:     GPL-2.0+
+#
+
+ifneq ($(CONFIG_TPL_BUILD)$(CONFIG_TPL_TINY_FRAMEWORK),yy)
+obj-y += syscon_rk3562.o
+endif
+obj-y += rk3562.o
+obj-y += clk_rk3562.o
diff --git a/arch/arm/mach-rockchip/rk3562/clk_rk3562.c b/arch/arm/mach-rockchip/rk3562/clk_rk3562.c
new file mode 100644
index 00000000000..51333e1a4fb
--- /dev/null
+++ b/arch/arm/mach-rockchip/rk3562/clk_rk3562.c
@@ -0,0 +1,41 @@
+/*
+ * (C) Copyright 2022 Rockchip Electronics Co., Ltd.
+ *
+ * SPDX-License-Identifier:	GPL-2.0+
+ */
+
+#include <dm.h>
+#include <syscon.h>
+#include <asm/arch-rockchip/clock.h>
+#include <asm/arch-rockchip/cru_rk3562.h>
+#include <linux/err.h>
+
+int rockchip_get_clk(struct udevice **devp)
+{
+	return uclass_get_device_by_driver(UCLASS_CLK,
+			DM_DRIVER_GET(rockchip_rk3562_cru), devp);
+}
+
+#if CONFIG_IS_ENABLED(CLK_SCMI)
+int rockchip_get_scmi_clk(struct udevice **devp)
+{
+	return uclass_get_device_by_driver(UCLASS_CLK,
+			DM_DRIVER_GET(scmi_clock), devp);
+}
+#endif
+
+void *rockchip_get_cru(void)
+{
+	struct rk3562_clk_priv *priv;
+	struct udevice *dev;
+	int ret;
+
+	ret = rockchip_get_clk(&dev);
+	if (ret)
+		return ERR_PTR(ret);
+
+	priv = dev_get_priv(dev);
+
+	return priv->cru;
+}
+
diff --git a/arch/arm/mach-rockchip/rk3562/rk3562.c b/arch/arm/mach-rockchip/rk3562/rk3562.c
new file mode 100644
index 00000000000..c056881e03e
--- /dev/null
+++ b/arch/arm/mach-rockchip/rk3562/rk3562.c
@@ -0,0 +1,696 @@
+/*
+ * Copyright (c) 2022 Rockchip Electronics Co., Ltd
+ *
+ * SPDX-License-Identifier:     GPL-2.0+
+ */
+#include <clk.h>
+#include <dm.h>
+#include <asm/io.h>
+#include <asm/arch-rockchip/hardware.h>
+#include <asm/arch-rockchip/grf_rk3562.h>
+#include <asm/arch-rockchip/ioc_rk3562.h>
+#include <linux/libfdt.h>
+#include <fdt_support.h>
+#include <asm/arch-rockchip/clock.h>
+#include <dt-bindings/clock/rk3562-cru.h>
+#include <asm/arch-rockchip/rockchip_smccc.h>
+#include <blk.h>
+#include <linux/delay.h>
+
+DECLARE_GLOBAL_DATA_PTR;
+
+#define FIREWALL_DDR_BASE	0xfef00000
+#define FW_DDR_MST3_REG		0x2c	/* usb */
+#define FW_DDR_MST4_REG		0x30	/* emmc */
+#define FW_DDR_MST5_REG		0x34	/* fspi */
+#define FW_DDR_MST6_REG		0x38	/* sdmmc mcu */
+#define FW_DDR_CON_REG		0x80
+
+#define PMU_GRF_BASE		0xff010000
+#define PMU_GRF_SOC_CON9	0x0124
+
+#define SYS_GRF_BASE		0xff030000
+#define SYS_GRF_SOC_CON5	0x0414
+#define SYS_GRF_SOC_CON6	0x0418
+
+#define PERI_GRF_BASE		0xff040000
+#define PERI_GRF_AUDIO_CON	0x0070
+
+#define PIPEPHY_GRF_BASE	0xff098000
+#define PIPEPHY_PIPE_CON5	0x0014
+
+#define TOP_CRU_BASE		0xff100000
+#define TOP_CRU_GATE_CON23	0x035c
+#define TOP_CRU_SOFTRST_CON23	0x045c
+#define TOP_CRU_CM0_GATEMASK	0x0680
+
+#define PMU0_CRU_BASE		0xff110000
+
+#define PMU1_CRU_BASE		0xff118000
+#define PMU1_CRU_GATE_CON02	0x0188
+#define PMU1_CRU_SOFTRST_CON02	0x0208
+#define PMU1_CRU_CM0_GATEMASK	0x0420
+
+#define PMU_BASE_ADDR		0xff258000
+#define PMU2_BIU_IDLE_SFTCON0	0x110
+#define PMU2_BIU_IDLE_ACK_STS0	0x120
+#define PMU2_BIT_IDLE_STS0	0x128
+#define PMU2_PWR_GATE_SFTCON0	0x210
+#define PMU2_PWR_GATE_STS0	0x230
+#define PMU2_MEM_SD_SFTCON0	0x300
+/* PMU2_PWR_GATE_SFTCON0 */
+#define PD_GPU_DWN_SFTENA	BIT(0)
+#define PD_VI_DWN_SFTENA	BIT(5)
+#define PD_VO_DWN_SFTENA	BIT(6)
+/* PMU2_BIU_IDLE_SFTCON0 */
+#define IDLE_REQ_GPU_SFTENA	BIT(1)
+#define IDLE_REQ_VI_SFTENA	BIT(3)
+#define IDLE_REQ_VO_SFTENA	BIT(4)
+/* PMU2_BIU_IDLE_ACK_STS0 */
+#define IDLE_ACK_GPU		BIT(1)
+#define IDLE_ACK_VI		BIT(3)
+#define IDLE_ACK_VO		BIT(4)
+/* PMU2_BIT_IDLE_STS0 */
+#define IDLE_GPU		BIT(1)
+#define IDLE_VI			BIT(3)
+#define IDLE_VO			BIT(4)
+
+#define CRYPTO_PRIORITY_REG	0xfeeb0108
+#define DCF_PRIORITY_REG	0xfee10408
+#define DMA2DDR_PRIORITY_REG	0xfee03808
+#define DMAC_PRIORITY_REG	0xfeeb0208
+#define EMMC_PRIORITY_REG	0xfeeb0308
+#define FSPI_PRIORITY_REG	0xfeeb0408
+#define GMAC_PRIORITY_REG	0xfee10208
+#define GPU_PRIORITY_REG	0xfee30008
+#define ISP_PRIORITY_REG	0xfee70008
+#define MAC100_PRIORITY_REG	0xfee10308
+#define MCU_PRIORITY_REG	0xfee10008
+#define PCIE_PRIORITY_REG	0xfeea0008
+#define RKDMA_PRIORITY_REG	0xfeeb0508
+#define SDMMC0_PRIORITY_REG	0xfeeb0608
+#define SDMMC1_PRIORITY_REG	0xfeeb0708
+#define USB2_PRIORITY_REG	0xfeeb0808
+#define USB3_PRIORITY_REG	0xfeea0108
+#define VICAP_PRIORITY_REG	0xfee70108
+#define VOP_PRIORITY_REG	0xfee80008
+
+#define PCIE_SHAPING_REG	0xfeea0088
+
+#define QOS_PRIORITY_LEVEL(h, l)	((((h) & 7) << 8) | ((l) & 7))
+
+#ifdef CONFIG_ARM64
+#include <asm/armv8/mmu.h>
+
+static struct mm_region rk3562_mem_map[] = {
+	{
+		.virt = 0x0UL,
+		.phys = 0x0UL,
+		.size = 0xfc000000UL,
+		.attrs = PTE_BLOCK_MEMTYPE(MT_NORMAL) |
+			 PTE_BLOCK_INNER_SHARE
+	}, {
+		.virt = 0xfc000000UL,
+		.phys = 0xfc000000UL,
+		.size = 0x04000000UL,
+		.attrs = PTE_BLOCK_MEMTYPE(MT_DEVICE_NGNRNE) |
+			 PTE_BLOCK_NON_SHARE |
+			 PTE_BLOCK_PXN | PTE_BLOCK_UXN
+	}, {
+		.virt = 0x100000000UL,
+		.phys = 0x100000000UL,
+		.size = 0x100000000UL,
+		.attrs = PTE_BLOCK_MEMTYPE(MT_NORMAL) |
+			 PTE_BLOCK_INNER_SHARE
+	}, {
+		/* List terminator */
+		0,
+	}
+};
+
+struct mm_region *mem_map = rk3562_mem_map;
+#endif
+
+#define	GPIO0_IOC_BASE			0xFF080000
+#define	GPIO1_IOC_BASE			0xFF060000
+#define	GPIO1A_IOMUX_SEL_L		0x0
+#define	GPIO1A_IOMUX_SEL_H		0x4
+#define	GPIO1B_IOMUX_SEL_L		0x8
+#define	GPIO1_IOC_GPIO1A_DS0		0x200
+#define	GPIO1_IOC_GPIO1A_DS1		0x204
+#define	GPIO1_IOC_GPIO1B_DS0		0x210
+
+#define	GPIO2_IOC_BASE			0xFF060000
+#define	GPIO2_IOC_IO_VSEL0		0x300
+/* GPIO2_IOC_IO_VSEL0 */
+#define	POC_VCCIO2_VD_3V3		BIT(12)
+
+#define	GPIO3_IOC_BASE			0xFF070000
+#define	GPIO4_IOC_BASE			0xFF070000
+
+/* UART0 iomux */
+/* gpio0d0_sel */
+#define UART0_RX_M0			1
+#define UART0_RX_M0_OFFSET		0
+#define UART0_RX_M0_ADDR		(GPIO0_IOC_BASE + 0x18)
+/* gpio0d1_sel */
+#define UART0_TX_M0			1
+#define UART0_TX_M0_OFFSET		4
+#define UART0_TX_M0_ADDR		(GPIO0_IOC_BASE + 0x18)
+
+/* gpio1b3_sel */
+#define UART0_RX_M1			2
+#define UART0_RX_M1_OFFSET		12
+#define UART0_RX_M1_ADDR		(GPIO1_IOC_BASE + 0x08)
+/* gpio1b4_sel */
+#define UART0_TX_M1			2
+#define UART0_TX_M1_OFFSET		0
+#define UART0_TX_M1_ADDR		(GPIO1_IOC_BASE + 0x0C)
+
+/* UART1 iomux */
+/* gpio1d1_sel */
+#define UART1_RX_M0			1
+#define UART1_RX_M0_OFFSET		4
+#define UART1_RX_M0_ADDR		(GPIO1_IOC_BASE + 0x18)
+/* gpio1d2_sel */
+#define UART1_TX_M0			1
+#define UART1_TX_M0_OFFSET		8
+#define UART1_TX_M0_ADDR		(GPIO1_IOC_BASE + 0x18)
+
+/* gpio4a6_sel */
+#define UART1_RX_M1			4
+#define UART1_RX_M1_OFFSET		8
+#define UART1_RX_M1_ADDR		(GPIO4_IOC_BASE + 0x64)
+/* gpio4a5_sel */
+#define UART1_TX_M1			4
+#define UART1_TX_M1_OFFSET		4
+#define UART1_TX_M1_ADDR		(GPIO4_IOC_BASE + 0x64)
+
+/* UART2 iomux */
+/* gpio0c1_sel */
+#define UART2_RX_M0			1
+#define UART2_RX_M0_OFFSET		4
+#define UART2_RX_M0_ADDR		(GPIO0_IOC_BASE + 0x10)
+/* gpio0c0_sel */
+#define UART2_TX_M0			1
+#define UART2_TX_M0_OFFSET		0
+#define UART2_TX_M0_ADDR		(GPIO0_IOC_BASE + 0x10)
+
+/* gpio3a1_sel */
+#define UART2_RX_M1			2
+#define UART2_RX_M1_OFFSET		4
+#define UART2_RX_M1_ADDR		(GPIO3_IOC_BASE + 0x40)
+/* gpio3a0_sel */
+#define UART2_TX_M1			2
+#define UART2_TX_M1_OFFSET		0
+#define UART2_TX_M1_ADDR		(GPIO3_IOC_BASE + 0x40)
+
+/* UART3 iomux */
+/* gpio4b5_sel */
+#define UART3_RX_M0			7
+#define UART3_RX_M0_OFFSET		4
+#define UART3_RX_M0_ADDR		(GPIO4_IOC_BASE + 0x6C)
+/* gpio4b4_sel */
+#define UART3_TX_M0			7
+#define UART3_TX_M0_OFFSET		0
+#define UART3_TX_M0_ADDR		(GPIO4_IOC_BASE + 0x6C)
+
+/* gpio3c0_sel */
+#define UART3_RX_M1			3
+#define UART3_RX_M1_OFFSET		0
+#define UART3_RX_M1_ADDR		(GPIO3_IOC_BASE + 0x50)
+/* gpio3b7_sel */
+#define UART3_TX_M1			3
+#define UART3_TX_M1_OFFSET		12
+#define UART3_TX_M1_ADDR		(GPIO3_IOC_BASE + 0x4C)
+
+/* UART4 iomux */
+/* gpio3d1_sel */
+#define UART4_RX_M0			4
+#define UART4_RX_M0_OFFSET		4
+#define UART4_RX_M0_ADDR		(GPIO3_IOC_BASE + 0x58)
+/* gpio3d0_sel */
+#define UART4_TX_M0			4
+#define UART4_TX_M0_OFFSET		0
+#define UART4_TX_M0_ADDR		(GPIO3_IOC_BASE + 0x58)
+
+/* gpio1d5_sel */
+#define UART4_RX_M1			3
+#define UART4_RX_M1_OFFSET		4
+#define UART4_RX_M1_ADDR		(GPIO1_IOC_BASE + 0x1C)
+/* gpio1d6_sel */
+#define UART4_TX_M1			3
+#define UART4_TX_M1_OFFSET		8
+#define UART4_TX_M1_ADDR		(GPIO1_IOC_BASE + 0x1C)
+
+/* UART5 iomux */
+/* gpio1b7_sel */
+#define UART5_RX_M0			3
+#define UART5_RX_M0_OFFSET		12
+#define UART5_RX_M0_ADDR		(GPIO1_IOC_BASE + 0xC)
+/* gpio1c0_sel */
+#define UART5_TX_M0			3
+#define UART5_TX_M0_OFFSET		0
+#define UART5_TX_M0_ADDR		(GPIO1_IOC_BASE + 0x10)
+
+/* gpio3a7_sel */
+#define UART5_RX_M1			5
+#define UART5_RX_M1_OFFSET		12
+#define UART5_RX_M1_ADDR		(GPIO3_IOC_BASE + 0x44)
+/* gpio3a6_sel */
+#define UART5_TX_M1			5
+#define UART5_TX_M1_OFFSET		8
+#define UART5_TX_M1_ADDR		(GPIO3_IOC_BASE + 0x44)
+
+/* UART6 iomux */
+/* gpio0c7_sel */
+#define UART6_RX_M0			1
+#define UART6_RX_M0_OFFSET		12
+#define UART6_RX_M0_ADDR		(GPIO0_IOC_BASE + 0x14)
+/* gpio0c6_sel */
+#define UART6_TX_M0			1
+#define UART6_TX_M0_OFFSET		8
+#define UART6_TX_M0_ADDR		(GPIO0_IOC_BASE + 0x14)
+
+/* gpio4b0_sel */
+#define UART6_RX_M1			6
+#define UART6_RX_M1_OFFSET		0
+#define UART6_RX_M1_ADDR		(GPIO4_IOC_BASE + 0x68)
+/* gpio4a7_sel */
+#define UART6_TX_M1			6
+#define UART6_TX_M1_OFFSET		12
+#define UART6_TX_M1_ADDR		(GPIO4_IOC_BASE + 0x64)
+
+/* UART7 iomux */
+/* gpio3c7_sel */
+#define UART7_RX_M0			4
+#define UART7_RX_M0_OFFSET		12
+#define UART7_RX_M0_ADDR		(GPIO3_IOC_BASE + 0x54)
+/* gpio3c4_sel */
+#define UART7_TX_M0			4
+#define UART7_TX_M0_OFFSET		0
+#define UART7_TX_M0_ADDR		(GPIO3_IOC_BASE + 0x54)
+
+/* gpio1b3_sel */
+#define UART7_RX_M1			3
+#define UART7_RX_M1_OFFSET		12
+#define UART7_RX_M1_ADDR		(GPIO1_IOC_BASE + 0x08)
+/* gpio1b4_sel */
+#define UART7_TX_M1			3
+#define UART7_TX_M1_OFFSET		0
+#define UART7_TX_M1_ADDR		(GPIO1_IOC_BASE + 0x0C)
+
+/* UART8 iomux */
+/* gpio3b3_sel */
+#define UART8_RX_M0			3
+#define UART8_RX_M0_OFFSET		12
+#define UART8_RX_M0_ADDR		(GPIO3_IOC_BASE + 0x48)
+/* gpio3b2_sel */
+#define UART8_TX_M0			3
+#define UART8_TX_M0_OFFSET		8
+#define UART8_TX_M0_ADDR		(GPIO3_IOC_BASE + 0x48)
+
+/* gpio3d5_sel */
+#define UART8_RX_M1			4
+#define UART8_RX_M1_OFFSET		4
+#define UART8_RX_M1_ADDR		(GPIO3_IOC_BASE + 0x5C)
+/* gpio3d4_sel */
+#define UART8_TX_M1			4
+#define UART8_TX_M1_OFFSET		0
+#define UART8_TX_M1_ADDR		(GPIO3_IOC_BASE + 0x5C)
+
+/* UART9 iomux */
+/* gpio4b3_sel */
+#define UART9_RX_M0			4
+#define UART9_RX_M0_OFFSET		12
+#define UART9_RX_M0_ADDR		(GPIO4_IOC_BASE + 0x68)
+/* gpio4b2_sel */
+#define UART9_TX_M0			4
+#define UART9_TX_M0_OFFSET		8
+#define UART9_TX_M0_ADDR		(GPIO4_IOC_BASE + 0x68)
+
+/* gpio3c3_sel */
+#define UART9_RX_M1			3
+#define UART9_RX_M1_OFFSET		12
+#define UART9_RX_M1_ADDR		(GPIO3_IOC_BASE + 0x50)
+/* gpio3c2_sel */
+#define UART9_TX_M1			3
+#define UART9_TX_M1_OFFSET		8
+#define UART9_TX_M1_ADDR		(GPIO3_IOC_BASE + 0x50)
+
+#define set_uart_iomux(bits_offset, bits_val, addr) \
+	writel(GENMASK(bits_offset + 19, bits_offset + 16) | (bits_val << bits_offset) , addr)
+
+#define set_uart_iomux_rx(ID, MODE) \
+	set_uart_iomux(UART##ID##_RX_M##MODE##_OFFSET, UART##ID##_RX_M##MODE, UART##ID##_RX_M##MODE##_ADDR);
+#define set_uart_iomux_tx(ID, MODE) \
+	set_uart_iomux(UART##ID##_TX_M##MODE##_OFFSET, UART##ID##_TX_M##MODE, UART##ID##_TX_M##MODE##_ADDR);
+
+void board_debug_uart_init(void)
+{
+/* UART 0 */
+#if defined(CONFIG_DEBUG_UART_BASE) && (CONFIG_DEBUG_UART_BASE == 0xff210000)
+
+#if defined(CONFIG_ROCKCHIP_UART_MUX_SEL_M) && \
+	(CONFIG_ROCKCHIP_UART_MUX_SEL_M == 0)
+
+	/* UART0_M0 Switch iomux */
+	set_uart_iomux_rx(0, 0);
+	set_uart_iomux_tx(0, 0);
+#elif defined(CONFIG_ROCKCHIP_UART_MUX_SEL_M) && \
+	(CONFIG_ROCKCHIP_UART_MUX_SEL_M == 1)
+
+	/* UART0_M1 Switch iomux */
+	set_uart_iomux_rx(0, 1);
+	set_uart_iomux_tx(0, 1);
+#endif
+/* UART 1 */
+#elif defined(CONFIG_DEBUG_UART_BASE) && (CONFIG_DEBUG_UART_BASE == 0xff670000)
+
+#if defined(CONFIG_ROCKCHIP_UART_MUX_SEL_M) && \
+	(CONFIG_ROCKCHIP_UART_MUX_SEL_M == 0)
+
+	/* UART1_M0 Switch iomux */
+	set_uart_iomux_rx(1, 0);
+	set_uart_iomux_tx(1, 0);
+#elif defined(CONFIG_ROCKCHIP_UART_MUX_SEL_M) && \
+	(CONFIG_ROCKCHIP_UART_MUX_SEL_M == 1)
+
+	/* UART1_M1 Switch iomux */
+	set_uart_iomux_rx(1, 1);
+	set_uart_iomux_tx(1, 1);
+#endif
+/* UART 2 */
+#elif defined(CONFIG_DEBUG_UART_BASE) && (CONFIG_DEBUG_UART_BASE == 0xff680000)
+
+#if defined(CONFIG_ROCKCHIP_UART_MUX_SEL_M) && \
+	(CONFIG_ROCKCHIP_UART_MUX_SEL_M == 0)
+
+	/* UART2_M0 Switch iomux */
+	set_uart_iomux_rx(2, 0);
+	set_uart_iomux_tx(2, 0);
+#elif defined(CONFIG_ROCKCHIP_UART_MUX_SEL_M) && \
+	(CONFIG_ROCKCHIP_UART_MUX_SEL_M == 1)
+
+	/* UART2_M1 Switch iomux */
+	set_uart_iomux_rx(2, 1);
+	set_uart_iomux_tx(2, 1);
+#endif
+/* UART 3 */
+#elif defined(CONFIG_DEBUG_UART_BASE) && (CONFIG_DEBUG_UART_BASE == 0xff690000)
+#if defined(CONFIG_ROCKCHIP_UART_MUX_SEL_M) && \
+	(CONFIG_ROCKCHIP_UART_MUX_SEL_M == 0)
+
+	/* UART3_M0 Switch iomux */
+	set_uart_iomux_rx(3, 0);
+	set_uart_iomux_tx(3, 0);
+#elif defined(CONFIG_ROCKCHIP_UART_MUX_SEL_M) && \
+	(CONFIG_ROCKCHIP_UART_MUX_SEL_M == 1)
+
+	/* UART3_M1 Switch iomux */
+	set_uart_iomux_rx(3, 1);
+	set_uart_iomux_tx(3, 1);
+#endif
+/* UART 4 */
+#elif defined(CONFIG_DEBUG_UART_BASE) && (CONFIG_DEBUG_UART_BASE == 0xff6a0000)
+#if defined(CONFIG_ROCKCHIP_UART_MUX_SEL_M) && \
+	(CONFIG_ROCKCHIP_UART_MUX_SEL_M == 0)
+
+	/* UART4_M0 Switch iomux */
+	set_uart_iomux_rx(4, 0);
+	set_uart_iomux_tx(4, 0);
+#elif defined(CONFIG_ROCKCHIP_UART_MUX_SEL_M) && \
+	(CONFIG_ROCKCHIP_UART_MUX_SEL_M == 1)
+
+	/* UART4_M1 Switch iomux */
+	set_uart_iomux_rx(4, 1);
+	set_uart_iomux_tx(4, 1);
+#endif
+/* UART 5 */
+#elif defined(CONFIG_DEBUG_UART_BASE) && (CONFIG_DEBUG_UART_BASE == 0xff6b0000)
+#if defined(CONFIG_ROCKCHIP_UART_MUX_SEL_M) && \
+	(CONFIG_ROCKCHIP_UART_MUX_SEL_M == 0)
+
+	/* UART5_M0 Switch iomux */
+	set_uart_iomux_rx(5, 0);
+	set_uart_iomux_tx(5, 0);
+#elif defined(CONFIG_ROCKCHIP_UART_MUX_SEL_M) && \
+	(CONFIG_ROCKCHIP_UART_MUX_SEL_M == 1)
+
+	/* UART5_M1 Switch iomux */
+	set_uart_iomux_rx(5, 1);
+	set_uart_iomux_tx(5, 1);
+#endif
+/* UART 6 */
+#elif defined(CONFIG_DEBUG_UART_BASE) && (CONFIG_DEBUG_UART_BASE == 0xff6c0000)
+#if defined(CONFIG_ROCKCHIP_UART_MUX_SEL_M) && \
+	(CONFIG_ROCKCHIP_UART_MUX_SEL_M == 0)
+
+	/* UART6_M0 Switch iomux */
+	set_uart_iomux_rx(6, 0);
+	set_uart_iomux_tx(6, 0);
+#elif defined(CONFIG_ROCKCHIP_UART_MUX_SEL_M) && \
+	(CONFIG_ROCKCHIP_UART_MUX_SEL_M == 1)
+
+	/* UART6_M1 Switch iomux */
+	set_uart_iomux_rx(6, 1);
+	set_uart_iomux_tx(6, 1);
+#endif
+/* UART 7 */
+#elif defined(CONFIG_DEBUG_UART_BASE) && (CONFIG_DEBUG_UART_BASE == 0xff6d0000)
+#if defined(CONFIG_ROCKCHIP_UART_MUX_SEL_M) && \
+	(CONFIG_ROCKCHIP_UART_MUX_SEL_M == 0)
+
+	/* UART7_M0 Switch iomux */
+	set_uart_iomux_rx(7, 0);
+	set_uart_iomux_tx(7, 0);
+#elif defined(CONFIG_ROCKCHIP_UART_MUX_SEL_M) && \
+	(CONFIG_ROCKCHIP_UART_MUX_SEL_M == 1)
+
+	/* UART7_M1 Switch iomux */
+	set_uart_iomux_rx(7, 1);
+	set_uart_iomux_tx(7, 1);
+#endif
+/* UART 8 */
+#elif defined(CONFIG_DEBUG_UART_BASE) && (CONFIG_DEBUG_UART_BASE == 0xff6e0000)
+#if defined(CONFIG_ROCKCHIP_UART_MUX_SEL_M) && \
+	(CONFIG_ROCKCHIP_UART_MUX_SEL_M == 0)
+
+	/* UART8_M0 Switch iomux */
+	set_uart_iomux_rx(8, 0);
+	set_uart_iomux_tx(8, 0);
+#elif defined(CONFIG_ROCKCHIP_UART_MUX_SEL_M) && \
+	(CONFIG_ROCKCHIP_UART_MUX_SEL_M == 1)
+
+	/* UART8_M1 Switch iomux */
+	set_uart_iomux_rx(8, 1);
+	set_uart_iomux_tx(8, 1);
+#endif
+/* UART 9 */
+#elif defined(CONFIG_DEBUG_UART_BASE) && (CONFIG_DEBUG_UART_BASE == 0xff6f0000)
+#if defined(CONFIG_ROCKCHIP_UART_MUX_SEL_M) && \
+	(CONFIG_ROCKCHIP_UART_MUX_SEL_M == 0)
+
+	/* UART9_M0 Switch iomux */
+	set_uart_iomux_rx(9, 0);
+	set_uart_iomux_tx(9, 0);
+#elif defined(CONFIG_ROCKCHIP_UART_MUX_SEL_M) && \
+	(CONFIG_ROCKCHIP_UART_MUX_SEL_M == 1)
+
+	/* UART9_M1 Switch iomux */
+	set_uart_iomux_rx(9, 1);
+	set_uart_iomux_tx(9, 1);
+#endif
+#endif
+}
+
+int fit_standalone_release(char *id, uintptr_t entry_point)
+{
+	/* bus m0 configuration: */
+	/* open hclk_dcache / hclk_icache / clk_bus m0 rtc / fclk_bus_m0_core */
+	writel(0x03180000, TOP_CRU_BASE + TOP_CRU_GATE_CON23);
+
+	/* open bus m0 sclk / bus m0 hclk / bus m0 dclk */
+	writel(0x00070000, TOP_CRU_BASE + TOP_CRU_CM0_GATEMASK);
+
+	/*
+	 * mcu_cache_peripheral_addr
+	 * The uncache area ranges from 0x7c00000 to 0xffb400000
+	 * and contains rpmsg shared memory
+	 */
+	writel(0x07c00000, SYS_GRF_BASE + SYS_GRF_SOC_CON5);
+	writel(0xffb40000, SYS_GRF_BASE + SYS_GRF_SOC_CON6);
+
+	sip_smc_mcu_config(ROCKCHIP_SIP_CONFIG_BUSMCU_0_ID,
+			   ROCKCHIP_SIP_CONFIG_MCU_CODE_START_ADDR,
+			   0xffff0000 | (entry_point >> 16));
+
+	/* release dcache / icache / bus m0 jtag / bus m0 */
+	writel(0x03280000, TOP_CRU_BASE + TOP_CRU_SOFTRST_CON23);
+
+	/* release pmu m0 jtag / pmu m0 */
+	/* writel(0x00050000, PMU1_CRU_BASE + PMU1_CRU_SOFTRST_CON02); */
+
+	return 0;
+}
+
+void board_set_iomux(enum if_type if_type, int devnum, int routing)
+{
+	switch (if_type) {
+	case IF_TYPE_MTD:
+		/* FSPI */
+		writel(0xffff2222, GPIO1_IOC_BASE + GPIO1A_IOMUX_SEL_L);
+		writel(0x00ff0022, GPIO1_IOC_BASE + GPIO1B_IOMUX_SEL_L);
+		break;
+	default:
+		printf("Bootdev 0x%x is not support\n", if_type);
+	}
+}
+
+#if defined(CONFIG_SPL_BUILD) && !defined(CONFIG_TPL_BUILD)
+static void qos_priority_init(void)
+{
+	u32 delay;
+	u32 i;
+
+	/* power up vo,vi */
+	rk_clrreg(PMU_BASE_ADDR + PMU2_PWR_GATE_SFTCON0,
+		  PD_VO_DWN_SFTENA | PD_VI_DWN_SFTENA);
+	delay = 1000;
+	do {
+		udelay(1);
+		delay--;
+		if (delay == 0) {
+			printf("Fail to set domain. PMU2_PWR_GATE_STS0=0x%x\n",
+			       readl(PMU_BASE_ADDR + PMU2_PWR_GATE_STS0));
+			hang();
+		}
+	} while (readl(PMU_BASE_ADDR + PMU2_PWR_GATE_STS0) &
+		 (PD_VO_DWN_SFTENA | PD_VI_DWN_SFTENA));
+	/* power up vop memory */
+	for (i = 0; i < 16; i++)
+		rk_clrreg(PMU_BASE_ADDR + PMU2_MEM_SD_SFTCON0, BIT(i));
+
+	/* release vo,vi,gpu idle request */
+	rk_clrreg(PMU_BASE_ADDR + PMU2_BIU_IDLE_SFTCON0,
+		  (IDLE_REQ_VO_SFTENA | IDLE_REQ_VI_SFTENA));
+
+	delay = 1000;
+	/* wait ack status */
+	do {
+		udelay(1);
+		delay--;
+		if (delay == 0) {
+			printf("Fail to get ack on domain. PMU2_BIU_IDLE_ACK_STS0=0x%x\n",
+			       readl(PMU_BASE_ADDR + PMU2_BIU_IDLE_ACK_STS0));
+			hang();
+		}
+	} while (readl(PMU_BASE_ADDR + PMU2_BIU_IDLE_ACK_STS0) &
+		 (IDLE_ACK_VO | IDLE_ACK_VI));
+
+	delay = 1000;
+	/* wait idle status */
+	do {
+		udelay(1);
+		delay--;
+		if (delay == 0) {
+			printf("Fail to set idle on domain. PMU2_BIT_IDLE_STS0=0x%x\n",
+			       readl(PMU_BASE_ADDR + PMU2_BIT_IDLE_STS0));
+			hang();
+		}
+	} while (readl(PMU_BASE_ADDR + PMU2_BIT_IDLE_STS0) &
+		 (IDLE_VO | IDLE_VI));
+
+	/*
+	 * modify default qos priority setting, then
+	 * Peri > VOP/ISP/VICAP > CPU > GPU/NPU/RKVDEC/RGA/Other
+	 * (5)    (4)             (3)   (2)
+	 *
+	 * NOTE: GPU qos init is in kernel, in case that vdd gpu is off now.
+	 */
+	writel(QOS_PRIORITY_LEVEL(5, 5), CRYPTO_PRIORITY_REG);
+	writel(QOS_PRIORITY_LEVEL(5, 5), DMAC_PRIORITY_REG);
+	writel(QOS_PRIORITY_LEVEL(5, 5), EMMC_PRIORITY_REG);
+	writel(QOS_PRIORITY_LEVEL(5, 5), FSPI_PRIORITY_REG);
+	writel(QOS_PRIORITY_LEVEL(5, 5), GMAC_PRIORITY_REG);
+	writel(QOS_PRIORITY_LEVEL(5, 5), MAC100_PRIORITY_REG);
+	writel(QOS_PRIORITY_LEVEL(5, 5), MCU_PRIORITY_REG);
+	writel(QOS_PRIORITY_LEVEL(5, 5), RKDMA_PRIORITY_REG);
+	writel(QOS_PRIORITY_LEVEL(5, 5), SDMMC0_PRIORITY_REG);
+	writel(QOS_PRIORITY_LEVEL(5, 5), SDMMC1_PRIORITY_REG);
+	writel(QOS_PRIORITY_LEVEL(5, 5), USB2_PRIORITY_REG);
+	writel(QOS_PRIORITY_LEVEL(5, 5), USB3_PRIORITY_REG);
+	writel(QOS_PRIORITY_LEVEL(4, 4), ISP_PRIORITY_REG);
+	writel(QOS_PRIORITY_LEVEL(4, 4), VICAP_PRIORITY_REG);
+	writel(QOS_PRIORITY_LEVEL(4, 4), VOP_PRIORITY_REG);
+	writel(QOS_PRIORITY_LEVEL(2, 2), DCF_PRIORITY_REG);
+	writel(QOS_PRIORITY_LEVEL(2, 2), DMA2DDR_PRIORITY_REG);
+	writel(QOS_PRIORITY_LEVEL(2, 2), PCIE_PRIORITY_REG);
+
+	writel(0x5, PCIE_SHAPING_REG);
+}
+#endif
+
+int arch_cpu_init(void)
+{
+#if defined(CONFIG_SPL_BUILD) || defined(CONFIG_SUPPORT_USBPLUG)
+	u32 val;
+
+	/* Set the emmc to access ddr memory */
+	val = readl(FIREWALL_DDR_BASE + FW_DDR_MST4_REG);
+	writel(val & 0x0000ffff, FIREWALL_DDR_BASE + FW_DDR_MST4_REG);
+
+	/* Set the sdmmc to access ddr memory */
+	val = readl(FIREWALL_DDR_BASE + FW_DDR_MST6_REG);
+	writel(val & 0xff0000ff, FIREWALL_DDR_BASE + FW_DDR_MST6_REG);
+
+	/*
+	 * Set SAIx_MCLK as input default
+	 *
+	 * It's safe to set mclk as input default to avoid high freq glitch
+	 * which may make devices work unexpected. And then enabled by
+	 * kernel stage or any state where user use it.
+	 */
+	writel(0x0a100000, PERI_GRF_BASE + PERI_GRF_AUDIO_CON);
+
+	/* Assert reset the pipe phy to save power and de-assert when in use */
+	writel(0x00030001, PIPEPHY_GRF_BASE + PIPEPHY_PIPE_CON5);
+
+#if defined(CONFIG_SUPPORT_USBPLUG)
+	/* Set emmc iomux */
+	writel(0xffff1111, GPIO1_IOC_BASE + GPIO1A_IOMUX_SEL_L);
+	writel(0xffff1111, GPIO1_IOC_BASE + GPIO1A_IOMUX_SEL_H);
+	writel(0xffff1111, GPIO1_IOC_BASE + GPIO1B_IOMUX_SEL_L);
+#endif
+
+#if defined(CONFIG_ROCKCHIP_SFC)
+	/* Set the fspi to access ddr memory */
+	val = readl(FIREWALL_DDR_BASE + FW_DDR_MST5_REG);
+	writel(val & 0x00ffffff, FIREWALL_DDR_BASE + FW_DDR_MST5_REG);
+
+	/*
+	 * Fix fspi io ds level:
+	 *
+	 * level 2 for 1V8
+	 * level 3 for 3V3
+	 */
+	if (readl(GPIO1_IOC_BASE + GPIO1A_IOMUX_SEL_L) == 0x2222) {
+		if (readl(GPIO2_IOC_BASE + GPIO2_IOC_IO_VSEL0) & POC_VCCIO2_VD_3V3) {
+			writel(0x3f3f0f0f, GPIO1_IOC_BASE + GPIO1_IOC_GPIO1A_DS0);
+			writel(0x3f3f0f0f, GPIO1_IOC_BASE + GPIO1_IOC_GPIO1A_DS1);
+			writel(0x3f3f0f0f, GPIO1_IOC_BASE + GPIO1_IOC_GPIO1B_DS0);
+		} else {
+			writel(0x3f3f0707, GPIO1_IOC_BASE + GPIO1_IOC_GPIO1A_DS0);
+			writel(0x3f3f0707, GPIO1_IOC_BASE + GPIO1_IOC_GPIO1A_DS1);
+			writel(0x3f3f0707, GPIO1_IOC_BASE + GPIO1_IOC_GPIO1B_DS0);
+		}
+	}
+#endif
+
+#if !defined(CONFIG_TPL_BUILD) && !defined(CONFIG_SUPPORT_USBPLUG)
+	qos_priority_init();
+#endif
+#endif /* #if defined(CONFIG_SPL_BUILD) || defined(CONFIG_SUPPORT_USBPLUG) */
+
+	return 0;
+}
diff --git a/arch/arm/mach-rockchip/rk3562/syscon_rk3562.c b/arch/arm/mach-rockchip/rk3562/syscon_rk3562.c
new file mode 100644
index 00000000000..2cfdb6f5cb4
--- /dev/null
+++ b/arch/arm/mach-rockchip/rk3562/syscon_rk3562.c
@@ -0,0 +1,25 @@
+/*
+ * (C) Copyright 2022 Rockchip Electronics Co., Ltd
+ *
+ * SPDX-License-Identifier:     GPL-2.0+
+ */
+
+#include <dm.h>
+#include <syscon.h>
+#include <asm/arch-rockchip/clock.h>
+
+static const struct udevice_id rk3562_syscon_ids[] = {
+	{ .compatible = "rockchip,rk3562-sys-grf", .data = ROCKCHIP_SYSCON_GRF },
+	{ .compatible = "rockchip,rk3562-pmu-grf", .data = ROCKCHIP_SYSCON_PMUGRF },
+	{ .compatible = "rockchip,rk3562-ioc-grf", .data = ROCKCHIP_SYSCON_IOC },
+	{ }
+};
+
+U_BOOT_DRIVER(syscon_rk3562) = {
+	.name = "rk3562_syscon",
+	.id = UCLASS_SYSCON,
+	.of_match = rk3562_syscon_ids,
+#if !CONFIG_IS_ENABLED(OF_PLATDATA)
+	.bind = dm_scan_fdt_dev,
+#endif
+};
diff --git a/arch/arm/mach-rockchip/sdram.c b/arch/arm/mach-rockchip/sdram.c
index f7d32829295..c7c425a12a2 100644
--- a/arch/arm/mach-rockchip/sdram.c
+++ b/arch/arm/mach-rockchip/sdram.c
@@ -110,7 +110,8 @@ static int rockchip_dram_init_banksize(void)
 	u8 i, j;
 
 	if (!IS_ENABLED(CONFIG_ROCKCHIP_RK3588) &&
-	    !IS_ENABLED(CONFIG_ROCKCHIP_RK3568))
+	    !IS_ENABLED(CONFIG_ROCKCHIP_RK3568) &&
+	    !IS_ENABLED(CONFIG_ROCKCHIP_RK3562))
 		return -ENOTSUPP;
 
 	if (!IS_ENABLED(CONFIG_ROCKCHIP_EXTERNAL_TPL))
diff --git a/board/geekpi/geekpi-1-rk3562/Kconfig b/board/geekpi/geekpi-1-rk3562/Kconfig
new file mode 100644
index 00000000000..9c8530e3533
--- /dev/null
+++ b/board/geekpi/geekpi-1-rk3562/Kconfig
@@ -0,0 +1,16 @@
+if TARGET_GEEKPI_1_RK3562
+
+config SYS_BOARD
+        default "geekpi-1-rk3562"
+
+config SYS_VENDOR
+        default "geekpi"
+
+config SYS_CONFIG_NAME
+        default "geekpi-1-rk3562"
+
+config BOARD_SPECIFIC_OPTIONS # dummy
+        def_bool y
+
+endif
+
diff --git a/board/geekpi/geekpi-1-rk3562/Makefile b/board/geekpi/geekpi-1-rk3562/Makefile
new file mode 100644
index 00000000000..99de34e7dcf
--- /dev/null
+++ b/board/geekpi/geekpi-1-rk3562/Makefile
@@ -0,0 +1 @@
+obj-y += geekpi-1-rk3562.o
diff --git a/board/geekpi/geekpi-1-rk3562/geekpi-1-rk3562.c b/board/geekpi/geekpi-1-rk3562/geekpi-1-rk3562.c
new file mode 100644
index 00000000000..e69de29bb2d
diff --git a/board/rockchip/evb_rk3562/Kconfig b/board/rockchip/evb_rk3562/Kconfig
new file mode 100644
index 00000000000..810e563e3f7
--- /dev/null
+++ b/board/rockchip/evb_rk3562/Kconfig
@@ -0,0 +1,15 @@
+if TARGET_EVB_RK3562
+
+config SYS_BOARD
+	default "evb_rk3562"
+
+config SYS_VENDOR
+	default "rockchip"
+
+config SYS_CONFIG_NAME
+	default "evb_rk3562"
+
+config BOARD_SPECIFIC_OPTIONS # dummy
+	def_bool y
+
+endif
diff --git a/board/rockchip/evb_rk3562/Makefile b/board/rockchip/evb_rk3562/Makefile
new file mode 100644
index 00000000000..5b6aff0e694
--- /dev/null
+++ b/board/rockchip/evb_rk3562/Makefile
@@ -0,0 +1,7 @@
+#
+# SPDX-License-Identifier:	GPL-2.0+
+#
+# Copyright (c) 2022 Rockchip Electronics Co., Ltd
+#
+
+obj-y	+= evb_rk3562.o
diff --git a/board/rockchip/evb_rk3562/evb_rk3562.c b/board/rockchip/evb_rk3562/evb_rk3562.c
new file mode 100644
index 00000000000..beac4a4649c
--- /dev/null
+++ b/board/rockchip/evb_rk3562/evb_rk3562.c
@@ -0,0 +1,32 @@
+/*
+ * SPDX-License-Identifier:     GPL-2.0+
+ *
+ * (C) Copyright 2022 Rockchip Electronics Co., Ltd
+ */
+
+#include <dwc3-uboot.h>
+#include <usb.h>
+#include <linux/usb/gadget.h>
+
+DECLARE_GLOBAL_DATA_PTR;
+
+#ifdef CONFIG_USB_DWC3
+static struct dwc3_device dwc3_device_data = {
+	.maximum_speed = USB_SPEED_HIGH,
+	.base = 0xfe500000,
+	.dr_mode = USB_DR_MODE_PERIPHERAL,
+	.index = 0,
+	.dis_u2_susphy_quirk = 1,
+};
+
+int usb_gadget_handle_interrupts(void)
+{
+	dm_usb_gadget_handle_interrupts(0);
+	return 0;
+}
+
+int board_usb_init(int index, enum usb_init_type init)
+{
+	return dwc3_uboot_init(&dwc3_device_data);
+}
+#endif
diff --git a/configs/geekpi-1-rk3562_defconfig b/configs/geekpi-1-rk3562_defconfig
new file mode 100644
index 00000000000..c490fe9fb61
--- /dev/null
+++ b/configs/geekpi-1-rk3562_defconfig
@@ -0,0 +1,108 @@
+CONFIG_ARM=y
+CONFIG_SKIP_LOWLEVEL_INIT=y
+CONFIG_COUNTER_FREQUENCY=24000000
+CONFIG_ARCH_ROCKCHIP=y
+CONFIG_DEFAULT_DEVICE_TREE="rockchip/rk3562-geekpi-1"
+CONFIG_ROCKCHIP_RK3562=y
+CONFIG_TARGET_GEEKPI_1_RK3562=y
+CONFIG_SPL_SERIAL=y
+CONFIG_SYS_LOAD_ADDR=0x00c00800
+CONFIG_DEBUG_UART_BASE=0xff210000
+CONFIG_DEBUG_UART_CLOCK=24000000
+CONFIG_DEBUG_UART=y
+CONFIG_EFI_VAR_BUF_SIZE=16384
+CONFIG_FIT=y
+CONFIG_FIT_VERBOSE=y
+CONFIG_SPL_FIT_SIGNATURE=y
+CONFIG_SPL_LOAD_FIT=y
+CONFIG_LEGACY_IMAGE_FORMAT=y
+CONFIG_DEFAULT_FDT_FILE="rockchip/rk3562-geekpi-1.dtb"
+CONFIG_DISPLAY_BOARDINFO_LATE=y
+CONFIG_SPL_MAX_SIZE=0x00040000
+CONFIG_SPL_PAD_TO=0x7f8000
+CONFIG_SPL_ATF=y
+CONFIG_CMD_GPIO=y
+CONFIG_CMD_GPT=y
+CONFIG_CMD_I2C=y
+CONFIG_CMD_MMC=y
+CONFIG_CMD_USB=y
+CONFIG_CMD_PMIC=y
+CONFIG_CMD_REGULATOR=y
+CONFIG_SPL_OF_CONTROL=y
+CONFIG_OF_LIVE=y
+CONFIG_OF_SPL_REMOVE_PROPS="clock-names interrupt-parent assigned-clocks assigned-clock-rates assigned-clock-parents"
+CONFIG_SPL_DM_SEQ_ALIAS=y
+CONFIG_SPL_REGMAP=y
+CONFIG_SPL_SYSCON=y
+CONFIG_SPL_CLK=y
+CONFIG_ROCKCHIP_GPIO=y
+CONFIG_SYS_I2C_ROCKCHIP=y
+CONFIG_MISC=y
+CONFIG_SUPPORT_EMMC_RPMB=y
+CONFIG_MMC_DW=y
+CONFIG_MMC_DW_ROCKCHIP=y
+CONFIG_MMC_SDHCI=y
+CONFIG_MMC_SDHCI_SDMA=y
+CONFIG_MMC_SDHCI_ROCKCHIP=y
+#CONFIG_PHY_REALTEK=y
+CONFIG_DWC_ETH_QOS=y
+CONFIG_DWC_ETH_QOS_ROCKCHIP=y
+CONFIG_PHY_ROCKCHIP_INNO_USB2=y
+CONFIG_PHY_ROCKCHIP_NANENG_COMBOPHY=y
+CONFIG_SPL_PINCTRL=y
+CONFIG_DM_PMIC=y
+CONFIG_PMIC_RK8XX=y
+CONFIG_REGULATOR_RK8XX=y
+CONFIG_PWM_ROCKCHIP=y
+CONFIG_SPL_RAM=y
+CONFIG_BAUDRATE=1500000
+CONFIG_DEBUG_UART_SHIFT=2
+CONFIG_SYS_NS16550_MEM32=y
+CONFIG_SYSRESET=y
+CONFIG_USB=y
+CONFIG_USB_XHCI_HCD=y
+CONFIG_USB_EHCI_HCD=y
+CONFIG_USB_EHCI_GENERIC=y
+CONFIG_USB_OHCI_HCD=y
+CONFIG_USB_OHCI_GENERIC=y
+CONFIG_USB_DWC3=y
+CONFIG_USB_DWC3_GENERIC=y
+CONFIG_ERRNO_STR=y
+CONFIG_ROCKCHIP_EXTERNAL_TPL=y
+CONFIG_SYS_CONSOLE_INFO_QUIET=y
+CONFIG_DEBUG_UART_BOARD_INIT=y
+#CONFIG_GMAC_ROCKCHIP=y
+CONFIG_DM_ETH=y
+CONFIG_DM_KEY=y
+CONFIG_RK8XX_PWRKEY=y
+CONFIG_ADC_KEY=y
+CONFIG_DM_ETH_PHY=y
+CONFIG_DM_REGULATOR_FIXED=y
+CONFIG_DM_REGULATOR_GPIO=y
+CONFIG_DM_CHARGE_DISPLAY=y
+CONFIG_CHARGE_ANIMATION=y
+CONFIG_USB_XHCI_DWC3=y
+CONFIG_USB_STORAGE=y
+CONFIG_CMD_USB_MASS_STORAGE=y
+CONFIG_PHY=y
+CONFIG_PHYLIB=y
+CONFIG_NR_DRAM_BANKS=1
+CONFIG_DM_MDIO=y
+CONFIG_DM_MDIO_MUX=y
+CONFIG_PHY_FIXED=y
+CONFIG_MII=y
+CONFIG_CMD_BOOTZ=y
+CONFIG_CMD_DTIMG=y
+CONFIG_LOGLEVEL=7
+CONFIG_CLK_SCMI=y
+CONFIG_CLK=y
+CONFIG_SCMI_FIRMWARE=y
+CONFIG_SPL_DM_RESET=y
+#CONFIG_DM_DEBUG=y
+CONFIG_USB_DWC2=y
+CONFIG_BOOTDELAY=1
+CONFIG_DM_THERMAL=y
+CONFIG_ROCKCHIP_THERMAL=y
+CONFIG_POWER_DOMAIN=y
+CONFIG_BOOTEFI_HELLO_COMPILE=n
+CONFIG_BOOTEFI_TESTAPP_COMPILE=n
diff --git a/drivers/adc/rockchip-saradc.c b/drivers/adc/rockchip-saradc.c
index 7cf9735f60d..33271674ff1 100644
--- a/drivers/adc/rockchip-saradc.c
+++ b/drivers/adc/rockchip-saradc.c
@@ -347,6 +347,14 @@ static const struct rockchip_saradc_data rk3588_saradc_data = {
 	.start_channel = rockchip_saradc_start_channel_v2,
 };
 
+static const struct rockchip_saradc_data rk3562_saradc_data = {
+        .num_bits = 10,
+        .num_channels = 2,
+        .clk_rate = 1000000,
+        .channel_data = rockchip_saradc_channel_data_v2,
+        .start_channel = rockchip_saradc_start_channel_v2,
+};
+
 static const struct udevice_id rockchip_saradc_ids[] = {
 	{ .compatible = "rockchip,saradc",
 	  .data = (ulong)&saradc_data },
@@ -354,6 +362,8 @@ static const struct udevice_id rockchip_saradc_ids[] = {
 	  .data = (ulong)&rk3066_tsadc_data },
 	{ .compatible = "rockchip,rk3399-saradc",
 	  .data = (ulong)&rk3399_saradc_data },
+	{ .compatible = "rockchip,rk3562-saradc",
+          .data = (ulong)&rk3562_saradc_data },
 	{ .compatible = "rockchip,rk3588-saradc",
 	  .data = (ulong)&rk3588_saradc_data },
 	{ }
diff --git a/drivers/clk/rockchip/Makefile b/drivers/clk/rockchip/Makefile
index 9e379cc2e3b..643aef1dd04 100644
--- a/drivers/clk/rockchip/Makefile
+++ b/drivers/clk/rockchip/Makefile
@@ -13,6 +13,7 @@ obj-$(CONFIG_ROCKCHIP_RK322X) += clk_rk322x.o
 obj-$(CONFIG_ROCKCHIP_RK3288) += clk_rk3288.o
 obj-$(CONFIG_ROCKCHIP_RK3308) += clk_rk3308.o
 obj-$(CONFIG_ROCKCHIP_RK3328) += clk_rk3328.o
+obj-$(CONFIG_ROCKCHIP_RK3562) += clk_rk3562.o
 obj-$(CONFIG_ROCKCHIP_RK3368) += clk_rk3368.o
 obj-$(CONFIG_ROCKCHIP_RK3399) += clk_rk3399.o
 obj-$(CONFIG_ROCKCHIP_RK3568) += clk_rk3568.o
diff --git a/drivers/clk/rockchip/clk_rk3562.c b/drivers/clk/rockchip/clk_rk3562.c
new file mode 100644
index 00000000000..e54d84dbbf0
--- /dev/null
+++ b/drivers/clk/rockchip/clk_rk3562.c
@@ -0,0 +1,1934 @@
+// SPDX-License-Identifier: GPL-2.0
+/*
+ * Copyright (c) 2022 Rockchip Electronics Co., Ltd
+ * Author: Finley Xiao <finley.xiao@rock-chips.com>
+ */
+
+#include <clk-uclass.h>
+#include <dm.h>
+#include <errno.h>
+#include <syscon.h>
+#include <asm/arch-rockchip/clock.h>
+#include <asm/arch-rockchip/cru_rk3562.h>
+#include <asm/arch-rockchip/hardware.h>
+#include <asm/io.h>
+#include <dm/device-internal.h>
+#include <dm/lists.h>
+#include <dt-bindings/clock/rk3562-cru.h>
+
+DECLARE_GLOBAL_DATA_PTR;
+
+#define DIV_TO_RATE(input_rate, div)    ((input_rate) / ((div) + 1))
+
+static struct rockchip_pll_rate_table rk3562_pll_rates[] = {
+	/* _mhz, _refdiv, _fbdiv, _postdiv1, _postdiv2, _dsmpd, _frac */
+	RK3036_PLL_RATE(1608000000, 1, 67, 1, 1, 1, 0),
+	RK3036_PLL_RATE(1416000000, 1, 118, 2, 1, 1, 0),
+	RK3036_PLL_RATE(1296000000, 1, 108, 2, 1, 1, 0),
+	RK3036_PLL_RATE(1200000000, 1, 100, 2, 1, 1, 0),
+	RK3036_PLL_RATE(1188000000, 1, 99, 2, 1, 1, 0),
+	RK3036_PLL_RATE(1104000000, 1, 92, 2, 1, 1, 0),
+	RK3036_PLL_RATE(1008000000, 1, 84, 2, 1, 1, 0),
+	RK3036_PLL_RATE(1000000000, 3, 250, 2, 1, 1, 0),
+	RK3036_PLL_RATE(912000000, 1, 76, 2, 1, 1, 0),
+	RK3036_PLL_RATE(816000000, 1, 68, 2, 1, 1, 0),
+	RK3036_PLL_RATE(705600000, 2, 235, 4, 1, 0, 3355443),
+	RK3036_PLL_RATE(611520000, 4, 611, 6, 1, 0, 8724152),
+	RK3036_PLL_RATE(600000000, 1, 100, 4, 1, 1, 0),
+	RK3036_PLL_RATE(594000000, 1, 99, 4, 1, 1, 0),
+	RK3036_PLL_RATE(500000000, 1, 125, 6, 1, 1, 0),
+	RK3036_PLL_RATE(408000000, 1, 68, 2, 2, 1, 0),
+	RK3036_PLL_RATE(312000000, 1, 78, 6, 1, 1, 0),
+	RK3036_PLL_RATE(216000000, 1, 72, 4, 2, 1, 0),
+	RK3036_PLL_RATE(96000000, 1, 96, 6, 4, 1, 0),
+	{ /* sentinel */ },
+};
+
+static struct rockchip_pll_clock rk3562_pll_clks[] = {
+	[APLL] = PLL(pll_rk3328, PLL_APLL, RK3562_PLL_CON(0),
+		     RK3562_MODE_CON, 0, 10, 0, rk3562_pll_rates),
+	[GPLL] = PLL(pll_rk3328, PLL_GPLL, RK3562_PLL_CON(24),
+		     RK3562_MODE_CON, 2, 10, 0, rk3562_pll_rates),
+	[VPLL] = PLL(pll_rk3328, PLL_VPLL, RK3562_PLL_CON(32),
+		     RK3562_MODE_CON, 6, 10, 0, rk3562_pll_rates),
+	[HPLL] = PLL(pll_rk3328, PLL_HPLL, RK3562_PLL_CON(40),
+		     RK3562_MODE_CON, 8, 10, 0, rk3562_pll_rates),
+	[CPLL] = PLL(pll_rk3328, PLL_CPLL, RK3562_PMU1_PLL_CON(0),
+		     RK3562_PMU1_MODE_CON, 0, 10, 0, rk3562_pll_rates),
+	[DPLL] = PLL(pll_rk3328, PLL_DPLL, RK3562_SUBDDR_PLL_CON(0),
+		     RK3562_SUBDDR_MODE_CON, 0, 10, 0, NULL),
+};
+
+#define RK3562_CPUCLK_RATE(_rate, _aclk_m_core, _pclk_dbg)	\
+{								\
+	.rate = _rate##U,					\
+	.aclk_div = _aclk_m_core,				\
+	.pclk_div = _pclk_dbg,					\
+}
+
+static struct rockchip_cpu_rate_table rk3562_cpu_rates[] = {
+	RK3562_CPUCLK_RATE(1416000000, 1, 8),
+	RK3562_CPUCLK_RATE(1296000000, 1, 8),
+	RK3562_CPUCLK_RATE(1200000000, 1, 8),
+	RK3562_CPUCLK_RATE(1104000000, 1, 8),
+	RK3562_CPUCLK_RATE(1008000000, 1, 8),
+	RK3562_CPUCLK_RATE(912000000, 1, 6),
+	RK3562_CPUCLK_RATE(816000000, 1, 6),
+	RK3562_CPUCLK_RATE(600000000, 1, 6),
+	RK3562_CPUCLK_RATE(408000000, 1, 4),
+	{ /* sentinel */ },
+};
+
+/*
+ *
+ * rational_best_approximation(31415, 10000,
+ *		(1 << 8) - 1, (1 << 5) - 1, &n, &d);
+ *
+ * you may look at given_numerator as a fixed point number,
+ * with the fractional part size described in given_denominator.
+ *
+ * for theoretical background, see:
+ * http://en.wikipedia.org/wiki/Continued_fraction
+ */
+static void rational_best_approximation(unsigned long given_numerator,
+					unsigned long given_denominator,
+					unsigned long max_numerator,
+					unsigned long max_denominator,
+					unsigned long *best_numerator,
+					unsigned long *best_denominator)
+{
+	unsigned long n, d, n0, d0, n1, d1;
+
+	n = given_numerator;
+	d = given_denominator;
+	n0 = 0;
+	d1 = 0;
+	n1 = 1;
+	d0 = 1;
+	for (;;) {
+		unsigned long t, a;
+
+		if (n1 > max_numerator || d1 > max_denominator) {
+			n1 = n0;
+			d1 = d0;
+			break;
+		}
+		if (d == 0)
+			break;
+		t = d;
+		a = n / d;
+		d = n % d;
+		n = t;
+		t = n0 + a * n1;
+		n0 = n1;
+		n1 = t;
+		t = d0 + a * d1;
+		d0 = d1;
+		d1 = t;
+	}
+	*best_numerator = n1;
+	*best_denominator = d1;
+}
+
+static int rk3562_armclk_set_rate(struct rk3562_clk_priv *priv, ulong new_rate)
+{
+	const struct rockchip_cpu_rate_table *rate;
+	struct rk3562_cru *cru = priv->cru;
+	ulong old_rate;
+
+	rate = rockchip_get_cpu_settings(rk3562_cpu_rates, new_rate);
+	if (!rate) {
+		printf("%s unsupported rate\n", __func__);
+		return -EINVAL;
+	}
+
+	/*
+	 * set up dependent divisors for DBG and ACLK clocks.
+	 */
+	old_rate = rockchip_pll_get_rate(&rk3562_pll_clks[APLL], priv->cru,
+					 APLL);
+	if (old_rate == new_rate) {
+		rk_clrsetreg(&cru->clksel_con[11], ACLK_CORE_PRE_DIV_MASK,
+			     rate->aclk_div << ACLK_CORE_PRE_DIV_SHIFT);
+		rk_clrsetreg(&cru->clksel_con[12], PCLK_DBG_PRE_DIV_MASK,
+			     rate->pclk_div << PCLK_DBG_PRE_DIV_SHIFT);
+		rk_clrsetreg(&cru->clksel_con[10], CLK_CORE_PRE_DIV_MASK, 0);
+	} else if (old_rate > new_rate) {
+		if (rockchip_pll_set_rate(&rk3562_pll_clks[APLL],
+					  priv->cru, APLL, new_rate))
+			return -EINVAL;
+		rk_clrsetreg(&cru->clksel_con[11], ACLK_CORE_PRE_DIV_MASK,
+			     rate->aclk_div << ACLK_CORE_PRE_DIV_SHIFT);
+		rk_clrsetreg(&cru->clksel_con[12], PCLK_DBG_PRE_DIV_MASK,
+			     rate->pclk_div << PCLK_DBG_PRE_DIV_SHIFT);
+		rk_clrsetreg(&cru->clksel_con[10], CLK_CORE_PRE_DIV_MASK, 0);
+	} else if (old_rate < new_rate) {
+		rk_clrsetreg(&cru->clksel_con[11], ACLK_CORE_PRE_DIV_MASK,
+			     rate->aclk_div << ACLK_CORE_PRE_DIV_SHIFT);
+		rk_clrsetreg(&cru->clksel_con[12], PCLK_DBG_PRE_DIV_MASK,
+			     rate->pclk_div << PCLK_DBG_PRE_DIV_SHIFT);
+		rk_clrsetreg(&cru->clksel_con[10], CLK_CORE_PRE_DIV_MASK, 0);
+
+		if (rockchip_pll_set_rate(&rk3562_pll_clks[APLL],
+					  priv->cru, APLL, new_rate))
+			return -EINVAL;
+	}
+
+	return 0;
+}
+
+static ulong rk3562_bus_get_rate(struct rk3562_clk_priv *priv, ulong clk_id)
+{
+	struct rk3562_cru *cru = priv->cru;
+	u32 sel, con, div;
+	ulong rate;
+
+	switch (clk_id) {
+	case ACLK_BUS:
+		con = readl(&cru->clksel_con[40]);
+		sel = (con & ACLK_BUS_SEL_MASK) >> ACLK_BUS_SEL_SHIFT;
+		div = (con & ACLK_BUS_DIV_MASK) >> ACLK_BUS_DIV_SHIFT;
+		break;
+	case HCLK_BUS:
+		con = readl(&cru->clksel_con[40]);
+		sel = (con & HCLK_BUS_SEL_MASK) >> HCLK_BUS_SEL_SHIFT;
+		div = (con & HCLK_BUS_DIV_MASK) >> HCLK_BUS_DIV_SHIFT;
+		break;
+	case PCLK_BUS:
+		con = readl(&cru->clksel_con[41]);
+		sel = (con & PCLK_BUS_SEL_MASK) >> PCLK_BUS_SEL_SHIFT;
+		div = (con & PCLK_BUS_DIV_MASK) >> PCLK_BUS_DIV_SHIFT;
+		break;
+	default:
+		return -ENOENT;
+	}
+
+	if (sel == ACLK_BUS_SEL_CPLL)
+		rate = priv->cpll_hz;
+	else
+		rate = priv->gpll_hz;
+
+	return DIV_TO_RATE(rate, div);
+}
+
+static ulong rk3562_bus_set_rate(struct rk3562_clk_priv *priv, ulong clk_id,
+				 ulong rate)
+{
+	struct rk3562_cru *cru = priv->cru;
+	u32 sel, div;
+
+	if (priv->cpll_hz % rate == 0) {
+		sel = ACLK_BUS_SEL_CPLL;
+		div = DIV_ROUND_UP(priv->cpll_hz, rate);
+	} else {
+		sel= ACLK_BUS_SEL_GPLL;
+		div = DIV_ROUND_UP(priv->gpll_hz, rate);
+	}
+
+	switch (clk_id) {
+	case ACLK_BUS:
+		rk_clrsetreg(&cru->clksel_con[40],
+			     ACLK_BUS_SEL_MASK | ACLK_BUS_DIV_MASK,
+			     (sel << ACLK_BUS_SEL_SHIFT) |
+			     ((div - 1) << ACLK_BUS_DIV_SHIFT));
+		break;
+	case HCLK_BUS:
+		rk_clrsetreg(&cru->clksel_con[40],
+			     HCLK_BUS_SEL_MASK | HCLK_BUS_DIV_MASK,
+			     (sel << HCLK_BUS_SEL_SHIFT) |
+			     ((div - 1) << HCLK_BUS_DIV_SHIFT));
+		break;
+	case PCLK_BUS:
+		rk_clrsetreg(&cru->clksel_con[41],
+			     PCLK_BUS_SEL_MASK | PCLK_BUS_DIV_MASK,
+			     (sel << PCLK_BUS_SEL_SHIFT) |
+			     ((div - 1) << PCLK_BUS_DIV_SHIFT));
+		break;
+	default:
+		return -ENOENT;
+	}
+
+	return rk3562_bus_get_rate(priv, clk_id);
+}
+
+static ulong rk3562_peri_get_rate(struct rk3562_clk_priv *priv, ulong clk_id)
+{
+	struct rk3562_cru *cru = priv->cru;
+	u32 sel, con, div;
+	ulong rate;
+
+	switch (clk_id) {
+	case ACLK_PERI:
+		con = readl(&cru->periclksel_con[0]);
+		sel = (con & ACLK_PERI_SEL_MASK) >> ACLK_PERI_SEL_SHIFT;
+		div = (con & ACLK_PERI_DIV_MASK) >> ACLK_PERI_DIV_SHIFT;
+		break;
+	case HCLK_PERI:
+		con = readl(&cru->periclksel_con[0]);
+		sel = (con & HCLK_PERI_SEL_MASK) >> HCLK_PERI_SEL_SHIFT;
+		div = (con & HCLK_PERI_DIV_MASK) >> HCLK_PERI_DIV_SHIFT;
+		break;
+	case PCLK_PERI:
+		con = readl(&cru->periclksel_con[1]);
+		sel = (con & PCLK_PERI_SEL_MASK) >> PCLK_PERI_SEL_SHIFT;
+		div = (con & PCLK_PERI_DIV_MASK) >> PCLK_PERI_DIV_SHIFT;
+		break;
+	default:
+		return -ENOENT;
+	}
+
+	if (sel == ACLK_PERI_SEL_CPLL)
+		rate = priv->cpll_hz;
+	else
+		rate = priv->gpll_hz;
+
+	return DIV_TO_RATE(rate, div);
+}
+
+static ulong rk3562_peri_set_rate(struct rk3562_clk_priv *priv, ulong clk_id,
+				  ulong rate)
+{
+	struct rk3562_cru *cru = priv->cru;
+	u32 sel, div;
+
+	if (priv->cpll_hz % rate == 0) {
+		sel = ACLK_PERI_SEL_CPLL;
+		div = DIV_ROUND_UP(priv->cpll_hz, rate);
+	} else {
+		sel= ACLK_PERI_SEL_GPLL;
+		div = DIV_ROUND_UP(priv->gpll_hz, rate);
+	}
+
+	switch (clk_id) {
+	case ACLK_PERI:
+		rk_clrsetreg(&cru->periclksel_con[0],
+			     ACLK_PERI_SEL_MASK | ACLK_PERI_DIV_MASK,
+			     (sel << ACLK_PERI_SEL_SHIFT) |
+			     ((div - 1) << ACLK_PERI_DIV_SHIFT));
+		break;
+	case HCLK_PERI:
+		rk_clrsetreg(&cru->periclksel_con[0],
+			     HCLK_PERI_SEL_MASK | HCLK_PERI_DIV_MASK,
+			     (sel << HCLK_PERI_SEL_SHIFT) |
+			     ((div - 1) << HCLK_PERI_DIV_SHIFT));
+		break;
+	case PCLK_PERI:
+		rk_clrsetreg(&cru->periclksel_con[1],
+			     PCLK_PERI_SEL_MASK | PCLK_PERI_DIV_MASK,
+			     (sel << PCLK_PERI_SEL_SHIFT) |
+			     ((div - 1) << PCLK_PERI_DIV_SHIFT));
+		break;
+	default:
+		return -ENOENT;
+	}
+
+	return rk3562_peri_get_rate(priv, clk_id);
+}
+
+static ulong rk3562_i2c_get_rate(struct rk3562_clk_priv *priv, ulong clk_id)
+{
+	struct rk3562_cru *cru = priv->cru;
+	u32 sel, con, div;
+	ulong rate;
+
+	switch (clk_id) {
+	case CLK_PMU0_I2C0:
+		con = readl(&cru->pmu0clksel_con[3]);
+		sel = (con & CLK_PMU0_I2C0_SEL_MASK) >> CLK_PMU0_I2C0_SEL_SHIFT;
+		if (sel == CLK_PMU0_I2C0_SEL_200M)
+			rate = 200 * MHz;
+		else if (sel == CLK_PMU0_I2C0_SEL_24M)
+			rate = OSC_HZ;
+		else
+			rate = 32768;
+		div = (con & CLK_PMU0_I2C0_DIV_MASK) >> CLK_PMU0_I2C0_DIV_SHIFT;
+
+		return DIV_TO_RATE(rate, div);
+	case CLK_I2C:
+	case CLK_I2C1:
+	case CLK_I2C2:
+	case CLK_I2C3:
+	case CLK_I2C4:
+	case CLK_I2C5:
+		con = readl(&cru->clksel_con[41]);
+		sel = (con & CLK_I2C_SEL_MASK) >> CLK_I2C_SEL_SHIFT;
+		if (sel == CLK_I2C_SEL_200M)
+			rate = 200 * MHz;
+		else if (sel == CLK_I2C_SEL_100M)
+			rate = 100 * MHz;
+		else if (sel == CLK_I2C_SEL_50M)
+			rate = 50 * MHz;
+		else
+			rate = OSC_HZ;
+		break;
+	default:
+		return -ENOENT;
+	}
+
+	return rate;
+}
+
+static ulong rk3562_i2c_set_rate(struct rk3562_clk_priv *priv, ulong clk_id,
+				 ulong rate)
+{
+	struct rk3562_cru *cru = priv->cru;
+	u32 sel, div;
+
+	switch (clk_id) {
+	case CLK_PMU0_I2C0:
+		if (rate == 200 * MHz) {
+			sel = CLK_PMU0_I2C0_SEL_200M;
+			div = 1;
+		} else if (rate == OSC_HZ) {
+			sel = CLK_PMU0_I2C0_SEL_24M;
+			div = 1;
+		} else if (rate == 32768) {
+			sel = CLK_PMU0_I2C0_SEL_32K;
+			div = 1;
+		} else {
+			sel = CLK_PMU0_I2C0_SEL_200M;
+			div = DIV_ROUND_UP(200 * MHz, rate);
+			assert(div - 1 <= 31);
+		}
+		rk_clrsetreg(&cru->pmu0clksel_con[3], CLK_PMU0_I2C0_DIV_MASK,
+			     (div - 1) << CLK_PMU0_I2C0_DIV_SHIFT);
+		rk_clrsetreg(&cru->pmu0clksel_con[3], CLK_PMU0_I2C0_SEL_MASK,
+			     sel << CLK_PMU0_I2C0_SEL_SHIFT);
+		break;
+	case CLK_I2C:
+	case CLK_I2C2:
+	case CLK_I2C3:
+	case CLK_I2C4:
+	case CLK_I2C5:
+		if (rate == 200 * MHz)
+			sel = CLK_I2C_SEL_200M;
+		else if (rate == 100 * MHz)
+			sel = CLK_I2C_SEL_100M;
+		else if (rate == 50 * MHz)
+			sel = CLK_I2C_SEL_50M;
+		else
+			sel = CLK_I2C_SEL_24M;
+		rk_clrsetreg(&cru->clksel_con[41], CLK_I2C_SEL_MASK,
+			     sel << CLK_I2C_SEL_SHIFT);
+		break;
+	default:
+		return -ENOENT;
+	}
+
+
+	return rk3562_i2c_get_rate(priv, clk_id);
+}
+
+static ulong rk3562_uart_get_rate(struct rk3562_clk_priv *priv, ulong clk_id)
+{
+	struct rk3562_cru *cru = priv->cru;
+	u32 reg, con, fracdiv, div, src, p_src, p_rate;
+	unsigned long m, n;
+
+	switch (clk_id) {
+	case SCLK_PMU1_UART0:
+		con = readl(&cru->pmu1clksel_con[2]);
+		src = (con & CLK_PMU1_UART0_SEL_MASK) >>
+		       CLK_PMU1_UART0_SEL_SHIFT;
+		div = (con & CLK_PMU1_UART0_SRC_DIV_MASK) >>
+		       CLK_PMU1_UART0_SRC_DIV_SHIFT;
+		if (src == CLK_UART_SEL_SRC) {
+			return DIV_TO_RATE(priv->cpll_hz, div);
+		} else if (src == CLK_UART_SEL_FRAC) {
+			fracdiv = readl(&cru->pmu1clksel_con[3]);
+			n = fracdiv & CLK_UART_FRAC_NUMERATOR_MASK;
+			n >>= CLK_UART_FRAC_NUMERATOR_SHIFT;
+			m = fracdiv & CLK_UART_FRAC_DENOMINATOR_MASK;
+			m >>= CLK_UART_FRAC_DENOMINATOR_SHIFT;
+			return DIV_TO_RATE(priv->cpll_hz, div) * n / m;
+		} else {
+			return OSC_HZ;
+		}
+	case SCLK_UART1:
+		reg = 21;
+		break;
+	case SCLK_UART2:
+		reg = 23;
+		break;
+	case SCLK_UART3:
+		reg = 25;
+		break;
+	case SCLK_UART4:
+		reg = 27;
+		break;
+	case SCLK_UART5:
+		reg = 29;
+		break;
+	case SCLK_UART6:
+		reg = 31;
+		break;
+	case SCLK_UART7:
+		reg = 33;
+		break;
+	case SCLK_UART8:
+		reg = 35;
+		break;
+	case SCLK_UART9:
+		reg = 37;
+		break;
+	default:
+		return -ENOENT;
+	}
+	con = readl(&cru->periclksel_con[reg]);
+	src = (con & CLK_UART_SEL_MASK) >> CLK_UART_SEL_SHIFT;
+	div = (con & CLK_UART_SRC_DIV_MASK) >> CLK_UART_SRC_DIV_SHIFT;
+	p_src = (con & CLK_UART_SRC_SEL_MASK) >> CLK_UART_SRC_SEL_SHIFT;
+	if (p_src == CLK_UART_SRC_SEL_GPLL)
+		p_rate = priv->gpll_hz;
+	else
+		p_rate = priv->cpll_hz;
+	if (src == CLK_UART_SEL_SRC) {
+		return DIV_TO_RATE(p_rate, div);
+	} else if (src == CLK_UART_SEL_FRAC) {
+		fracdiv = readl(&cru->periclksel_con[reg + 1]);
+		n = fracdiv & CLK_UART_FRAC_NUMERATOR_MASK;
+		n >>= CLK_UART_FRAC_NUMERATOR_SHIFT;
+		m = fracdiv & CLK_UART_FRAC_DENOMINATOR_MASK;
+		m >>= CLK_UART_FRAC_DENOMINATOR_SHIFT;
+		return DIV_TO_RATE(p_rate, div) * n / m;
+	} else {
+		return OSC_HZ;
+	}
+}
+
+static ulong rk3562_uart_set_rate(struct rk3562_clk_priv *priv, ulong clk_id,
+				  ulong rate)
+{
+	struct rk3562_cru *cru = priv->cru;
+	u32 reg, clk_src, uart_src, div;
+	unsigned long m = 0, n = 0, val;
+
+	switch (clk_id) {
+	case SCLK_PMU1_UART0:
+		if (priv->cpll_hz % rate == 0) {
+			uart_src = CLK_UART_SEL_SRC;
+			div = DIV_ROUND_UP(priv->cpll_hz, rate);
+		} else if (rate == OSC_HZ) {
+			uart_src = CLK_UART_SEL_XIN24M;
+			div = 2;
+		} else {
+			uart_src = CLK_UART_SEL_FRAC;
+			div = 2;
+			rational_best_approximation(rate, priv->cpll_hz / div,
+						    GENMASK(16 - 1, 0),
+						    GENMASK(16 - 1, 0),
+						    &n, &m);
+		}
+
+		rk_clrsetreg(&cru->pmu1clksel_con[2],
+			     CLK_PMU1_UART0_SEL_MASK |
+			     CLK_PMU1_UART0_SRC_DIV_MASK,
+			     (uart_src << CLK_PMU1_UART0_SEL_SHIFT) |
+			     ((div - 1) << CLK_PMU1_UART0_SRC_DIV_SHIFT));
+		if (m && n) {
+			val = n << CLK_UART_FRAC_NUMERATOR_SHIFT | m;
+			writel(val, &cru->pmu1clksel_con[3]);
+		}
+
+		return rk3562_uart_get_rate(priv, clk_id);
+	case SCLK_UART1:
+		reg = 21;
+		break;
+	case SCLK_UART2:
+		reg = 23;
+		break;
+	case SCLK_UART3:
+		reg = 25;
+		break;
+	case SCLK_UART4:
+		reg = 27;
+		break;
+	case SCLK_UART5:
+		reg = 29;
+		break;
+	case SCLK_UART6:
+		reg = 31;
+		break;
+	case SCLK_UART7:
+		reg = 33;
+		break;
+	case SCLK_UART8:
+		reg = 35;
+		break;
+	case SCLK_UART9:
+		reg = 37;
+		break;
+	default:
+		return -ENOENT;
+	}
+
+	if (priv->gpll_hz % rate == 0) {
+		clk_src = CLK_UART_SRC_SEL_GPLL;
+		uart_src = CLK_UART_SEL_SRC;
+		div = DIV_ROUND_UP(priv->gpll_hz, rate);
+	} else if (priv->cpll_hz % rate == 0) {
+		clk_src = CLK_UART_SRC_SEL_CPLL;
+		uart_src = CLK_UART_SEL_SRC;
+		div = DIV_ROUND_UP(priv->cpll_hz, rate);
+	} else if (rate == OSC_HZ) {
+		clk_src = CLK_UART_SRC_SEL_GPLL;
+		uart_src = CLK_UART_SEL_XIN24M;
+		div = 2;
+	} else {
+		clk_src = CLK_UART_SRC_SEL_GPLL;
+		uart_src = CLK_UART_SEL_FRAC;
+		div = 2;
+		rational_best_approximation(rate, priv->gpll_hz / div,
+					    GENMASK(16 - 1, 0),
+					    GENMASK(16 - 1, 0),
+					    &n, &m);
+	}
+
+	rk_clrsetreg(&cru->periclksel_con[reg],
+		     CLK_UART_SEL_MASK | CLK_UART_SRC_SEL_MASK |
+		     CLK_UART_SRC_DIV_MASK,
+		     (clk_src << CLK_UART_SRC_SEL_SHIFT) |
+		     (uart_src << CLK_UART_SEL_SHIFT) |
+		     ((div - 1) << CLK_UART_SRC_DIV_SHIFT));
+	if (m && n) {
+		val = n << CLK_UART_FRAC_NUMERATOR_SHIFT | m;
+		writel(val, &cru->periclksel_con[reg + 1]);
+	}
+
+	return rk3562_uart_get_rate(priv, clk_id);
+}
+
+static ulong rk3562_pwm_get_rate(struct rk3562_clk_priv *priv, ulong clk_id)
+{
+	struct rk3562_cru *cru = priv->cru;
+	u32 sel, con, div, mask, shift;
+	ulong rate;
+
+	switch (clk_id) {
+	case CLK_PMU1_PWM0:
+		con = readl(&cru->pmu1clksel_con[4]);
+		sel = (con & CLK_PMU1_PWM0_SEL_MASK) >> CLK_PMU1_PWM0_SEL_SHIFT;
+		if (sel == CLK_PMU1_PWM0_SEL_200M)
+			rate = 200 * MHz;
+		else if (sel == CLK_PMU1_PWM0_SEL_24M)
+			rate = OSC_HZ;
+		else
+			rate = 32768;
+		div = (con & CLK_PMU1_PWM0_DIV_MASK) >> CLK_PMU1_PWM0_DIV_SHIFT;
+
+		return DIV_TO_RATE(rate, div);
+	case CLK_PWM1_PERI:
+		mask = CLK_PWM1_PERI_SEL_MASK;
+		shift = CLK_PWM1_PERI_SEL_SHIFT;
+		break;
+	case CLK_PWM2_PERI:
+		mask = CLK_PWM2_PERI_SEL_MASK;
+		shift = CLK_PWM2_PERI_SEL_SHIFT;
+		break;
+	case CLK_PWM3_PERI:
+		mask = CLK_PWM3_PERI_SEL_MASK;
+		shift = CLK_PWM3_PERI_SEL_SHIFT;
+		break;
+	default:
+		return -ENOENT;
+	}
+
+	con = readl(&cru->periclksel_con[40]);
+	sel = (con & mask) >> shift;
+	if (sel == CLK_PWM_SEL_100M)
+		rate = 100 * MHz;
+	else if (sel == CLK_PWM_SEL_50M)
+		rate = 50 * MHz;
+	else
+		rate = OSC_HZ;
+
+	return rate;
+}
+
+static ulong rk3562_pwm_set_rate(struct rk3562_clk_priv *priv, ulong clk_id,
+				 ulong rate)
+{
+	struct rk3562_cru *cru = priv->cru;
+	u32 sel, div, mask, shift;
+
+	switch (clk_id) {
+	case CLK_PMU1_PWM0:
+		if (rate == 200 * MHz) {
+			sel = CLK_PMU1_PWM0_SEL_200M;
+			div = 1;
+		} else if (rate == OSC_HZ) {
+			sel = CLK_PMU1_PWM0_SEL_24M;
+			div = 1;
+		} else if (rate == 32768) {
+			sel = CLK_PMU1_PWM0_SEL_32K;
+			div = 1;
+		} else {
+			sel = CLK_PMU1_PWM0_SEL_200M;
+			div = DIV_ROUND_UP(200 * MHz, rate);
+			assert(div - 1 <= 3);
+		}
+		rk_clrsetreg(&cru->pmu1clksel_con[4], CLK_PMU1_PWM0_DIV_MASK,
+			     (div - 1) << CLK_PMU1_PWM0_DIV_SHIFT);
+		rk_clrsetreg(&cru->pmu1clksel_con[4], CLK_PMU1_PWM0_SEL_MASK,
+			     sel << CLK_PMU1_PWM0_SEL_SHIFT);
+
+		return rk3562_pwm_get_rate(priv, clk_id);
+	case CLK_PWM1_PERI:
+		mask = CLK_PWM1_PERI_SEL_MASK;
+		shift = CLK_PWM1_PERI_SEL_SHIFT;
+		break;
+	case CLK_PWM2_PERI:
+		mask = CLK_PWM2_PERI_SEL_MASK;
+		shift = CLK_PWM2_PERI_SEL_SHIFT;
+		break;
+	case CLK_PWM3_PERI:
+		mask = CLK_PWM3_PERI_SEL_MASK;
+		shift = CLK_PWM3_PERI_SEL_SHIFT;
+		break;
+	default:
+		return -ENOENT;
+	}
+
+	if (rate == 100 * MHz)
+		sel = CLK_PWM_SEL_100M;
+	else if (rate == 50 * MHz)
+		sel = CLK_PWM_SEL_50M;
+	else
+		sel = CLK_PWM_SEL_24M;
+	rk_clrsetreg(&cru->periclksel_con[40], mask, sel << shift);
+
+	return rk3562_pwm_get_rate(priv, clk_id);
+}
+
+static ulong rk3562_spi_get_rate(struct rk3562_clk_priv *priv, ulong clk_id)
+{
+	struct rk3562_cru *cru = priv->cru;
+	u32 sel, con, div, mask, shift;
+	ulong rate;
+
+	switch (clk_id) {
+	case CLK_PMU1_SPI0:
+		con = readl(&cru->pmu1clksel_con[4]);
+		sel = (con & CLK_PMU1_SPI0_SEL_MASK) >> CLK_PMU1_SPI0_SEL_SHIFT;
+		if (sel == CLK_PMU1_SPI0_SEL_200M)
+			rate = 200 * MHz;
+		else if (sel == CLK_PMU1_SPI0_SEL_24M)
+			rate = OSC_HZ;
+		else
+			rate = 32768;
+		div = (con & CLK_PMU1_SPI0_DIV_MASK) >> CLK_PMU1_SPI0_DIV_SHIFT;
+
+		return DIV_TO_RATE(rate, div);
+	case CLK_SPI1:
+		mask = CLK_SPI1_SEL_MASK;
+		shift = CLK_SPI1_SEL_SHIFT;
+		break;
+	case CLK_SPI2:
+		mask = CLK_SPI2_SEL_MASK;
+		shift = CLK_SPI2_SEL_SHIFT;
+		break;
+	default:
+		return -ENOENT;
+	}
+
+	con = readl(&cru->periclksel_con[20]);
+	sel = (con & mask) >> shift;
+	if (sel == CLK_SPI_SEL_200M)
+		rate = 200 * MHz;
+	else if (sel == CLK_SPI_SEL_100M)
+		rate = 100 * MHz;
+	else if (sel == CLK_SPI_SEL_50M)
+		rate = 50 * MHz;
+	else
+		rate = OSC_HZ;
+
+	return rate;
+}
+
+static ulong rk3562_spi_set_rate(struct rk3562_clk_priv *priv, ulong clk_id,
+				 ulong rate)
+{
+	struct rk3562_cru *cru = priv->cru;
+	u32 sel, div, mask, shift;
+
+	switch (clk_id) {
+	case CLK_PMU1_SPI0:
+		if (rate == 200 * MHz) {
+			sel = CLK_PMU1_SPI0_SEL_200M;
+			div = 1;
+		} else if (rate == OSC_HZ) {
+			sel = CLK_PMU1_SPI0_SEL_24M;
+			div = 1;
+		} else if (rate == 32768) {
+			sel = CLK_PMU1_SPI0_SEL_32K;
+			div = 1;
+		} else {
+			sel = CLK_PMU1_SPI0_SEL_200M;
+			div = DIV_ROUND_UP(200 * MHz, rate);
+			assert(div - 1 <= 3);
+		}
+		rk_clrsetreg(&cru->pmu1clksel_con[4], CLK_PMU1_SPI0_DIV_MASK,
+			     (div - 1) << CLK_PMU1_SPI0_DIV_SHIFT);
+		rk_clrsetreg(&cru->pmu1clksel_con[4], CLK_PMU1_SPI0_SEL_MASK,
+			     sel << CLK_PMU1_SPI0_SEL_SHIFT);
+
+		return rk3562_spi_get_rate(priv, clk_id);
+	case CLK_SPI1:
+		mask = CLK_SPI1_SEL_MASK;
+		shift = CLK_SPI1_SEL_SHIFT;
+		break;
+	case CLK_SPI2:
+		mask = CLK_SPI2_SEL_MASK;
+		shift = CLK_SPI2_SEL_SHIFT;
+		break;
+	default:
+		return -ENOENT;
+	}
+
+	if (rate == 200 * MHz)
+		sel = CLK_SPI_SEL_200M;
+	else if (rate == 100 * MHz)
+		sel = CLK_SPI_SEL_100M;
+	else if (rate == 50 * MHz)
+		sel = CLK_SPI_SEL_50M;
+	else
+		sel = CLK_SPI_SEL_24M;
+	rk_clrsetreg(&cru->periclksel_con[20], mask, sel << shift);
+
+	return rk3562_spi_get_rate(priv, clk_id);
+}
+
+static ulong rk3562_tsadc_get_rate(struct rk3562_clk_priv *priv, ulong clk_id)
+{
+	struct rk3562_cru *cru = priv->cru;
+	u32 div, con;
+
+	con = readl(&cru->clksel_con[43]);
+	switch (clk_id) {
+	case CLK_TSADC_TSEN:
+		div = (con & CLK_TSADC_TSEN_DIV_MASK) >>
+		       CLK_TSADC_TSEN_DIV_SHIFT;
+		break;
+	case CLK_TSADC:
+		div = (con & CLK_TSADC_DIV_MASK) >> CLK_TSADC_DIV_SHIFT;
+		break;
+	default:
+		return -ENOENT;
+	}
+
+	return DIV_TO_RATE(OSC_HZ, div);
+}
+
+static ulong rk3562_tsadc_set_rate(struct rk3562_clk_priv *priv, ulong clk_id,
+				   ulong rate)
+{
+	struct rk3562_cru *cru = priv->cru;
+	u32 div, mask, shift;
+
+	switch (clk_id) {
+	case CLK_TSADC_TSEN:
+		mask = CLK_TSADC_TSEN_DIV_MASK;
+		shift =	CLK_TSADC_TSEN_DIV_SHIFT;
+		break;
+	case CLK_TSADC:
+		mask = CLK_TSADC_DIV_MASK;
+		shift =	CLK_TSADC_DIV_SHIFT;
+		break;
+	default:
+		return -ENOENT;
+	}
+
+	div = DIV_ROUND_UP(OSC_HZ, rate);
+	rk_clrsetreg(&cru->clksel_con[43], mask, (div - 1) << shift);
+
+	return rk3562_tsadc_get_rate(priv, clk_id);
+}
+
+static ulong rk3562_saradc_get_rate(struct rk3562_clk_priv *priv, ulong clk_id)
+{
+	struct rk3562_cru *cru = priv->cru;
+	u32 div, con;
+
+	switch (clk_id) {
+	case CLK_SARADC_VCCIO156:
+		con = readl(&cru->clksel_con[44]);
+		div = (con & CLK_SARADC_VCCIO156_DIV_MASK) >>
+		       CLK_SARADC_VCCIO156_DIV_SHIFT;
+		break;
+	case CLK_SARADC:
+		con = readl(&cru->periclksel_con[46]);
+		div = (con & CLK_SARADC_DIV_MASK) >> CLK_SARADC_DIV_SHIFT;
+		break;
+	default:
+		return -ENOENT;
+	}
+
+	return DIV_TO_RATE(OSC_HZ, div);
+}
+
+static ulong rk3562_saradc_set_rate(struct rk3562_clk_priv *priv, ulong clk_id,
+				    ulong rate)
+{
+	struct rk3562_cru *cru = priv->cru;
+	u32 div;
+
+	switch (clk_id) {
+	case CLK_SARADC_VCCIO156:
+		div = DIV_ROUND_UP(OSC_HZ, rate);
+		rk_clrsetreg(&cru->clksel_con[44], CLK_SARADC_VCCIO156_DIV_MASK,
+			     (div - 1) << CLK_SARADC_VCCIO156_DIV_SHIFT);
+		break;
+	case CLK_SARADC:
+		div = DIV_ROUND_UP(OSC_HZ, rate);
+		rk_clrsetreg(&cru->periclksel_con[46], CLK_SARADC_DIV_MASK,
+			     (div - 1) << CLK_SARADC_DIV_SHIFT);
+		break;
+	default:
+		return -ENOENT;
+	}
+
+	return rk3562_saradc_get_rate(priv, clk_id);
+}
+
+static ulong rk3562_sfc_get_rate(struct rk3562_clk_priv *priv)
+{
+	struct rk3562_cru *cru = priv->cru;
+	u32 div, sel, con, parent;
+
+	con = readl(&cru->periclksel_con[20]);
+	div = (con & SCLK_SFC_DIV_MASK) >> SCLK_SFC_DIV_SHIFT;
+	sel = (con & SCLK_SFC_SEL_MASK) >> SCLK_SFC_SEL_SHIFT;
+	if (sel == SCLK_SFC_SRC_SEL_GPLL)
+		parent = priv->gpll_hz;
+	else if (sel == SCLK_SFC_SRC_SEL_CPLL)
+		parent = priv->cpll_hz;
+	else
+		parent = OSC_HZ;
+
+	return DIV_TO_RATE(parent, div);
+}
+
+static ulong rk3562_sfc_set_rate(struct rk3562_clk_priv *priv, ulong rate)
+{
+	struct rk3562_cru *cru = priv->cru;
+	int div, sel;
+
+	if (OSC_HZ % rate == 0) {
+		div = DIV_ROUND_UP(OSC_HZ, rate);
+		sel = SCLK_SFC_SRC_SEL_24M;
+	} else if ((priv->cpll_hz % rate) == 0) {
+		div = DIV_ROUND_UP(priv->cpll_hz, rate);
+		sel = SCLK_SFC_SRC_SEL_CPLL;
+	} else {
+		div = DIV_ROUND_UP(priv->gpll_hz, rate);
+		sel = SCLK_SFC_SRC_SEL_GPLL;
+	}
+
+	assert(div - 1 <= 255);
+	rk_clrsetreg(&cru->periclksel_con[20],
+		     SCLK_SFC_SEL_MASK | SCLK_SFC_DIV_MASK,
+		     sel << SCLK_SFC_SEL_SHIFT |
+		     (div - 1) << SCLK_SFC_DIV_SHIFT);
+
+	return rk3562_sfc_get_rate(priv);
+}
+
+static ulong rk3562_emmc_get_rate(struct rk3562_clk_priv *priv, ulong clk_id)
+{
+	struct rk3562_cru *cru = priv->cru;
+	u32 div, sel, con, parent;
+
+	switch (clk_id) {
+	case CCLK_EMMC:
+		con = readl(&cru->periclksel_con[18]);
+		div = (con & CCLK_EMMC_DIV_MASK) >> CCLK_EMMC_DIV_SHIFT;
+		sel = (con & CCLK_EMMC_SEL_MASK) >> CCLK_EMMC_SEL_SHIFT;
+		if (sel == CCLK_EMMC_SEL_GPLL)
+			parent = priv->gpll_hz;
+		else if (sel == CCLK_EMMC_SEL_CPLL)
+			parent = priv->cpll_hz;
+		else if (sel == CCLK_EMMC_SEL_HPLL)
+			parent = priv->hpll_hz;
+		else
+			parent = OSC_HZ;
+		break;
+	case BCLK_EMMC:
+		con = readl(&cru->periclksel_con[19]);
+		div = (con & BCLK_EMMC_DIV_MASK) >> BCLK_EMMC_DIV_SHIFT;
+		sel = (con & BCLK_EMMC_SEL_MASK) >> BCLK_EMMC_SEL_SHIFT;
+		if (sel == BCLK_EMMC_SEL_GPLL)
+			parent = priv->gpll_hz;
+		else
+			parent = priv->cpll_hz;
+		break;
+	default:
+		return -ENOENT;
+	}
+
+	return DIV_TO_RATE(parent, div);
+}
+
+static ulong rk3562_emmc_set_rate(struct rk3562_clk_priv *priv, ulong clk_id,
+				  ulong rate)
+{
+	struct rk3562_cru *cru = priv->cru;
+	int div, sel;
+
+	switch (clk_id) {
+	case CCLK_EMMC:
+		if (OSC_HZ % rate == 0) {
+			div = DIV_ROUND_UP(OSC_HZ, rate);
+			sel = CCLK_EMMC_SEL_24M;
+		} else if ((priv->cpll_hz % rate) == 0) {
+			div = DIV_ROUND_UP(priv->cpll_hz, rate);
+			sel = CCLK_EMMC_SEL_CPLL;
+		} else if ((priv->hpll_hz % rate) == 0) {
+			div = DIV_ROUND_UP(priv->hpll_hz, rate);
+			sel = CCLK_EMMC_SEL_HPLL;
+		} else {
+			div = DIV_ROUND_UP(priv->gpll_hz, rate);
+			sel = CCLK_EMMC_SEL_GPLL;
+		}
+		rk_clrsetreg(&cru->periclksel_con[18],
+			     CCLK_EMMC_SEL_MASK | CCLK_EMMC_DIV_MASK,
+			     sel << CCLK_EMMC_SEL_SHIFT |
+			     (div - 1) << CCLK_EMMC_DIV_SHIFT);
+		break;
+	case BCLK_EMMC:
+		if ((priv->cpll_hz % rate) == 0) {
+			div = DIV_ROUND_UP(priv->cpll_hz, rate);
+			sel = BCLK_EMMC_SEL_CPLL;
+		} else {
+			div = DIV_ROUND_UP(priv->gpll_hz, rate);
+			sel = BCLK_EMMC_SEL_GPLL;
+		}
+		rk_clrsetreg(&cru->periclksel_con[19],
+			     BCLK_EMMC_SEL_MASK | BCLK_EMMC_DIV_MASK,
+			     sel << BCLK_EMMC_SEL_SHIFT |
+			     (div - 1) << BCLK_EMMC_DIV_SHIFT);
+		break;
+	default:
+		return -ENOENT;
+	}
+
+	return rk3562_emmc_get_rate(priv, clk_id);
+}
+
+static ulong rk3562_sdmmc_get_rate(struct rk3562_clk_priv *priv, ulong clk_id)
+{
+	struct rk3562_cru *cru = priv->cru;
+	u32 div, sel, con;
+	ulong prate;
+
+	switch (clk_id) {
+	case HCLK_SDMMC0:
+	case CCLK_SDMMC0:
+	case SCLK_SDMMC0_SAMPLE:
+		con = readl(&cru->periclksel_con[16]);
+		div = (con & CCLK_SDMMC0_DIV_MASK) >> CCLK_SDMMC0_DIV_SHIFT;
+		sel = (con & CCLK_SDMMC0_SEL_MASK) >> CCLK_SDMMC0_SEL_SHIFT;
+		break;
+	case HCLK_SDMMC1:
+	case CCLK_SDMMC1:
+	case SCLK_SDMMC1_SAMPLE:
+		con = readl(&cru->periclksel_con[17]);
+		div = (con & CCLK_SDMMC1_DIV_MASK) >> CCLK_SDMMC1_DIV_SHIFT;
+		sel = (con & CCLK_SDMMC1_SEL_MASK) >> CCLK_SDMMC1_SEL_SHIFT;
+		break;
+	default:
+		return -ENOENT;
+	}
+
+	if (sel == CCLK_SDMMC_SEL_GPLL)
+		prate = priv->gpll_hz;
+	else if (sel == CCLK_SDMMC_SEL_CPLL)
+		prate = priv->cpll_hz;
+	else if (sel == CCLK_SDMMC_SEL_HPLL)
+		prate = priv->hpll_hz;
+	else
+		prate = OSC_HZ;
+
+	return DIV_TO_RATE(prate, div);
+}
+
+static ulong rk3562_sdmmc_set_rate(struct rk3562_clk_priv *priv,
+				   ulong clk_id, ulong rate)
+{
+	struct rk3562_cru *cru = priv->cru;
+	u32 div, sel;
+
+	if (OSC_HZ % rate == 0) {
+		div = DIV_ROUND_UP(OSC_HZ, rate);
+		sel = CCLK_SDMMC_SEL_24M;
+	} else if ((priv->cpll_hz % rate) == 0) {
+		div = DIV_ROUND_UP(priv->cpll_hz, rate);
+		sel = CCLK_SDMMC_SEL_CPLL;
+	} else if ((priv->hpll_hz % rate) == 0) {
+		div = DIV_ROUND_UP(priv->hpll_hz, rate);
+		sel = CCLK_SDMMC_SEL_HPLL;
+	} else {
+		div = DIV_ROUND_UP(priv->gpll_hz, rate);
+		sel = CCLK_SDMMC_SEL_CPLL;
+	}
+
+	switch (clk_id) {
+	case HCLK_SDMMC0:
+	case CCLK_SDMMC0:
+		rk_clrsetreg(&cru->periclksel_con[16],
+			     CCLK_SDMMC0_SEL_MASK | CCLK_SDMMC0_DIV_MASK,
+			     sel << CCLK_SDMMC0_SEL_SHIFT |
+			     (div - 1) << CCLK_SDMMC0_DIV_SHIFT);
+		break;
+	case HCLK_SDMMC1:
+	case CCLK_SDMMC1:
+		rk_clrsetreg(&cru->periclksel_con[17],
+			     CCLK_SDMMC1_SEL_MASK | CCLK_SDMMC1_DIV_MASK,
+			     sel << CCLK_SDMMC1_SEL_SHIFT |
+			     (div - 1) << CCLK_SDMMC1_DIV_SHIFT);
+		break;
+	default:
+		return -ENOENT;
+	}
+
+	return rk3562_sdmmc_get_rate(priv, clk_id);
+}
+
+static ulong rk3562_vop_get_rate(struct rk3562_clk_priv *priv, ulong clk_id)
+{
+	struct rk3562_cru *cru = priv->cru;
+	u32 con, sel, div;
+	ulong prate;
+
+	switch (clk_id) {
+	case ACLK_VOP:
+		con = readl(&cru->clksel_con[28]);
+		div = (con & ACLK_VOP_DIV_MASK) >> ACLK_VOP_DIV_SHIFT;
+		sel = (con & ACLK_VOP_SEL_MASK) >> ACLK_VOP_SEL_SHIFT;
+		if (sel == ACLK_VOP_SEL_GPLL)
+			prate = priv->gpll_hz;
+		else if (sel == ACLK_VOP_SEL_CPLL)
+			prate = priv->cpll_hz;
+		else if (sel == ACLK_VOP_SEL_HPLL)
+			prate = priv->hpll_hz;
+		else if (sel == ACLK_VOP_SEL_VPLL)
+			prate = priv->vpll_hz;
+		else
+			return -ENOENT;
+
+		return DIV_TO_RATE(prate, div);
+	case DCLK_VOP:
+		con = readl(&cru->clksel_con[30]);
+		div = (con & DCLK_VOP_DIV_MASK) >> DCLK_VOP_DIV_SHIFT;
+		sel = (con & DCLK_VOP_SEL_MASK) >> DCLK_VOP_SEL_SHIFT;
+		if (sel == DCLK_VOP_SEL_VPLL)
+			priv->vpll_hz =
+				rockchip_pll_get_rate(&rk3562_pll_clks[VPLL],
+						      priv->cru, VPLL);
+		break;
+	case DCLK_VOP1:
+		con = readl(&cru->clksel_con[31]);
+		div = (con & DCLK_VOP1_DIV_MASK) >> DCLK_VOP1_DIV_SHIFT;
+		sel = (con & DCLK_VOP1_SEL_MASK) >> DCLK_VOP1_SEL_SHIFT;
+		break;
+	default:
+		return -ENOENT;
+	}
+
+	if (sel == DCLK_VOP_SEL_GPLL)
+		prate = priv->gpll_hz;
+	else if (sel == DCLK_VOP_SEL_HPLL)
+		prate = priv->hpll_hz;
+	else if (sel == DCLK_VOP_SEL_VPLL)
+		prate = priv->vpll_hz;
+	else
+		return -ENOENT;
+
+	return DIV_TO_RATE(prate, div);
+}
+
+#define RK3562_VOP_PLL_LIMIT_FREQ 594000000
+
+static ulong rk3562_vop_set_rate(struct rk3562_clk_priv *priv, ulong clk_id,
+				 ulong rate)
+{
+	struct rk3562_cru *cru = priv->cru;
+	u32 i, div, sel, best_div = 0, best_sel = 0;
+	ulong pll_rate, now, best_rate = 0;
+
+	switch (clk_id) {
+	case ACLK_VOP:
+		if ((priv->cpll_hz % rate) == 0) {
+			div = DIV_ROUND_UP(priv->cpll_hz, rate);
+			sel = ACLK_VOP_SEL_CPLL;
+		} else if ((priv->hpll_hz % rate) == 0) {
+			div = DIV_ROUND_UP(priv->hpll_hz, rate);
+			sel = ACLK_VOP_SEL_HPLL;
+		} else if ((priv->vpll_hz % rate) == 0) {
+			div = DIV_ROUND_UP(priv->vpll_hz, rate);
+			sel = ACLK_VOP_SEL_VPLL;
+		} else {
+			div = DIV_ROUND_UP(priv->gpll_hz, rate);
+			sel = ACLK_VOP_SEL_GPLL;
+		}
+		rk_clrsetreg(&cru->clksel_con[28],
+			     ACLK_VOP_SEL_MASK | ACLK_VOP_DIV_MASK,
+			     sel << ACLK_VOP_SEL_SHIFT |
+			     ((div - 1) << ACLK_VOP_DIV_SHIFT));
+
+		return rk3562_vop_get_rate(priv, clk_id);
+	case DCLK_VOP:
+		div = DIV_ROUND_UP(RK3562_VOP_PLL_LIMIT_FREQ, rate);
+		if (div % 2)
+			div = div + 1;
+		rk_clrsetreg(&cru->clksel_con[30],
+			     DCLK_VOP_SEL_MASK | DCLK_VOP_DIV_MASK,
+			     DCLK_VOP_SEL_VPLL << DCLK_VOP_SEL_SHIFT |
+			     ((div - 1) << DCLK_VOP_DIV_SHIFT));
+		rockchip_pll_set_rate(&rk3562_pll_clks[VPLL], priv->cru,
+				      VPLL, div * rate);
+		break;
+	case DCLK_VOP1:
+		for (i = 0; i <= DCLK_VOP_SEL_APLL; i++) {
+			switch (i) {
+			case DCLK_VOP_SEL_GPLL:
+				pll_rate = priv->gpll_hz;
+				break;
+			case DCLK_VOP_SEL_HPLL:
+				pll_rate = priv->hpll_hz;
+				break;
+			case DCLK_VOP_SEL_VPLL:
+			case DCLK_VOP_SEL_APLL:
+				continue;
+			default:
+				printf("do not support this vop pll sel\n");
+				return -EINVAL;
+			}
+
+			div = DIV_ROUND_UP(pll_rate, rate);
+			if (div > 255)
+				continue;
+			now = pll_rate / div;
+			if (abs(rate - now) < abs(rate - best_rate)) {
+				best_rate = now;
+				best_div = div;
+				best_sel = i;
+			}
+			debug("p_rate=%lu, best_rate=%lu, div=%u, sel=%u\n",
+			      pll_rate, best_rate, best_div, best_sel);
+		}
+		if (best_rate) {
+			rk_clrsetreg(&cru->clksel_con[31],
+				     DCLK_VOP1_SEL_MASK | DCLK_VOP1_DIV_MASK,
+				     best_sel << DCLK_VOP1_SEL_SHIFT |
+				     (best_div - 1) << DCLK_VOP1_DIV_SHIFT);
+		} else {
+			printf("do not support this vop freq %lu\n", rate);
+			return -EINVAL;
+		}
+		break;
+	default:
+		return -ENOENT;
+	}
+
+	return rk3562_vop_get_rate(priv, clk_id);
+}
+
+static ulong rk3562_gmac_get_rate(struct rk3562_clk_priv *priv, ulong clk_id)
+{
+	struct rk3562_cru *cru = priv->cru;
+	u32 con, sel, div;
+	ulong prate;
+
+	switch (clk_id) {
+	case CLK_GMAC_125M_CRU_I:
+		con = readl(&cru->clksel_con[45]);
+		sel = (con & CLK_GMAC_125M_SEL_MASK) >> CLK_GMAC_125M_SEL_SHIFT;
+		if (sel == CLK_GMAC_125M)
+			return 125000000;
+		else
+			return OSC_HZ;
+	case CLK_GMAC_50M_CRU_I:
+		con = readl(&cru->clksel_con[45]);
+		sel = (con & CLK_GMAC_50M_SEL_MASK) >> CLK_GMAC_50M_SEL_SHIFT;
+		if (sel == CLK_GMAC_50M)
+			return 50000000;
+		else
+			return OSC_HZ;
+	case CLK_MAC100_50M_MATRIX:
+		con = readl(&cru->clksel_con[47]);
+		sel = (con & CLK_GMAC_50M_SEL_MASK) >> CLK_GMAC_50M_SEL_SHIFT;
+		if (sel == CLK_GMAC_50M)
+			return 50000000;
+		else
+			return OSC_HZ;
+	case CLK_GMAC_ETH_OUT2IO:
+		con = readl(&cru->clksel_con[46]);
+		sel = (con & CLK_GMAC_ETH_OUT2IO_SEL_MASK) >> CLK_GMAC_ETH_OUT2IO_SEL_SHIFT;
+		div = (con & CLK_GMAC_ETH_OUT2IO_DIV_MASK) >> CLK_GMAC_ETH_OUT2IO_DIV_SHIFT;
+		if (sel == CLK_GMAC_ETH_OUT2IO_GPLL)
+			prate = priv->gpll_hz;
+		else
+			prate = priv->cpll_hz;
+		break;
+	default:
+		return -ENOENT;
+	}
+
+	return DIV_TO_RATE(prate, div);
+}
+
+static ulong rk3562_gmac_set_rate(struct rk3562_clk_priv *priv, ulong clk_id,
+				  ulong rate)
+{
+	struct rk3562_cru *cru = priv->cru;
+	u32 sel, div;
+
+	switch (clk_id) {
+	case CLK_GMAC_125M_CRU_I:
+		if (rate == 125000000)
+			sel = CLK_GMAC_125M;
+		else
+			sel = CLK_GMAC_24M;
+		rk_clrsetreg(&cru->clksel_con[45], CLK_GMAC_125M_SEL_MASK,
+			     sel << CLK_GMAC_125M_SEL_SHIFT);
+		break;
+	case CLK_GMAC_50M_CRU_I:
+		if (rate == 50000000)
+			sel = CLK_GMAC_50M;
+		else
+			sel = CLK_GMAC_24M;
+		rk_clrsetreg(&cru->clksel_con[45], CLK_GMAC_50M_SEL_MASK,
+			     sel << CLK_GMAC_50M_SEL_SHIFT);
+		break;
+	case CLK_MAC100_50M_MATRIX:
+		if (rate == 50000000)
+			sel = CLK_GMAC_50M;
+		else
+			sel = CLK_GMAC_24M;
+		rk_clrsetreg(&cru->clksel_con[47], CLK_GMAC_50M_SEL_MASK,
+			     sel << CLK_GMAC_50M_SEL_SHIFT);
+		break;
+	case CLK_GMAC_ETH_OUT2IO:
+		if ((priv->cpll_hz % rate) == 0) {
+			div = DIV_ROUND_UP(priv->cpll_hz, rate);
+			sel = CLK_GMAC_ETH_OUT2IO_CPLL;
+		} else {
+			div = DIV_ROUND_UP(priv->gpll_hz, rate);
+			sel = CLK_GMAC_ETH_OUT2IO_GPLL;
+		}
+		rk_clrsetreg(&cru->clksel_con[46],
+			     CLK_GMAC_ETH_OUT2IO_SEL_MASK | CLK_GMAC_ETH_OUT2IO_DIV_MASK,
+			     sel << CLK_GMAC_ETH_OUT2IO_SEL_SHIFT |
+			     (div - 1) << CLK_GMAC_ETH_OUT2IO_DIV_SHIFT);
+		break;
+	default:
+		return -ENOENT;
+	}
+
+	return rk3562_gmac_get_rate(priv, clk_id);
+}
+
+static ulong rk3562_clk_get_rate(struct clk *clk)
+{
+	struct rk3562_clk_priv *priv = dev_get_priv(clk->dev);
+	ulong rate = 0;
+
+	if (!priv->gpll_hz || !priv->cpll_hz || !priv->hpll_hz) {
+		printf("%s: gpll=%lu, cpll=%lu, hpll=%lu\n",
+		       __func__, priv->gpll_hz, priv->cpll_hz, priv->hpll_hz);
+		return -ENOENT;
+	}
+
+	switch (clk->id) {
+	case PLL_APLL:
+	case ARMCLK:
+		rate = rockchip_pll_get_rate(&rk3562_pll_clks[APLL], priv->cru,
+					     APLL);
+		break;
+	case PLL_GPLL:
+		rate = rockchip_pll_get_rate(&rk3562_pll_clks[GPLL], priv->cru,
+					     GPLL);
+		break;
+
+	case PLL_VPLL:
+		rate = rockchip_pll_get_rate(&rk3562_pll_clks[VPLL], priv->cru,
+					     VPLL);
+		break;
+	case PLL_HPLL:
+		rate = rockchip_pll_get_rate(&rk3562_pll_clks[HPLL], priv->cru,
+					     HPLL);
+		break;
+	case PLL_CPLL:
+		rate = rockchip_pll_get_rate(&rk3562_pll_clks[CPLL], priv->cru,
+					     CPLL);
+		break;
+	case PLL_DPLL:
+		rate = rockchip_pll_get_rate(&rk3562_pll_clks[DPLL], priv->cru,
+					     DPLL);
+		break;
+	case ACLK_BUS:
+	case HCLK_BUS:
+	case PCLK_BUS:
+		rate = rk3562_bus_get_rate(priv, clk->id);
+		break;
+	case ACLK_PERI:
+	case HCLK_PERI:
+	case PCLK_PERI:
+		rate = rk3562_peri_get_rate(priv, clk->id);
+		break;
+	case CLK_PMU0_I2C0:
+	case CLK_I2C:
+	case CLK_I2C1:
+	case CLK_I2C2:
+	case CLK_I2C3:
+	case CLK_I2C4:
+	case CLK_I2C5:
+		rate = rk3562_i2c_get_rate(priv, clk->id);
+		break;
+	case SCLK_PMU1_UART0:
+	case SCLK_UART1:
+	case SCLK_UART2:
+	case SCLK_UART3:
+	case SCLK_UART4:
+	case SCLK_UART5:
+	case SCLK_UART6:
+	case SCLK_UART7:
+	case SCLK_UART8:
+	case SCLK_UART9:
+		rate = rk3562_uart_get_rate(priv, clk->id);
+		break;
+	case CLK_PMU1_PWM0:
+	case CLK_PWM1_PERI:
+	case CLK_PWM2_PERI:
+	case CLK_PWM3_PERI:
+		rate = rk3562_pwm_get_rate(priv, clk->id);
+		break;
+	case CLK_PMU1_SPI0:
+	case CLK_SPI1:
+	case CLK_SPI2:
+		rate = rk3562_spi_get_rate(priv, clk->id);
+		break;
+	case CLK_TSADC:
+	case CLK_TSADC_TSEN:
+		rate = rk3562_tsadc_get_rate(priv, clk->id);
+		break;
+	case CLK_SARADC:
+	case CLK_SARADC_VCCIO156:
+		rate = rk3562_saradc_get_rate(priv, clk->id);
+		break;
+	case SCLK_SFC:
+		rate = rk3562_sfc_get_rate(priv);
+		break;
+	case CCLK_EMMC:
+	case BCLK_EMMC:
+		rate = rk3562_emmc_get_rate(priv, clk->id);
+		break;
+	case HCLK_SDMMC0:
+	case HCLK_SDMMC1:
+	case CCLK_SDMMC0:
+	case CCLK_SDMMC1:
+	case SCLK_SDMMC0_SAMPLE:
+	case SCLK_SDMMC1_SAMPLE:
+		rate = rk3562_sdmmc_get_rate(priv, clk->id);
+		break;
+	case ACLK_VOP:
+	case DCLK_VOP:
+	case DCLK_VOP1:
+		rate = rk3562_vop_get_rate(priv, clk->id);
+		break;
+	case CLK_GMAC_125M_CRU_I:
+	case CLK_GMAC_50M_CRU_I:
+	case CLK_GMAC_ETH_OUT2IO:
+	case CLK_MAC100_50M_MATRIX:
+		rate = rk3562_gmac_get_rate(priv, clk->id);
+		break;
+	case CLK_WDTNS:
+		rate = OSC_HZ;
+		break;
+	default:
+		return -ENOENT;
+	}
+
+	return rate;
+};
+
+static ulong rk3562_clk_set_rate(struct clk *clk, ulong rate)
+{
+	struct rk3562_clk_priv *priv = dev_get_priv(clk->dev);
+	ulong ret = 0;
+
+	if (!priv->gpll_hz || !priv->cpll_hz || !priv->hpll_hz) {
+		printf("%s: gpll=%lu, cpll=%lu, hpll=%lu\n",
+		       __func__, priv->gpll_hz, priv->cpll_hz, priv->hpll_hz);
+		return -ENOENT;
+	}
+
+	debug("%s: id=%ld, rate=%ld\n", __func__, clk->id, rate);
+
+	switch (clk->id) {
+	case PLL_APLL:
+	case ARMCLK:
+		if (priv->armclk_hz)
+			rk3562_armclk_set_rate(priv, rate);
+		priv->armclk_hz = rate;
+		break;
+	case PLL_GPLL:
+		ret = rockchip_pll_set_rate(&rk3562_pll_clks[GPLL], priv->cru,
+					    GPLL, rate);
+		priv->gpll_hz = rockchip_pll_get_rate(&rk3562_pll_clks[GPLL],
+						      priv->cru, GPLL);
+		break;
+
+	case PLL_CPLL:
+		ret = rockchip_pll_set_rate(&rk3562_pll_clks[CPLL], priv->cru,
+					    CPLL, rate);
+		priv->gpll_hz = rockchip_pll_get_rate(&rk3562_pll_clks[CPLL],
+						      priv->cru, CPLL);
+		break;
+	case PLL_VPLL:
+		ret = rockchip_pll_set_rate(&rk3562_pll_clks[VPLL], priv->cru,
+					    VPLL, rate);
+		priv->vpll_hz = rockchip_pll_get_rate(&rk3562_pll_clks[VPLL],
+						      priv->cru, VPLL);
+		break;
+	case PLL_HPLL:
+		ret = rockchip_pll_set_rate(&rk3562_pll_clks[HPLL], priv->cru,
+					    HPLL, rate);
+		priv->hpll_hz = rockchip_pll_get_rate(&rk3562_pll_clks[HPLL],
+						      priv->cru, HPLL);
+		break;
+	case ACLK_BUS:
+	case HCLK_BUS:
+	case PCLK_BUS:
+		ret = rk3562_bus_set_rate(priv, clk->id, rate);
+		break;
+	case ACLK_PERI:
+	case HCLK_PERI:
+	case PCLK_PERI:
+		ret = rk3562_peri_set_rate(priv, clk->id, rate);
+		break;
+	case CLK_PMU0_I2C0:
+	case CLK_I2C:
+	case CLK_I2C1:
+	case CLK_I2C2:
+	case CLK_I2C3:
+	case CLK_I2C4:
+	case CLK_I2C5:
+		ret = rk3562_i2c_set_rate(priv, clk->id, rate);
+		break;
+	case SCLK_PMU1_UART0:
+	case SCLK_UART1:
+	case SCLK_UART2:
+	case SCLK_UART3:
+	case SCLK_UART4:
+	case SCLK_UART5:
+	case SCLK_UART6:
+	case SCLK_UART7:
+	case SCLK_UART8:
+	case SCLK_UART9:
+		ret = rk3562_uart_set_rate(priv, clk->id, rate);
+		break;
+	case CLK_PMU1_PWM0:
+	case CLK_PWM1_PERI:
+	case CLK_PWM2_PERI:
+	case CLK_PWM3_PERI:
+		ret = rk3562_pwm_set_rate(priv, clk->id, rate);
+		break;
+	case CLK_PMU1_SPI0:
+	case CLK_SPI1:
+	case CLK_SPI2:
+		ret = rk3562_spi_set_rate(priv, clk->id, rate);
+		break;
+	case CLK_TSADC:
+	case CLK_TSADC_TSEN:
+		ret = rk3562_tsadc_set_rate(priv, clk->id, rate);
+		break;
+	case CLK_SARADC:
+	case CLK_SARADC_VCCIO156:
+		ret = rk3562_saradc_set_rate(priv, clk->id, rate);
+		break;
+	case SCLK_SFC:
+		ret = rk3562_sfc_set_rate(priv, rate);
+		break;
+	case CCLK_EMMC:
+	case BCLK_EMMC:
+		ret = rk3562_emmc_set_rate(priv, clk->id, rate);
+		break;
+	case HCLK_SDMMC0:
+	case HCLK_SDMMC1:
+	case CCLK_SDMMC0:
+	case CCLK_SDMMC1:
+		ret = rk3562_sdmmc_set_rate(priv, clk->id, rate);
+		break;
+	case ACLK_VOP:
+	case DCLK_VOP:
+	case DCLK_VOP1:
+		ret = rk3562_vop_set_rate(priv, clk->id, rate);
+		break;
+	case CLK_GMAC_125M_CRU_I:
+	case CLK_GMAC_50M_CRU_I:
+	case CLK_GMAC_ETH_OUT2IO:
+	case CLK_MAC100_50M_MATRIX:
+		ret = rk3562_gmac_set_rate(priv, clk->id, rate);
+		break;
+	default:
+		return -ENOENT;
+	}
+
+	return ret;
+};
+
+#define ROCKCHIP_MMC_DELAY_SEL		BIT(11)
+#define ROCKCHIP_MMC_DEGREE_SHIFT	1
+#define ROCKCHIP_MMC_DEGREE_MASK	(0x3 << ROCKCHIP_MMC_DEGREE_SHIFT)
+#define ROCKCHIP_MMC_DELAYNUM_SHIFT	3
+#define ROCKCHIP_MMC_DELAYNUM_MASK	(0xff << ROCKCHIP_MMC_DELAYNUM_SHIFT)
+#define PSECS_PER_SEC 1000000000000LL
+
+/*
+ * Each fine delay is between 44ps-77ps. Assume each fine delay is 60ps to
+ * simplify calculations. So 45degs could be anywhere between 33deg and 57.8deg.
+ */
+#define ROCKCHIP_MMC_DELAY_ELEMENT_PSEC 60
+
+int rk3562_mmc_get_phase(struct clk *clk)
+{
+	struct rk3562_clk_priv *priv = dev_get_priv(clk->dev);
+	struct rk3562_cru *cru = priv->cru;
+	u32 raw_value, delay_num;
+	u16 degrees = 0;
+	ulong rate;
+
+	rate = rk3562_clk_get_rate(clk);
+	if (rate < 0)
+		return rate;
+
+	if (clk->id == SCLK_SDMMC0_SAMPLE)
+		raw_value = readl(&cru->sdmmc0_con[1]);
+	else if (clk->id == SCLK_SDMMC0_SAMPLE)
+		raw_value = readl(&cru->sdmmc1_con[1]);
+	else
+		return -ENONET;
+
+	raw_value &= ROCKCHIP_MMC_DEGREE_MASK;
+	degrees = (raw_value >>  ROCKCHIP_MMC_DEGREE_SHIFT) * 90;
+
+	if (raw_value & ROCKCHIP_MMC_DELAY_SEL) {
+		/* degrees/delaynum * 10000 */
+		unsigned long factor = (ROCKCHIP_MMC_DELAY_ELEMENT_PSEC / 10) *
+					36 * (rate / 1000000);
+
+		delay_num = (raw_value & ROCKCHIP_MMC_DELAYNUM_MASK);
+		delay_num >>= ROCKCHIP_MMC_DELAYNUM_SHIFT;
+		degrees += DIV_ROUND_CLOSEST(delay_num * factor, 10000);
+	}
+
+	return degrees % 360;
+}
+
+int rk3562_mmc_set_phase(struct clk *clk, u32 degrees)
+{
+	struct rk3562_clk_priv *priv = dev_get_priv(clk->dev);
+	struct rk3562_cru *cru = priv->cru;
+	u8 nineties, remainder, delay_num;
+	u32 raw_value, delay;
+	ulong rate;
+
+	rate = rk3562_clk_get_rate(clk);
+	if (rate < 0)
+		return rate;
+
+	nineties = degrees / 90;
+	remainder = (degrees % 90);
+
+	/*
+	 * Convert to delay; do a little extra work to make sure we
+	 * don't overflow 32-bit / 64-bit numbers.
+	 */
+	delay = 10000000; /* PSECS_PER_SEC / 10000 / 10 */
+	delay *= remainder;
+	delay = DIV_ROUND_CLOSEST(delay, (rate / 1000) * 36 *
+				(ROCKCHIP_MMC_DELAY_ELEMENT_PSEC / 10));
+
+	delay_num = (u8)min_t(u32, delay, 255);
+
+	raw_value = delay_num ? ROCKCHIP_MMC_DELAY_SEL : 0;
+	raw_value |= delay_num << ROCKCHIP_MMC_DELAYNUM_SHIFT;
+	raw_value |= nineties << ROCKCHIP_MMC_DEGREE_SHIFT;
+
+	if (clk->id == SCLK_SDMMC0_SAMPLE)
+		writel(raw_value | 0xffff0000, &cru->sdmmc0_con[1]);
+	else
+		writel(raw_value | 0xffff0000, &cru->sdmmc1_con[1]);
+
+	debug("mmc set_phase(%d) delay_nums=%u reg=%#x actual_degrees=%d\n",
+	      degrees, delay_num, raw_value, rk3562_mmc_get_phase(clk));
+
+	return 0;
+}
+
+static struct clk_ops rk3562_clk_ops = {
+	.get_rate = rk3562_clk_get_rate,
+	.set_rate = rk3562_clk_set_rate,
+};
+
+static void rk3562_clk_init(struct rk3562_clk_priv *priv)
+{
+	int ret;
+
+	priv->sync_kernel = false;
+	if (!priv->armclk_enter_hz)
+		priv->armclk_enter_hz =
+			rockchip_pll_get_rate(&rk3562_pll_clks[APLL],
+					      priv->cru, APLL);
+
+	if (!priv->armclk_init_hz) {
+#if defined(CONFIG_SPL_BUILD) || defined(CONFIG_SUPPORT_USBPLUG)
+		ret = rk3562_armclk_set_rate(priv, APLL_HZ);
+		if (!ret)
+			priv->armclk_init_hz = APLL_HZ;
+
+#else
+		struct clk clk;
+
+		ret = rockchip_get_scmi_clk(&clk.dev);
+		if (ret) {
+			printf("Failed to get scmi clk dev\n");
+			return;
+		}
+
+		clk.id = ARMCLK;
+		ret = clk_set_rate(&clk, CPU_PVTPLL_HZ);
+		if (ret < 0) {
+			printf("Failed to set scmi cpu %dhz\n", CPU_PVTPLL_HZ);
+			return;
+		} else {
+			priv->armclk_init_hz = CPU_PVTPLL_HZ;
+		}
+#endif
+	}
+	if (priv->cpll_hz != CPLL_HZ) {
+		ret = rockchip_pll_set_rate(&rk3562_pll_clks[CPLL], priv->cru,
+					    CPLL, CPLL_HZ);
+		if (!ret)
+			priv->cpll_hz = CPLL_HZ;
+	}
+
+	if (priv->gpll_hz != GPLL_HZ) {
+		ret = rockchip_pll_set_rate(&rk3562_pll_clks[GPLL], priv->cru,
+					    GPLL, GPLL_HZ);
+		if (!ret)
+			priv->gpll_hz = GPLL_HZ;
+	}
+
+	if (priv->hpll_hz != HPLL_HZ) {
+		ret = rockchip_pll_set_rate(&rk3562_pll_clks[HPLL], priv->cru,
+					    HPLL, HPLL_HZ);
+		if (!ret)
+			priv->hpll_hz = HPLL_HZ;
+	}
+}
+
+static int rk3562_clk_probe(struct udevice *dev)
+{
+	struct rk3562_clk_priv *priv = dev_get_priv(dev);
+	int ret;
+
+	rk3562_clk_init(priv);
+
+	/* Process 'assigned-{clocks/clock-parents/clock-rates}' properties */
+	ret = clk_set_defaults(dev,1);
+	if (ret)
+		debug("%s clk_set_defaults failed %d\n", __func__, ret);
+	else
+		priv->sync_kernel = true;
+
+	return 0;
+}
+
+static int rk3562_clk_ofdata_to_platdata(struct udevice *dev)
+{
+	struct rk3562_clk_priv *priv = dev_get_priv(dev);
+
+	priv->cru = dev_read_addr_ptr(dev);
+
+	return 0;
+}
+
+static int rk3562_clk_bind(struct udevice *dev)
+{
+	struct udevice *sys_child;
+	struct sysreset_reg *priv;
+	int ret;
+
+	/* The reset driver does not have a device node, so bind it here */
+	ret = device_bind_driver(dev, "rockchip_sysreset", "sysreset",
+				 &sys_child);
+	if (ret) {
+		debug("Warning: No sysreset driver: ret=%d\n", ret);
+	} else {
+		priv = malloc(sizeof(struct sysreset_reg));
+		priv->glb_srst_fst_value = offsetof(struct rk3562_cru,
+						    glb_srst_fst);
+		priv->glb_srst_snd_value = offsetof(struct rk3562_cru,
+						    glb_srst_snd);
+		sys_child->priv_ = priv;
+	}
+
+
+#if CONFIG_IS_ENABLED(RESET_ROCKCHIP)
+	
+	ret = offsetof(struct rk3562_cru, softrst_con[0]);
+	ret = rk3562_reset_bind_lut(dev, ret, 28);
+	if (ret)
+		debug("Warning: software reset driver bind failed\n");
+	
+#endif
+
+	return 0;
+}
+
+static const struct udevice_id rk3562_clk_ids[] = {
+	{ .compatible = "rockchip,rk3562-cru" },
+	{ }
+};
+
+U_BOOT_DRIVER(rockchip_rk3562_cru) = {
+	.name		= "rockchip_rk3562_cru",
+	.id		= UCLASS_CLK,
+	.of_match	= rk3562_clk_ids,
+	.priv_auto = sizeof(struct rk3562_clk_priv),
+	.of_to_plat = rk3562_clk_ofdata_to_platdata,
+	.ops		= &rk3562_clk_ops,
+	.bind		= rk3562_clk_bind,
+	.probe		= rk3562_clk_probe,
+};
+
+/* spl scmi clk */
+#ifdef CONFIG_SPL_BUILD
+
+static ulong rk3562_crypto_get_rate(struct rk3562_clk_priv *priv, ulong clk_id)
+{
+	struct rk3562_cru *cru = priv->cru;
+	u32 sel, con;
+	ulong rate;
+
+	con = readl(&cru->periclksel_con[43]);
+	switch (clk_id) {
+	case CLK_CORE_CRYPTO:
+		sel = (con & CLK_CORE_CRYPTO_SEL_MASK) >>
+		       CLK_CORE_CRYPTO_SEL_SHIFT;
+		if (sel == CLK_CORE_CRYPTO_SEL_200M)
+			rate = 200 * MHz;
+		else if (sel == CLK_CORE_CRYPTO_SEL_100M)
+			rate = 100 * MHz;
+		else
+			rate = OSC_HZ;
+		break;
+	case CLK_PKA_CRYPTO:
+		sel = (con & CLK_PKA_CRYPTO_SEL_MASK) >>
+		       CLK_PKA_CRYPTO_SEL_SHIFT;
+		if (sel == CLK_PKA_CRYPTO_SEL_300M)
+			rate = 300 * MHz;
+		else if (sel == CLK_PKA_CRYPTO_SEL_200M)
+			rate = 200 * MHz;
+		else if (sel == CLK_PKA_CRYPTO_SEL_100M)
+			rate = 100 * MHz;
+		else
+			rate = OSC_HZ;
+		break;
+	default:
+		return -ENOENT;
+	}
+
+	return rate;
+}
+
+static ulong rk3562_crypto_set_rate(struct rk3562_clk_priv *priv, ulong clk_id,
+				    ulong rate)
+{
+	struct rk3562_cru *cru = priv->cru;
+	u32 mask, shift, sel;
+
+	switch (clk_id) {
+	case CLK_CORE_CRYPTO:
+		mask = CLK_CORE_CRYPTO_SEL_MASK;
+		shift =	CLK_CORE_CRYPTO_SEL_SHIFT;
+		if (rate == 200 * MHz)
+			sel = CLK_CORE_CRYPTO_SEL_200M;
+		else if (rate == 100 * MHz)
+			sel = CLK_CORE_CRYPTO_SEL_100M;
+		else
+			sel = CLK_CORE_CRYPTO_SEL_24M;
+		break;
+	case CLK_PKA_CRYPTO:
+		mask = CLK_PKA_CRYPTO_SEL_MASK;
+		shift =	CLK_PKA_CRYPTO_SEL_SHIFT;
+		if (rate == 300 * MHz)
+			sel = CLK_PKA_CRYPTO_SEL_300M;
+		else if (rate == 200 * MHz)
+			sel = CLK_PKA_CRYPTO_SEL_200M;
+		else if (rate == 100 * MHz)
+			sel = CLK_PKA_CRYPTO_SEL_100M;
+		else
+			sel = CLK_PKA_CRYPTO_SEL_24M;
+		break;
+	default:
+		return -ENOENT;
+	}
+	rk_clrsetreg(&cru->periclksel_con[43], mask, sel << shift);
+
+	return rk3562_crypto_get_rate(priv, clk_id);
+}
+
+static ulong rk3562_clk_scmi_get_rate(struct clk *clk)
+{
+	struct rk3562_clk_priv *priv = dev_get_priv(clk->dev);
+
+	switch (clk->id) {
+	case CLK_CORE_CRYPTO:
+	case CLK_PKA_CRYPTO:
+		return rk3562_crypto_get_rate(priv, clk->id);
+	default:
+		return -ENOENT;
+	}
+};
+
+static ulong rk3562_clk_scmi_set_rate(struct clk *clk, ulong rate)
+{
+	struct rk3562_clk_priv *priv = dev_get_priv(clk->dev);
+
+	switch (clk->id) {
+	case CLK_CORE_CRYPTO:
+	case CLK_PKA_CRYPTO:
+		return rk3562_crypto_set_rate(priv, clk->id, rate);
+	default:
+		return -ENOENT;
+	}
+	return 0;
+};
+
+static int rk3562_scmi_clk_ofdata_to_platdata(struct udevice *dev)
+{
+	struct rk3562_clk_priv *priv = dev_get_priv(dev);
+
+	priv->cru = (struct rk3562_cru *)0xff100000;
+
+	return 0;
+}
+
+/* A fake scmi driver for SPL/TPL where smccc agent is not available. */
+static const struct clk_ops scmi_clk_ops = {
+	.get_rate = rk3562_clk_scmi_get_rate,
+	.set_rate = rk3562_clk_scmi_set_rate,
+};
+
+U_BOOT_DRIVER(scmi_clock) = {
+	.name = "scmi_clk",
+	.id = UCLASS_CLK,
+	.ops = &scmi_clk_ops,
+	.priv_auto = sizeof(struct rk3562_clk_priv),
+	.of_to_plat = rk3562_scmi_clk_ofdata_to_platdata,
+};
+#endif
+
diff --git a/drivers/misc/rk3562-secure-otp.S b/drivers/misc/rk3562-secure-otp.S
new file mode 100644
index 00000000000..e3b3f34e506
--- /dev/null
+++ b/drivers/misc/rk3562-secure-otp.S
@@ -0,0 +1,15906 @@
+	.arch armv8-a+nosimd
+	.file	"rk3562-secure-otp.c"
+	.text
+.Ltext0:
+	.cfi_sections	.debug_frame
+	.section	.text.rk3562_spl_rockchip_otp_stop,"ax",@progbits
+	.align	2
+	.type	rk3562_spl_rockchip_otp_stop, %function
+rk3562_spl_rockchip_otp_stop:
+.LFB263:
+	.file 1 "drivers/misc/rk3562-secure-otp.c"
+	.loc 1 81 0
+	.cfi_startproc
+.LVL0:
+.LBB22:
+	.loc 1 82 0
+#APP
+// 82 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	mov	w1, 524288
+.LVL1:
+	str	w1, [x0]
+	ret
+.LBE22:
+	.cfi_endproc
+.LFE263:
+	.size	rk3562_spl_rockchip_otp_stop, .-rk3562_spl_rockchip_otp_stop
+	.section	.text.secure_otp_ioctl,"ax",@progbits
+	.align	2
+	.type	secure_otp_ioctl, %function
+secure_otp_ioctl:
+.LFB276:
+	.loc 1 697 0
+	.cfi_startproc
+.LVL2:
+	.loc 1 700 0
+	mov	x0, 27908
+.LVL3:
+	cmp	x1, x0
+	bne	.L6
+.LVL4:
+.LBB23:
+.LBB24:
+	.loc 1 689 0
+	mov	w0, 8
+	str	w0, [x2]
+.LVL5:
+.LBE24:
+.LBE23:
+	.loc 1 702 0
+	mov	w0, 0
+	.loc 1 703 0
+	ret
+.LVL6:
+.L6:
+	.loc 1 698 0
+	mov	w0, -22
+	.loc 1 709 0
+	ret
+	.cfi_endproc
+.LFE276:
+	.size	secure_otp_ioctl, .-secure_otp_ioctl
+	.section	.text.secure_otp_write,"ax",@progbits
+	.align	2
+	.type	secure_otp_write, %function
+secure_otp_write:
+.LFB274:
+	.loc 1 681 0
+	.cfi_startproc
+.LVL7:
+	stp	x29, x30, [sp, -48]!
+	.cfi_def_cfa_offset 48
+	.cfi_offset 29, -48
+	.cfi_offset 30, -40
+	add	x29, sp, 0
+	.cfi_def_cfa_register 29
+	stp	x19, x20, [sp, 16]
+	.cfi_offset 19, -32
+	.cfi_offset 20, -24
+	mov	x19, x0
+	stp	x21, x22, [sp, 32]
+	.cfi_offset 21, -16
+	.cfi_offset 22, -8
+	.loc 1 681 0
+	mov	w20, w1
+	mov	x21, x2
+	mov	w22, w3
+	.loc 1 682 0
+	bl	dev_get_driver_data
+.LVL8:
+	.loc 1 684 0
+	ldr	x4, [x0, 8]
+	mov	w3, w22
+	mov	x2, x21
+	mov	w1, w20
+	mov	x0, x19
+.LVL9:
+	.loc 1 685 0
+	ldp	x21, x22, [sp, 32]
+.LVL10:
+	ldp	x19, x20, [sp, 16]
+.LVL11:
+	ldp	x29, x30, [sp], 48
+	.cfi_restore 30
+	.cfi_restore 29
+	.cfi_restore 21
+	.cfi_restore 22
+	.cfi_restore 19
+	.cfi_restore 20
+	.cfi_def_cfa 31, 0
+	.loc 1 684 0
+	br	x4
+.LVL12:
+	.cfi_endproc
+.LFE274:
+	.size	secure_otp_write, .-secure_otp_write
+	.section	.text.secure_otp_read,"ax",@progbits
+	.align	2
+	.type	secure_otp_read, %function
+secure_otp_read:
+.LFB273:
+	.loc 1 673 0
+	.cfi_startproc
+.LVL13:
+	stp	x29, x30, [sp, -48]!
+	.cfi_def_cfa_offset 48
+	.cfi_offset 29, -48
+	.cfi_offset 30, -40
+	add	x29, sp, 0
+	.cfi_def_cfa_register 29
+	stp	x19, x20, [sp, 16]
+	.cfi_offset 19, -32
+	.cfi_offset 20, -24
+	mov	x19, x0
+	stp	x21, x22, [sp, 32]
+	.cfi_offset 21, -16
+	.cfi_offset 22, -8
+	.loc 1 673 0
+	mov	w20, w1
+	mov	x21, x2
+	mov	w22, w3
+	.loc 1 674 0
+	bl	dev_get_driver_data
+.LVL14:
+	.loc 1 676 0
+	ldr	x4, [x0]
+	mov	w3, w22
+	mov	x2, x21
+	mov	w1, w20
+	mov	x0, x19
+.LVL15:
+	.loc 1 677 0
+	ldp	x21, x22, [sp, 32]
+.LVL16:
+	ldp	x19, x20, [sp, 16]
+.LVL17:
+	ldp	x29, x30, [sp], 48
+	.cfi_restore 30
+	.cfi_restore 29
+	.cfi_restore 21
+	.cfi_restore 22
+	.cfi_restore 19
+	.cfi_restore 20
+	.cfi_def_cfa 31, 0
+	.loc 1 676 0
+	br	x4
+.LVL18:
+	.cfi_endproc
+.LFE273:
+	.size	secure_otp_read, .-secure_otp_read
+	.section	.text.rockchip_secure_otp_ofdata_to_platdata,"ax",@progbits
+	.align	2
+	.type	rockchip_secure_otp_ofdata_to_platdata, %function
+rockchip_secure_otp_ofdata_to_platdata:
+.LFB277:
+	.loc 1 718 0
+	.cfi_startproc
+.LVL19:
+	stp	x29, x30, [sp, -32]!
+	.cfi_def_cfa_offset 32
+	.cfi_offset 29, -32
+	.cfi_offset 30, -24
+	add	x29, sp, 0
+	.cfi_def_cfa_register 29
+	stp	x19, x20, [sp, 16]
+	.cfi_offset 19, -16
+	.cfi_offset 20, -8
+	.loc 1 718 0
+	mov	x20, x0
+	.loc 1 719 0
+	bl	dev_get_platdata
+.LVL20:
+	mov	x19, x0
+.LVL21:
+	.loc 1 721 0
+	mov	x0, x20
+.LVL22:
+	bl	dev_read_addr_ptr
+.LVL23:
+	.loc 1 722 0
+	mov	w2, 0
+	adrp	x1, .LC0
+	.loc 1 721 0
+	str	x0, [x19]
+	.loc 1 722 0
+	add	x1, x1, :lo12:.LC0
+	mov	x0, x20
+	bl	dev_read_u32_default
+.LVL24:
+	.loc 1 723 0
+	uxtw	x0, w0
+	str	x0, [x19, 8]
+	.loc 1 724 0
+	mov	w2, 0
+	mov	x0, x20
+	adrp	x1, .LC1
+	add	x1, x1, :lo12:.LC1
+	bl	dev_read_u32_default
+.LVL25:
+	.loc 1 725 0
+	uxtw	x0, w0
+	str	x0, [x19, 16]
+	.loc 1 726 0
+	mov	w2, 0
+	mov	x0, x20
+	adrp	x1, .LC2
+	add	x1, x1, :lo12:.LC2
+	bl	dev_read_u32_default
+.LVL26:
+	.loc 1 727 0
+	uxtw	x0, w0
+	str	x0, [x19, 24]
+	.loc 1 730 0
+	mov	w0, 0
+	ldp	x19, x20, [sp, 16]
+.LVL27:
+	ldp	x29, x30, [sp], 32
+	.cfi_restore 30
+	.cfi_restore 29
+	.cfi_restore 19
+	.cfi_restore 20
+	.cfi_def_cfa 31, 0
+	ret
+	.cfi_endproc
+.LFE277:
+	.size	rockchip_secure_otp_ofdata_to_platdata, .-rockchip_secure_otp_ofdata_to_platdata
+	.section	.text.rk3562_spl_rockchip_otp_start,"ax",@progbits
+	.align	2
+	.type	rk3562_spl_rockchip_otp_start, %function
+rk3562_spl_rockchip_otp_start:
+.LFB262:
+	.loc 1 69 0
+	.cfi_startproc
+.LVL28:
+	stp	x29, x30, [sp, -32]!
+	.cfi_def_cfa_offset 32
+	.cfi_offset 29, -32
+	.cfi_offset 30, -24
+	add	x29, sp, 0
+	.cfi_def_cfa_register 29
+	str	x19, [sp, 16]
+	.cfi_offset 19, -16
+	.loc 1 69 0
+	mov	x19, x1
+.LBB25:
+	.loc 1 71 0
+#APP
+// 71 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	mov	w1, 524296
+.LVL29:
+	str	w1, [x0]
+.LVL30:
+.LBE25:
+.LBB26:
+	.loc 1 72 0
+#APP
+// 72 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	mov	w0, 1048592
+.LVL31:
+	str	w0, [x19]
+.LBE26:
+	.loc 1 73 0
+	mov	x0, 2
+	bl	udelay
+.LVL32:
+.LBB27:
+	.loc 1 74 0
+#APP
+// 74 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	mov	w0, 1048576
+	str	w0, [x19]
+.LBE27:
+	.loc 1 76 0
+	ldr	x19, [sp, 16]
+.LVL33:
+	.loc 1 75 0
+	mov	x0, 1
+	.loc 1 76 0
+	ldp	x29, x30, [sp], 32
+	.cfi_restore 30
+	.cfi_restore 29
+	.cfi_restore 19
+	.cfi_def_cfa 31, 0
+	.loc 1 75 0
+	b	udelay
+.LVL34:
+	.cfi_endproc
+.LFE262:
+	.size	rk3562_spl_rockchip_otp_start, .-rk3562_spl_rockchip_otp_start
+	.section	.text.rockchip_secure_otp_check_flag.isra.0,"ax",@progbits
+	.align	2
+	.type	rockchip_secure_otp_check_flag.isra.0, %function
+rockchip_secure_otp_check_flag.isra.0:
+.LFB278:
+	.loc 1 129 0
+	.cfi_startproc
+	stp	x29, x30, [sp, -32]!
+	.cfi_def_cfa_offset 32
+	.cfi_offset 29, -32
+	.cfi_offset 30, -24
+	add	x29, sp, 0
+	.cfi_def_cfa_register 29
+	stp	x19, x20, [sp, 16]
+	.cfi_offset 19, -16
+	.cfi_offset 20, -8
+	.loc 1 129 0
+	mov	w19, 34465
+	mov	x20, x0
+	movk	w19, 0x1, lsl 16
+.L17:
+.LVL35:
+.LBB28:
+	.loc 1 136 0
+	ldr	x0, [x20]
+	ldr	w1, [x0, 44]
+.LVL36:
+#APP
+// 136 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+.LVL37:
+#NO_APP
+.LBE28:
+	.loc 1 137 0
+	and	w0, w1, 16
+	tbz	x1, 4, .L15
+	.loc 1 140 0
+	subs	w19, w19, #1
+.LVL38:
+	beq	.L18
+.LVL39:
+	.loc 1 146 0
+	mov	x0, 1
+	bl	udelay
+.LVL40:
+	b	.L17
+.LVL41:
+.L18:
+	.loc 1 141 0
+	mov	w0, -1
+.LVL42:
+.L15:
+	.loc 1 150 0
+	ldp	x19, x20, [sp, 16]
+	ldp	x29, x30, [sp], 32
+	.cfi_restore 30
+	.cfi_restore 29
+	.cfi_restore 19
+	.cfi_restore 20
+	.cfi_def_cfa 31, 0
+	ret
+	.cfi_endproc
+.LFE278:
+	.size	rockchip_secure_otp_check_flag.isra.0, .-rockchip_secure_otp_check_flag.isra.0
+	.section	.text.rockchip_secure_otp_wait_flag.isra.1,"ax",@progbits
+	.align	2
+	.type	rockchip_secure_otp_wait_flag.isra.1, %function
+rockchip_secure_otp_wait_flag.isra.1:
+.LFB279:
+	.loc 1 106 0
+	.cfi_startproc
+	stp	x29, x30, [sp, -32]!
+	.cfi_def_cfa_offset 32
+	.cfi_offset 29, -32
+	.cfi_offset 30, -24
+	add	x29, sp, 0
+	.cfi_def_cfa_register 29
+	stp	x19, x20, [sp, 16]
+	.cfi_offset 19, -16
+	.cfi_offset 20, -8
+	.loc 1 106 0
+	mov	x20, x0
+	mov	w19, 20001
+.L25:
+.LVL43:
+.LBB29:
+	.loc 1 113 0
+	ldr	x0, [x20]
+	ldr	w0, [x0, 44]
+.LVL44:
+#APP
+// 113 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+.LVL45:
+#NO_APP
+.LBE29:
+	.loc 1 114 0
+	tbnz	x0, 4, .L26
+	.loc 1 117 0
+	subs	w19, w19, #1
+.LVL46:
+	beq	.L27
+	.loc 1 122 0
+	mov	x0, 1
+.LVL47:
+	bl	udelay
+.LVL48:
+	b	.L25
+.LVL49:
+.L26:
+	.loc 1 110 0
+	mov	w0, 0
+.LVL50:
+.L23:
+	.loc 1 127 0
+	ldp	x19, x20, [sp, 16]
+	ldp	x29, x30, [sp], 32
+	.cfi_remember_state
+	.cfi_restore 30
+	.cfi_restore 29
+	.cfi_restore 19
+	.cfi_restore 20
+	.cfi_def_cfa 31, 0
+	ret
+.LVL51:
+.L27:
+	.cfi_restore_state
+	.loc 1 118 0
+	mov	w0, -1
+.LVL52:
+	b	.L23
+	.cfi_endproc
+.LFE279:
+	.size	rockchip_secure_otp_wait_flag.isra.1, .-rockchip_secure_otp_wait_flag.isra.1
+	.section	.text.rockchip_secure_otp_wait_status.isra.2,"ax",@progbits
+	.align	2
+	.type	rockchip_secure_otp_wait_status.isra.2, %function
+rockchip_secure_otp_wait_status.isra.2:
+.LFB280:
+	.loc 1 86 0
+	.cfi_startproc
+.LVL53:
+	stp	x29, x30, [sp, -48]!
+	.cfi_def_cfa_offset 48
+	.cfi_offset 29, -48
+	.cfi_offset 30, -40
+	add	x29, sp, 0
+	.cfi_def_cfa_register 29
+	stp	x19, x20, [sp, 16]
+	.cfi_offset 19, -32
+	.cfi_offset 20, -24
+	mov	w19, w1
+	str	x21, [sp, 32]
+	.cfi_offset 21, -16
+	.loc 1 86 0
+	mov	x21, x0
+	mov	w20, 10000
+.LVL54:
+.L30:
+.LBB36:
+	.loc 1 91 0
+	ldr	x0, [x21]
+	ldr	w0, [x0, 772]
+.LVL55:
+#APP
+// 91 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+.LBE36:
+	tst	w0, w19
+	beq	.L32
+.LBB37:
+	.loc 1 101 0
+	orr	w19, w19, -65536
+.LVL56:
+#APP
+// 101 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x21]
+.LVL57:
+	str	w19, [x0, 772]
+.LBE37:
+	.loc 1 103 0
+	mov	w0, 0
+	b	.L29
+.LVL58:
+.L32:
+	.loc 1 92 0
+	mov	x0, 1
+.LVL59:
+	bl	udelay
+.LVL60:
+	.loc 1 94 0
+	subs	w20, w20, #1
+.LVL61:
+	bne	.L30
+.LVL62:
+.LBB38:
+.LBB39:
+	.loc 1 95 0
+	adrp	x1, .LANCHOR0
+	adrp	x0, .LC3
+	add	x1, x1, :lo12:.LANCHOR0
+	add	x0, x0, :lo12:.LC3
+	bl	printf
+.LVL63:
+	mov	w0, -110
+.LVL64:
+.L29:
+.LBE39:
+.LBE38:
+	.loc 1 104 0
+	ldp	x19, x20, [sp, 16]
+.LVL65:
+	ldr	x21, [sp, 32]
+	ldp	x29, x30, [sp], 48
+	.cfi_restore 30
+	.cfi_restore 29
+	.cfi_restore 21
+	.cfi_restore 19
+	.cfi_restore 20
+	.cfi_def_cfa 31, 0
+	ret
+	.cfi_endproc
+.LFE280:
+	.size	rockchip_secure_otp_wait_status.isra.2, .-rockchip_secure_otp_wait_status.isra.2
+	.section	.text.rk3562_secure_otp_write_2_bytes_noecc,"ax",@progbits
+	.align	2
+	.type	rk3562_secure_otp_write_2_bytes_noecc, %function
+rk3562_secure_otp_write_2_bytes_noecc:
+.LFB269:
+	.loc 1 240 0
+	.cfi_startproc
+.LVL66:
+	stp	x29, x30, [sp, -96]!
+	.cfi_def_cfa_offset 96
+	.cfi_offset 29, -96
+	.cfi_offset 30, -88
+	add	x29, sp, 0
+	.cfi_def_cfa_register 29
+	stp	x23, x24, [sp, 48]
+	.cfi_offset 23, -48
+	.cfi_offset 24, -40
+	mov	w24, w2
+	stp	x19, x20, [sp, 16]
+	.cfi_offset 19, -80
+	.cfi_offset 20, -72
+	.loc 1 244 0
+	asr	w20, w24, 1
+	.loc 1 240 0
+	stp	x21, x22, [sp, 32]
+	.cfi_offset 21, -64
+	.cfi_offset 22, -56
+	and	w21, w3, 65535
+	stp	x25, x26, [sp, 64]
+	.cfi_offset 25, -32
+	.cfi_offset 26, -24
+	mov	x26, x1
+	stp	x27, x28, [sp, 80]
+	.cfi_offset 27, -16
+	.cfi_offset 28, -8
+	.loc 1 242 0
+	bl	dev_get_driver_data
+.LVL67:
+	.loc 1 245 0
+	cmp	w20, 447
+	bgt	.L43
+	mov	x23, x0
+	.loc 1 249 0
+	sub	w0, w20, #416
+.LVL68:
+	cmp	w0, 15
+	ccmp	w20, 16, 4, hi
+	beq	.L37
+	.loc 1 252 0
+	adrp	x0, .LC4
+	and	w1, w24, -2
+	add	x0, x0, :lo12:.LC4
+	bl	printf
+.LVL69:
+.L43:
+	.loc 1 246 0
+	mov	w0, -1
+.LVL70:
+.L35:
+	.loc 1 446 0
+	ldp	x19, x20, [sp, 16]
+.LVL71:
+	ldp	x21, x22, [sp, 32]
+	ldp	x23, x24, [sp, 48]
+	ldp	x25, x26, [sp, 64]
+.LVL72:
+	ldp	x27, x28, [sp, 80]
+	ldp	x29, x30, [sp], 96
+	.cfi_remember_state
+	.cfi_restore 30
+	.cfi_restore 29
+	.cfi_restore 27
+	.cfi_restore 28
+	.cfi_restore 25
+	.cfi_restore 26
+	.cfi_restore 23
+	.cfi_restore 24
+	.cfi_restore 21
+	.cfi_restore 22
+	.cfi_restore 19
+	.cfi_restore 20
+	.cfi_def_cfa 31, 0
+	ret
+.LVL73:
+.L37:
+	.cfi_restore_state
+	.loc 1 256 0
+	cbz	w21, .L44
+	.loc 1 259 0
+	ldr	x6, [x23, 16]
+	mov	w3, w20
+	ldp	x0, x2, [x26, 8]
+	ldr	x1, [x26, 24]
+	blr	x6
+.LVL74:
+.LBB40:
+	.loc 1 262 0
+#APP
+// 262 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x26]
+	mov	w1, 65536
+	str	w1, [x0, 256]
+.LVL75:
+.LBE40:
+.LBB41:
+	.loc 1 263 0
+#APP
+// 263 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x26]
+	mov	w1, 262148
+	str	w1, [x0, 32]
+.LVL76:
+.LBE41:
+.LBB42:
+	.loc 1 264 0
+#APP
+// 264 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x26]
+	mov	w1, -65536
+	str	w1, [x0, 40]
+.LVL77:
+.LBE42:
+.LBB43:
+	.loc 1 265 0
+#APP
+// 265 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x26]
+	mov	w1, 512
+	movk	w1, 0xff00, lsl 16
+	str	w1, [x0, 32]
+.LVL78:
+.LBE43:
+.LBB44:
+	.loc 1 266 0
+#APP
+// 266 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x26]
+	mov	w22, -65534
+	str	w22, [x0, 36]
+.LVL79:
+.LBE44:
+.LBB45:
+	.loc 1 267 0
+#APP
+// 267 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x26]
+	mov	w1, 252
+	str	w1, [x0, 4096]
+.LVL80:
+.LBE45:
+.LBB46:
+	.loc 1 268 0
+#APP
+// 268 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x26]
+	str	wzr, [x0, 4100]
+.LVL81:
+.LBE46:
+.LBB47:
+	.loc 1 269 0
+#APP
+// 269 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x26]
+	str	wzr, [x0, 4104]
+.LVL82:
+.LBE47:
+.LBB48:
+	.loc 1 270 0
+#APP
+// 270 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x26]
+	mov	w19, 65537
+.LBE48:
+	.loc 1 271 0
+	mov	w1, 2
+.LBB49:
+	.loc 1 270 0
+	str	w19, [x0, 32]
+.LBE49:
+	.loc 1 271 0
+	mov	x0, x26
+	bl	rockchip_secure_otp_wait_status.isra.2
+.LVL83:
+	.loc 1 272 0
+	tbz	w0, #31, .L38
+.L40:
+	.loc 1 273 0
+	adrp	x1, .LANCHOR1
+	adrp	x0, .LC5
+.LVL84:
+	add	x1, x1, :lo12:.LANCHOR1
+	add	x0, x0, :lo12:.LC5
+.L46:
+	.loc 1 406 0
+	bl	printf
+.LVL85:
+.L39:
+	.loc 1 442 0
+	ldr	x5, [x23, 24]
+	mov	w3, w20
+	ldp	x0, x2, [x26, 8]
+	ldr	x1, [x26, 24]
+	blr	x5
+.LVL86:
+.L44:
+	.loc 1 257 0
+	mov	w0, 0
+	b	.L35
+.LVL87:
+.L38:
+.LBB50:
+	.loc 1 277 0
+#APP
+// 277 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x26]
+.LVL88:
+	mov	w28, -65522
+	str	w28, [x0, 36]
+.LVL89:
+.LBE50:
+.LBB51:
+	.loc 1 278 0
+#APP
+// 278 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x26]
+	mov	w27, 240
+	str	w27, [x0, 4096]
+.LVL90:
+.LBE51:
+.LBB52:
+	.loc 1 279 0
+#APP
+// 279 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x26]
+	mov	w1, 1
+	str	w1, [x0, 4100]
+.LVL91:
+.LBE52:
+.LBB53:
+	.loc 1 280 0
+#APP
+// 280 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x26]
+	mov	w25, 122
+	str	w25, [x0, 4104]
+.LVL92:
+.LBE53:
+.LBB54:
+	.loc 1 281 0
+#APP
+// 281 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x26]
+	mov	w1, 37
+	str	w1, [x0, 4108]
+.LVL93:
+.LBE54:
+.LBB55:
+	.loc 1 282 0
+#APP
+// 282 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x26]
+	str	wzr, [x0, 4112]
+.LVL94:
+.LBE55:
+.LBB56:
+	.loc 1 283 0
+#APP
+// 283 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x26]
+	str	wzr, [x0, 4116]
+.LVL95:
+.LBE56:
+.LBB57:
+	.loc 1 284 0
+#APP
+// 284 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x26]
+	str	wzr, [x0, 4120]
+.LVL96:
+.LBE57:
+.LBB58:
+	.loc 1 285 0
+#APP
+// 285 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x26]
+	mov	w1, 31
+	str	w1, [x0, 4124]
+.LVL97:
+.LBE58:
+.LBB59:
+	.loc 1 286 0
+#APP
+// 286 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x26]
+	mov	w1, 11
+	str	w1, [x0, 4128]
+.LVL98:
+.LBE59:
+.LBB60:
+	.loc 1 287 0
+#APP
+// 287 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x26]
+	mov	w1, 8
+	str	w1, [x0, 4132]
+.LVL99:
+.LBE60:
+.LBB61:
+	.loc 1 288 0
+#APP
+// 288 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x26]
+	str	wzr, [x0, 4136]
+.LVL100:
+.LBE61:
+.LBB62:
+	.loc 1 289 0
+#APP
+// 289 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x26]
+	str	wzr, [x0, 4140]
+.LVL101:
+.LBE62:
+.LBB63:
+	.loc 1 290 0
+#APP
+// 290 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x26]
+	str	wzr, [x0, 4144]
+.LBE63:
+.LBB64:
+	.loc 1 291 0
+	and	w0, w20, 255
+#APP
+// 291 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x1, [x26]
+.LBE64:
+.LBB65:
+	.loc 1 292 0
+	ubfx	x5, x24, 9, 8
+.LVL102:
+.LBE65:
+.LBB66:
+	.loc 1 291 0
+	str	w0, [x1, 4148]
+.LBE66:
+.LBB67:
+	.loc 1 292 0
+#APP
+// 292 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x26]
+	str	w5, [x0, 4152]
+.LVL103:
+.LBE67:
+.LBB68:
+	.loc 1 293 0
+#APP
+// 293 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x26]
+.LBE68:
+	.loc 1 294 0
+	mov	w1, 2
+.LBB69:
+	.loc 1 293 0
+	str	w19, [x0, 32]
+.LBE69:
+	.loc 1 294 0
+	mov	x0, x26
+	bl	rockchip_secure_otp_wait_status.isra.2
+.LVL104:
+	.loc 1 295 0
+	tbnz	w0, #31, .L40
+.LVL105:
+.LBB70:
+	.loc 1 300 0
+#APP
+// 300 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x26]
+.LVL106:
+	mov	w1, -65535
+	str	w1, [x0, 36]
+.LVL107:
+.LBE70:
+.LBB71:
+	.loc 1 301 0
+#APP
+// 301 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x26]
+	mov	w1, 250
+	str	w1, [x0, 4096]
+.LVL108:
+.LBE71:
+.LBB72:
+	.loc 1 302 0
+#APP
+// 302 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x26]
+	mov	w1, 9
+	str	w1, [x0, 4100]
+.LVL109:
+.LBE72:
+.LBB73:
+	.loc 1 303 0
+#APP
+// 303 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x26]
+.LBE73:
+	.loc 1 304 0
+	mov	w1, 2
+.LBB74:
+	.loc 1 303 0
+	str	w19, [x0, 32]
+.LBE74:
+	.loc 1 304 0
+	mov	x0, x26
+	bl	rockchip_secure_otp_wait_status.isra.2
+.LVL110:
+	.loc 1 305 0
+	tbnz	w0, #31, .L40
+.LVL111:
+.LBB75:
+	.loc 1 310 0
+#APP
+// 310 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x26]
+.LVL112:
+	mov	w1, 14848
+	movk	w1, 0xff00, lsl 16
+	str	w1, [x0, 32]
+.LVL113:
+.LBE75:
+.LBB76:
+	.loc 1 311 0
+#APP
+// 311 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x26]
+	str	w28, [x0, 36]
+.LVL114:
+.LBE76:
+.LBB77:
+	.loc 1 312 0
+#APP
+// 312 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x26]
+	str	w27, [x0, 4096]
+.LVL115:
+.LBE77:
+.LBB78:
+	.loc 1 313 0
+#APP
+// 313 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x26]
+	mov	w1, 1
+	str	w1, [x0, 4100]
+.LVL116:
+.LBE78:
+.LBB79:
+	.loc 1 314 0
+#APP
+// 314 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x26]
+	str	w25, [x0, 4104]
+.LVL117:
+.LBE79:
+.LBB80:
+	.loc 1 315 0
+#APP
+// 315 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x26]
+	mov	w1, 21
+	str	w1, [x0, 4108]
+.LVL118:
+.LBE80:
+.LBB81:
+	.loc 1 316 0
+#APP
+// 316 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x26]
+	mov	w1, 220
+	str	w1, [x0, 4112]
+.LVL119:
+.LBE81:
+.LBB82:
+	.loc 1 317 0
+#APP
+// 317 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x26]
+	mov	w1, 146
+	str	w1, [x0, 4116]
+.LVL120:
+.LBE82:
+.LBB83:
+	.loc 1 318 0
+#APP
+// 318 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x26]
+	mov	w1, 121
+	str	w1, [x0, 4120]
+.LVL121:
+.LBE83:
+.LBB84:
+	.loc 1 319 0
+#APP
+// 319 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x26]
+	mov	w1, 129
+	str	w1, [x0, 4124]
+.LVL122:
+.LBE84:
+.LBB85:
+	.loc 1 320 0
+#APP
+// 320 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x26]
+	mov	w1, 126
+	str	w1, [x0, 4128]
+.LVL123:
+.LBE85:
+.LBB86:
+	.loc 1 321 0
+#APP
+// 321 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x26]
+	mov	w1, 33
+	str	w1, [x0, 4132]
+.LVL124:
+.LBE86:
+.LBB87:
+	.loc 1 322 0
+#APP
+// 322 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x26]
+	mov	w1, 17
+	str	w1, [x0, 4136]
+.LVL125:
+.LBE87:
+.LBB88:
+	.loc 1 323 0
+#APP
+// 323 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x26]
+	mov	w1, 157
+	str	w1, [x0, 4140]
+.LVL126:
+.LBE88:
+.LBB89:
+	.loc 1 324 0
+#APP
+// 324 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x26]
+	mov	w25, 2
+	str	w25, [x0, 4144]
+.LVL127:
+.LBE89:
+.LBB90:
+	.loc 1 325 0
+#APP
+// 325 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x26]
+	str	wzr, [x0, 4148]
+.LVL128:
+.LBE90:
+.LBB91:
+	.loc 1 326 0
+#APP
+// 326 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x26]
+	mov	w1, 64
+	str	w1, [x0, 4152]
+.LVL129:
+.LBE91:
+.LBB92:
+	.loc 1 327 0
+#APP
+// 327 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x26]
+.LBE92:
+	.loc 1 328 0
+	mov	w1, w25
+.LBB93:
+	.loc 1 327 0
+	str	w19, [x0, 32]
+.LBE93:
+	.loc 1 328 0
+	mov	x0, x26
+	bl	rockchip_secure_otp_wait_status.isra.2
+.LVL130:
+	.loc 1 329 0
+	tbnz	w0, #31, .L40
+.LVL131:
+.LBB94:
+	.loc 1 334 0
+#APP
+// 334 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x26]
+.LVL132:
+	str	w22, [x0, 36]
+.LVL133:
+.LBE94:
+.LBB95:
+	.loc 1 335 0
+#APP
+// 335 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x26]
+	mov	w1, 252
+	str	w1, [x0, 4096]
+.LVL134:
+.LBE95:
+.LBB96:
+	.loc 1 336 0
+#APP
+// 336 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x26]
+	mov	w1, 10
+	str	w1, [x0, 4100]
+.LVL135:
+.LBE96:
+.LBB97:
+	.loc 1 337 0
+#APP
+// 337 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x26]
+	mov	w1, 112
+	str	w1, [x0, 4104]
+.LVL136:
+.LBE97:
+.LBB98:
+	.loc 1 338 0
+#APP
+// 338 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x26]
+.LBE98:
+	.loc 1 339 0
+	mov	w1, w25
+.LBB99:
+	.loc 1 338 0
+	str	w19, [x0, 32]
+.LBE99:
+	.loc 1 339 0
+	mov	x0, x26
+	bl	rockchip_secure_otp_wait_status.isra.2
+.LVL137:
+	.loc 1 340 0
+	tbnz	w0, #31, .L40
+.LVL138:
+.LBB100:
+	.loc 1 345 0
+#APP
+// 345 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x26]
+.LVL139:
+	mov	w1, 512
+	movk	w1, 0xff00, lsl 16
+	str	w1, [x0, 32]
+.LVL140:
+.LBE100:
+.LBB101:
+	.loc 1 346 0
+#APP
+// 346 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x26]
+	str	w22, [x0, 36]
+.LVL141:
+.LBE101:
+.LBB102:
+	.loc 1 347 0
+#APP
+// 347 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x26]
+	mov	w1, 192
+	str	w1, [x0, 4096]
+.LBE102:
+.LBB103:
+	.loc 1 348 0
+	and	w1, w21, 255
+.LVL142:
+#APP
+// 348 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x26]
+.LBE103:
+.LBB104:
+	.loc 1 349 0
+	lsr	w21, w21, 8
+.LVL143:
+.LBE104:
+.LBB105:
+	.loc 1 348 0
+	str	w1, [x0, 4100]
+.LBE105:
+.LBB106:
+	.loc 1 349 0
+#APP
+// 349 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x26]
+	str	w21, [x0, 4104]
+.LVL144:
+.LBE106:
+.LBB107:
+	.loc 1 350 0
+#APP
+// 350 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x26]
+.LBE107:
+	.loc 1 351 0
+	mov	w1, w25
+.LVL145:
+.LBB108:
+	.loc 1 350 0
+	str	w19, [x0, 32]
+.LBE108:
+	.loc 1 351 0
+	mov	x0, x26
+	bl	rockchip_secure_otp_wait_status.isra.2
+.LVL146:
+	.loc 1 352 0
+	tbnz	w0, #31, .L40
+.LVL147:
+.LBB109:
+	.loc 1 357 0
+#APP
+// 357 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x26]
+.LVL148:
+	mov	w1, -65535
+	str	w1, [x0, 36]
+.LVL149:
+.LBE109:
+.LBB110:
+	.loc 1 358 0
+#APP
+// 358 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x26]
+	mov	w1, 224
+	str	w1, [x0, 4096]
+.LVL150:
+.LBE110:
+.LBB111:
+	.loc 1 359 0
+#APP
+// 359 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x26]
+	str	wzr, [x0, 4100]
+.LVL151:
+.LBE111:
+.LBB112:
+	.loc 1 360 0
+#APP
+// 360 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x26]
+.LBE112:
+	.loc 1 361 0
+	mov	w1, w25
+.LBB113:
+	.loc 1 360 0
+	str	w19, [x0, 32]
+.LBE113:
+	.loc 1 361 0
+	mov	x0, x26
+	bl	rockchip_secure_otp_wait_status.isra.2
+.LVL152:
+	.loc 1 362 0
+	tbnz	w0, #31, .L40
+.LVL153:
+.LBB114:
+	.loc 1 367 0
+#APP
+// 367 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x26]
+.LVL154:
+	mov	w22, -65535
+	str	w22, [x0, 36]
+.LVL155:
+.LBE114:
+.LBB115:
+	.loc 1 368 0
+#APP
+// 368 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x26]
+	mov	w1, 14848
+	movk	w1, 0xff00, lsl 16
+	str	w1, [x0, 32]
+.LVL156:
+.LBE115:
+.LBB116:
+	.loc 1 369 0
+#APP
+// 369 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x26]
+	mov	w1, 255
+	str	w1, [x0, 4096]
+.LVL157:
+.LBE116:
+.LBB117:
+	.loc 1 370 0
+#APP
+// 370 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x26]
+	mov	w1, 10
+	str	w1, [x0, 4100]
+.LVL158:
+.LBE117:
+.LBB118:
+	.loc 1 371 0
+#APP
+// 371 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x26]
+	mov	w21, 65537
+.LVL159:
+.LBE118:
+	.loc 1 372 0
+	mov	w1, w25
+.LBB119:
+	.loc 1 371 0
+	str	w21, [x0, 32]
+.LBE119:
+	.loc 1 372 0
+	mov	x0, x26
+	bl	rockchip_secure_otp_wait_status.isra.2
+.LVL160:
+	.loc 1 373 0
+	tbnz	w0, #31, .L40
+.LVL161:
+.LBB120:
+	.loc 1 378 0
+#APP
+// 378 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x26]
+.LVL162:
+	str	w22, [x0, 36]
+.LVL163:
+.LBE120:
+.LBB121:
+	.loc 1 379 0
+#APP
+// 379 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x26]
+	mov	w1, 1
+	str	w1, [x0, 4096]
+.LVL164:
+.LBE121:
+.LBB122:
+	.loc 1 380 0
+#APP
+// 380 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x26]
+	mov	w24, 191
+.LVL165:
+	str	w24, [x0, 4100]
+.LVL166:
+.LBE122:
+.LBB123:
+	.loc 1 381 0
+#APP
+// 381 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x26]
+.LBE123:
+	.loc 1 382 0
+	mov	w1, w25
+.LBB124:
+	.loc 1 381 0
+	str	w21, [x0, 32]
+.LBE124:
+	.loc 1 382 0
+	mov	x0, x26
+	bl	rockchip_secure_otp_wait_status.isra.2
+.LVL167:
+	.loc 1 383 0
+	tbnz	w0, #31, .L40
+	.loc 1 388 0
+	mov	x0, x26
+.LVL168:
+	bl	rockchip_secure_otp_check_flag.isra.0
+.LVL169:
+	.loc 1 389 0
+	tbz	w0, #31, .L41
+	.loc 1 390 0
+	adrp	x1, .LANCHOR1
+	adrp	x0, .LC6
+.LVL170:
+	add	x1, x1, :lo12:.LANCHOR1
+	add	x0, x0, :lo12:.LC6
+	b	.L46
+.LVL171:
+.L41:
+.LBB125:
+	.loc 1 394 0
+#APP
+// 394 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x26]
+.LVL172:
+	str	w22, [x0, 36]
+.LVL173:
+.LBE125:
+.LBB126:
+	.loc 1 395 0
+#APP
+// 395 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x26]
+	mov	w19, 2
+	str	w19, [x0, 4096]
+.LVL174:
+.LBE126:
+.LBB127:
+	.loc 1 396 0
+#APP
+// 396 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x26]
+	str	w24, [x0, 4100]
+.LVL175:
+.LBE127:
+.LBB128:
+	.loc 1 397 0
+#APP
+// 397 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x26]
+.LBE128:
+	.loc 1 398 0
+	mov	w1, w19
+.LBB129:
+	.loc 1 397 0
+	str	w21, [x0, 32]
+.LBE129:
+	.loc 1 398 0
+	mov	x0, x26
+	bl	rockchip_secure_otp_wait_status.isra.2
+.LVL176:
+	.loc 1 399 0
+	tbnz	w0, #31, .L40
+	.loc 1 404 0
+	mov	x0, x26
+.LVL177:
+	bl	rockchip_secure_otp_wait_flag.isra.1
+.LVL178:
+	.loc 1 405 0
+	tbz	w0, #31, .L42
+	.loc 1 406 0
+	adrp	x1, .LANCHOR1
+	adrp	x0, .LC7
+.LVL179:
+	add	x1, x1, :lo12:.LANCHOR1
+	add	x0, x0, :lo12:.LC7
+	b	.L46
+.LVL180:
+.L42:
+.LBB130:
+	.loc 1 410 0
+#APP
+// 410 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x26]
+.LVL181:
+	mov	w1, -65533
+	str	w1, [x0, 772]
+.LVL182:
+.LBE130:
+.LBB131:
+	.loc 1 411 0
+#APP
+// 411 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x26]
+	mov	w1, 512
+	movk	w1, 0xff00, lsl 16
+	str	w1, [x0, 32]
+.LVL183:
+.LBE131:
+.LBB132:
+	.loc 1 412 0
+#APP
+// 412 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x26]
+	str	w22, [x0, 36]
+.LVL184:
+.LBE132:
+.LBB133:
+	.loc 1 413 0
+#APP
+// 413 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x26]
+	str	w19, [x0, 4096]
+.LVL185:
+.LBE133:
+.LBB134:
+	.loc 1 414 0
+#APP
+// 414 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x26]
+	mov	w1, 128
+	str	w1, [x0, 4100]
+.LVL186:
+.LBE134:
+.LBB135:
+	.loc 1 415 0
+#APP
+// 415 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x26]
+.LBE135:
+	.loc 1 416 0
+	mov	w1, w19
+.LBB136:
+	.loc 1 415 0
+	str	w21, [x0, 32]
+.LBE136:
+	.loc 1 416 0
+	mov	x0, x26
+	bl	rockchip_secure_otp_wait_status.isra.2
+.LVL187:
+	.loc 1 417 0
+	tbnz	w0, #31, .L40
+.LVL188:
+.LBB137:
+	.loc 1 422 0
+#APP
+// 422 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x26]
+.LVL189:
+	str	w22, [x0, 36]
+.LVL190:
+.LBE137:
+.LBB138:
+	.loc 1 423 0
+#APP
+// 423 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x26]
+	mov	w1, 160
+	str	w1, [x0, 4096]
+.LVL191:
+.LBE138:
+.LBB139:
+	.loc 1 424 0
+#APP
+// 424 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x26]
+	str	wzr, [x0, 4100]
+.LVL192:
+.LBE139:
+.LBB140:
+	.loc 1 425 0
+#APP
+// 425 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x26]
+.LBE140:
+	.loc 1 426 0
+	mov	w1, w19
+.LBB141:
+	.loc 1 425 0
+	str	w21, [x0, 32]
+.LBE141:
+	.loc 1 426 0
+	mov	x0, x26
+	bl	rockchip_secure_otp_wait_status.isra.2
+.LVL193:
+	.loc 1 427 0
+	tbnz	w0, #31, .L40
+.LVL194:
+.LBB142:
+	.loc 1 432 0
+#APP
+// 432 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x26]
+.LVL195:
+	mov	w1, 250
+	str	w1, [x0, 4096]
+.LVL196:
+.LBE142:
+.LBB143:
+	.loc 1 433 0
+#APP
+// 433 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x26]
+	mov	w1, 9
+	str	w1, [x0, 4100]
+.LVL197:
+.LBE143:
+.LBB144:
+	.loc 1 434 0
+#APP
+// 434 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x26]
+.LBE144:
+	.loc 1 435 0
+	mov	w1, w19
+.LBB145:
+	.loc 1 434 0
+	str	w21, [x0, 32]
+.LBE145:
+	.loc 1 435 0
+	mov	x0, x26
+	bl	rockchip_secure_otp_wait_status.isra.2
+.LVL198:
+	.loc 1 436 0
+	tbz	w0, #31, .L39
+	b	.L40
+	.cfi_endproc
+.LFE269:
+	.size	rk3562_secure_otp_write_2_bytes_noecc, .-rk3562_secure_otp_write_2_bytes_noecc
+	.section	.text.rockchip_secure_otp_ecc_enable,"ax",@progbits
+	.align	2
+	.type	rockchip_secure_otp_ecc_enable, %function
+rockchip_secure_otp_ecc_enable:
+.LFB267:
+	.loc 1 154 0
+	.cfi_startproc
+.LVL199:
+	stp	x29, x30, [sp, -32]!
+	.cfi_def_cfa_offset 32
+	.cfi_offset 29, -32
+	.cfi_offset 30, -24
+	and	w1, w1, 255
+	add	x29, sp, 0
+	.cfi_def_cfa_register 29
+	str	x19, [sp, 16]
+	.cfi_offset 19, -16
+.LBB160:
+	.loc 1 157 0
+#APP
+// 157 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x2, [x0]
+	mov	w3, 512
+	movk	w3, 0xff00, lsl 16
+	str	w3, [x2, 32]
+.LVL200:
+.LBE160:
+.LBB161:
+	.loc 1 158 0
+#APP
+// 158 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x2, [x0]
+	mov	w3, -65535
+	str	w3, [x2, 36]
+.LVL201:
+.LBE161:
+.LBB162:
+	.loc 1 159 0
+#APP
+// 159 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x2, [x0]
+	mov	w3, 250
+	str	w3, [x2, 4096]
+.LBE162:
+	.loc 1 160 0
+	cbz	w1, .L48
+.LVL202:
+.LBB163:
+	.loc 1 161 0
+#APP
+// 161 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x1, [x0]
+.LVL203:
+	str	wzr, [x1, 4100]
+.LVL204:
+.L49:
+.LBE163:
+.LBB164:
+	.loc 1 165 0
+#APP
+// 165 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x1, [x0]
+	mov	w2, 65537
+	str	w2, [x1, 32]
+.LBE164:
+	.loc 1 167 0
+	mov	w1, 2
+	bl	rockchip_secure_otp_wait_status.isra.2
+.LVL205:
+	mov	w19, w0
+.LVL206:
+	.loc 1 168 0
+	tbz	w0, #31, .L47
+.LVL207:
+.LBB165:
+.LBB166:
+	.loc 1 169 0
+	adrp	x1, .LANCHOR2
+	adrp	x0, .LC8
+.LVL208:
+	add	x1, x1, :lo12:.LANCHOR2
+	add	x0, x0, :lo12:.LC8
+	bl	printf
+.LVL209:
+.L47:
+.LBE166:
+.LBE165:
+	.loc 1 172 0
+	mov	w0, w19
+	ldr	x19, [sp, 16]
+.LVL210:
+	ldp	x29, x30, [sp], 32
+	.cfi_remember_state
+	.cfi_restore 30
+	.cfi_restore 29
+	.cfi_restore 19
+	.cfi_def_cfa 31, 0
+	ret
+.LVL211:
+.L48:
+	.cfi_restore_state
+.LBB167:
+	.loc 1 163 0
+#APP
+// 163 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x1, [x0]
+	mov	w2, 9
+	str	w2, [x1, 4100]
+	b	.L49
+.LBE167:
+	.cfi_endproc
+.LFE267:
+	.size	rockchip_secure_otp_ecc_enable, .-rockchip_secure_otp_ecc_enable
+	.section	.text.rk3562_secure_otp_read,"ax",@progbits
+	.align	2
+	.type	rk3562_secure_otp_read, %function
+rk3562_secure_otp_read:
+.LFB268:
+	.loc 1 176 0
+	.cfi_startproc
+.LVL212:
+	stp	x29, x30, [sp, -80]!
+	.cfi_def_cfa_offset 80
+	.cfi_offset 29, -80
+	.cfi_offset 30, -72
+	add	x29, sp, 0
+	.cfi_def_cfa_register 29
+	stp	x19, x20, [sp, 16]
+	.cfi_offset 19, -64
+	.cfi_offset 20, -56
+	.loc 1 183 0
+	asr	w19, w1, 1
+	.loc 1 176 0
+	stp	x21, x22, [sp, 32]
+	.cfi_offset 21, -48
+	.cfi_offset 22, -40
+	mov	x21, x2
+	stp	x23, x24, [sp, 48]
+	mov	x22, x0
+	.cfi_offset 23, -32
+	.cfi_offset 24, -24
+	mov	w23, w3
+	str	x25, [sp, 64]
+	.cfi_offset 25, -16
+	.loc 1 177 0
+	bl	dev_get_platdata
+.LVL213:
+	mov	x20, x0
+.LVL214:
+	.loc 1 178 0
+	mov	x0, x22
+.LVL215:
+	bl	dev_get_driver_data
+.LVL216:
+	.loc 1 184 0
+	ldr	x4, [x0, 16]
+	.loc 1 178 0
+	mov	x24, x0
+.LVL217:
+	.loc 1 184 0
+	ldr	x1, [x20, 24]
+	mov	w3, w19
+	ldp	x0, x2, [x20, 8]
+.LVL218:
+	blr	x4
+.LVL219:
+	.loc 1 187 0
+	sub	w1, w19, #16
+	sub	w0, w19, #416
+	cmp	w1, 15
+	ccmp	w0, 31, 0, hi
+	bhi	.L53
+	.loc 1 188 0
+	mov	w1, 0
+.L65:
+	.loc 1 190 0
+	mov	x0, x20
+	bl	rockchip_secure_otp_ecc_enable
+.LVL220:
+.LBB168:
+	.loc 1 192 0
+#APP
+// 192 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x20]
+	mov	w25, 65537
+.LBE168:
+	.loc 1 181 0
+	mov	w22, 0
+.LVL221:
+.LBB169:
+	.loc 1 192 0
+	str	w25, [x0, 256]
+.LBE169:
+	.loc 1 193 0
+	mov	x0, 50
+	bl	udelay
+.LVL222:
+.L55:
+	.loc 1 194 0
+	cbz	w23, .L60
+	.loc 1 196 0
+	cmp	w19, 447
+	ble	.L56
+	.loc 1 197 0
+	adrp	x0, .LC9
+	mov	w1, w19
+	add	x0, x0, :lo12:.LC9
+.L66:
+	.loc 1 205 0
+	mov	w22, -1
+.LVL223:
+	.loc 1 204 0
+	bl	printf
+.LVL224:
+.L52:
+	.loc 1 235 0
+	mov	w0, w22
+	ldr	x25, [sp, 64]
+	ldp	x19, x20, [sp, 16]
+.LVL225:
+	ldp	x21, x22, [sp, 32]
+	ldp	x23, x24, [sp, 48]
+.LVL226:
+	ldp	x29, x30, [sp], 80
+	.cfi_remember_state
+	.cfi_restore 30
+	.cfi_restore 29
+	.cfi_restore 25
+	.cfi_restore 23
+	.cfi_restore 24
+	.cfi_restore 21
+	.cfi_restore 22
+	.cfi_restore 19
+	.cfi_restore 20
+	.cfi_def_cfa 31, 0
+	ret
+.LVL227:
+.L53:
+	.cfi_restore_state
+	.loc 1 190 0
+	mov	w1, 1
+	b	.L65
+.LVL228:
+.L56:
+	.loc 1 201 0
+	sub	w0, w19, #192
+	cmp	w0, 31
+	ccmp	w19, 16, 4, hi
+	beq	.L58
+	.loc 1 201 0 is_stmt 0 discriminator 1
+	sub	w0, w19, #416
+	cmp	w0, 15
+	bls	.L58
+	.loc 1 204 0 is_stmt 1
+	adrp	x0, .LC10
+	lsl	w1, w19, 1
+	add	x0, x0, :lo12:.LC10
+	b	.L66
+.L58:
+.LBB170:
+	.loc 1 208 0
+	orr	w1, w19, -65536
+.LVL229:
+#APP
+// 208 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x20]
+.LBE170:
+	.loc 1 209 0
+	add	w19, w19, 1
+.LVL230:
+.LBB171:
+	.loc 1 208 0
+	str	w1, [x0, 260]
+.LBE171:
+.LBB172:
+	.loc 1 210 0
+#APP
+// 210 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x20]
+.LBE172:
+	.loc 1 212 0
+	mov	w1, 4
+.LVL231:
+.LBB173:
+	.loc 1 210 0
+	str	w25, [x0, 264]
+.LVL232:
+.LBE173:
+	.loc 1 212 0
+	mov	x0, x20
+	bl	rockchip_secure_otp_wait_status.isra.2
+.LVL233:
+	mov	w22, w0
+.LVL234:
+	.loc 1 213 0
+	tbz	w0, #31, .L59
+	.loc 1 214 0
+	adrp	x1, .LANCHOR3
+	adrp	x0, .LC11
+.LVL235:
+	add	x1, x1, :lo12:.LANCHOR3
+	add	x0, x0, :lo12:.LC11
+	bl	printf
+.LVL236:
+.L60:
+.LBB174:
+	.loc 1 228 0
+#APP
+// 228 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x20]
+	mov	w1, 65536
+.LBE174:
+	.loc 1 230 0
+	ldr	x2, [x20, 16]
+	mov	w3, w19
+	ldr	x4, [x24, 24]
+.LBB175:
+	.loc 1 228 0
+	str	w1, [x0, 256]
+.LBE175:
+	.loc 1 230 0
+	ldr	x0, [x20, 8]
+	ldr	x1, [x20, 24]
+	blr	x4
+.LVL237:
+	.loc 1 234 0
+	b	.L52
+.LVL238:
+.L59:
+.LBB176:
+	.loc 1 218 0
+	ldr	x0, [x20]
+.LVL239:
+	ldrh	w0, [x0, 292]
+	and	w0, w0, 65535
+.LVL240:
+#APP
+// 218 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+.LVL241:
+#NO_APP
+.LBE176:
+	.loc 1 220 0
+	strb	w0, [x21]
+	.loc 1 221 0
+	cmp	w23, 1
+	beq	.L60
+.LVL242:
+	.loc 1 222 0
+	lsr	w0, w0, 8
+.LVL243:
+	.loc 1 223 0
+	sub	w23, w23, #2
+.LVL244:
+	.loc 1 222 0
+	strb	w0, [x21, 1]
+	add	x21, x21, 2
+.LVL245:
+	b	.L55
+	.cfi_endproc
+.LFE268:
+	.size	rk3562_secure_otp_read, .-rk3562_secure_otp_read
+	.section	.text.rk3562_secure_otp_write,"ax",@progbits
+	.align	2
+	.type	rk3562_secure_otp_write, %function
+rk3562_secure_otp_write:
+.LFB272:
+	.loc 1 621 0
+	.cfi_startproc
+.LVL246:
+	stp	x29, x30, [sp, -144]!
+	.cfi_def_cfa_offset 144
+	.cfi_offset 29, -144
+	.cfi_offset 30, -136
+	add	x29, sp, 0
+	.cfi_def_cfa_register 29
+	stp	x19, x20, [sp, 16]
+	.cfi_offset 19, -128
+	.cfi_offset 20, -120
+	mov	w20, w1
+	stp	x21, x22, [sp, 32]
+	.cfi_offset 21, -112
+	.cfi_offset 22, -104
+	mov	w21, w3
+	stp	x23, x24, [sp, 48]
+	.cfi_offset 23, -96
+	.cfi_offset 24, -88
+	mov	x24, x0
+	stp	x27, x28, [sp, 80]
+	stp	x25, x26, [sp, 64]
+	.cfi_offset 27, -64
+	.cfi_offset 28, -56
+	.cfi_offset 25, -80
+	.cfi_offset 26, -72
+	.loc 1 621 0
+	str	x2, [x29, 112]
+	.loc 1 622 0
+	bl	dev_get_platdata
+.LVL247:
+	mov	x28, x0
+.LVL248:
+	.loc 1 625 0
+	sxtw	x0, w21
+.LVL249:
+	bl	malloc_simple
+.LVL250:
+	.loc 1 628 0
+	cbnz	x0, .L68
+.LVL251:
+.L115:
+	.loc 1 643 0
+	mov	w27, -1
+.LVL252:
+.L67:
+	.loc 1 669 0
+	mov	w0, w27
+	ldp	x19, x20, [sp, 16]
+.LVL253:
+	ldp	x21, x22, [sp, 32]
+	ldp	x23, x24, [sp, 48]
+.LVL254:
+	ldp	x25, x26, [sp, 64]
+	ldp	x27, x28, [sp, 80]
+.LVL255:
+	ldp	x29, x30, [sp], 144
+	.cfi_remember_state
+	.cfi_restore 30
+	.cfi_restore 29
+	.cfi_restore 27
+	.cfi_restore 28
+	.cfi_restore 25
+	.cfi_restore 26
+	.cfi_restore 23
+	.cfi_restore 24
+	.cfi_restore 21
+	.cfi_restore 22
+	.cfi_restore 19
+	.cfi_restore 20
+	.cfi_def_cfa 31, 0
+.LVL256:
+	ret
+.LVL257:
+.L68:
+	.cfi_restore_state
+	mov	x19, x0
+	.loc 1 631 0
+	sub	w0, w20, #384
+.LVL258:
+	cmp	w0, 63
+	bls	.L70
+.LVL259:
+.L77:
+	.loc 1 649 0
+	sub	w1, w20, #832
+	sub	w0, w20, #32
+	cmp	w1, 63
+	ccmp	w0, 31, 0, hi
+	bls	.L71
+	.loc 1 659 0
+	mov	w0, 2
+.LBB244:
+.LBB245:
+	.loc 1 607 0
+	adrp	x19, .LANCHOR4
+.LVL260:
+	add	x19, x19, :lo12:.LANCHOR4
+.LBE245:
+.LBE244:
+	.loc 1 659 0
+	mov	x23, 0
+	sdiv	w0, w21, w0
+	str	w0, [x29, 108]
+.LVL261:
+.L78:
+	.loc 1 659 0 is_stmt 0 discriminator 1
+	ldr	w0, [x29, 108]
+	cmp	w0, w23
+	ble	.L97
+	.loc 1 660 0 is_stmt 1
+	ldr	x0, [x29, 112]
+	add	w21, w20, w23, lsl 1
+.LBB324:
+.LBB320:
+	.loc 1 477 0
+	asr	w25, w21, 1
+.LBE320:
+.LBE324:
+	.loc 1 660 0
+	ldrh	w26, [x0, x23, lsl 1]
+.LVL262:
+.LBB325:
+.LBB321:
+	.loc 1 475 0
+	mov	x0, x24
+	bl	dev_get_driver_data
+.LVL263:
+	str	x0, [x29, 120]
+.LVL264:
+	.loc 1 478 0
+	cmp	w25, 447
+	bgt	.L99
+	.loc 1 482 0
+	sub	w0, w25, #192
+.LVL265:
+	cmp	w0, 31
+	bls	.L85
+	.loc 1 485 0
+	adrp	x0, .LC4
+	and	w1, w21, -2
+	add	x0, x0, :lo12:.LC4
+	bl	printf
+.LVL266:
+.L99:
+	.loc 1 478 0
+	mov	w27, -1
+	b	.L84
+.LVL267:
+.L70:
+.LBE321:
+.LBE325:
+	.loc 1 633 0
+	mov	w3, w21
+	mov	x2, x19
+	mov	w1, w20
+	mov	x0, x24
+	bl	rk3562_secure_otp_read
+.LVL268:
+	.loc 1 634 0
+	cbnz	w0, .L115
+	mov	x0, 0
+.LVL269:
+.L75:
+	.loc 1 639 0 discriminator 1
+	cmp	w21, w0
+	ble	.L77
+	add	x0, x0, 1
+.LVL270:
+	.loc 1 640 0
+	add	x1, x19, x0
+	ldrb	w1, [x1, -1]
+	cbz	w1, .L75
+	.loc 1 641 0
+	adrp	x0, .LC12
+	add	x0, x0, :lo12:.LC12
+	bl	printf
+.LVL271:
+	b	.L115
+.LVL272:
+.L83:
+.LBB326:
+.LBB327:
+	.loc 1 455 0
+	adds	w25, w20, w19
+.LBE327:
+.LBE326:
+	.loc 1 652 0
+	ldr	x0, [x29, 112]
+.LBB332:
+.LBB328:
+	.loc 1 455 0
+	and	w26, w25, 1
+	mov	w3, 2
+	csneg	w22, w26, w26, pl
+	add	x2, x29, 142
+	sub	w22, w25, w22
+.LBE328:
+.LBE332:
+	.loc 1 652 0
+	ldrb	w23, [x0, x19]
+.LVL273:
+.LBB333:
+.LBB329:
+	.loc 1 455 0
+	mov	w1, w22
+	mov	x0, x24
+	bl	rk3562_secure_otp_read
+.LVL274:
+	.loc 1 456 0
+	cbnz	w0, .L79
+	ldrh	w3, [x29, 142]
+	.loc 1 459 0
+	cbnz	w26, .L80
+.LVL275:
+	.loc 1 461 0
+	bic	w3, w23, w3
+	mov	w2, w25
+.LVL276:
+.L112:
+	.loc 1 464 0
+	mov	x1, x28
+	mov	x0, x24
+.LVL277:
+	add	x19, x19, 1
+.LVL278:
+	bl	rk3562_secure_otp_write_2_bytes_noecc
+.LVL279:
+	mov	w27, w0
+.LVL280:
+.LBE329:
+.LBE333:
+	.loc 1 653 0
+	cbz	w0, .L82
+.L98:
+	.loc 1 654 0
+	adrp	x0, .LC13
+	add	x0, x0, :lo12:.LC13
+.LVL281:
+.L114:
+	.loc 1 662 0
+	bl	printf
+.LVL282:
+	.loc 1 663 0
+	b	.L67
+.LVL283:
+.L80:
+.LBB334:
+.LBB330:
+	.loc 1 463 0
+	lsl	w23, w23, 8
+.LVL284:
+	.loc 1 464 0
+	mov	w2, w22
+	bic	w3, w23, w3
+	b	.L112
+.LVL285:
+.L71:
+.LBE330:
+.LBE334:
+	mov	x19, 0
+.LVL286:
+.L82:
+	.loc 1 651 0 discriminator 1
+	cmp	w21, w19
+	bgt	.L83
+.LVL287:
+.L97:
+	.loc 1 629 0
+	mov	w27, 0
+	b	.L67
+.LVL288:
+.L85:
+.LBB335:
+.LBB322:
+	.loc 1 489 0
+	cbz	w26, .L86
+	.loc 1 492 0
+	ldr	x0, [x29, 120]
+	mov	w3, w25
+	ldp	x2, x1, [x28, 16]
+	ldr	x5, [x0, 16]
+	ldr	x0, [x28, 8]
+	blr	x5
+.LVL289:
+.LBB246:
+	.loc 1 495 0
+#APP
+// 495 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x28]
+	mov	w1, 65536
+	str	w1, [x0, 256]
+.LVL290:
+.LBE246:
+.LBB247:
+	.loc 1 496 0
+#APP
+// 496 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x28]
+	mov	w1, 262148
+	str	w1, [x0, 32]
+.LVL291:
+.LBE247:
+.LBB248:
+	.loc 1 497 0
+#APP
+// 497 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x28]
+	mov	w1, -65536
+	str	w1, [x0, 40]
+.LVL292:
+.LBE248:
+.LBB249:
+	.loc 1 498 0
+#APP
+// 498 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x28]
+	mov	w1, 512
+	movk	w1, 0xff00, lsl 16
+	str	w1, [x0, 32]
+.LVL293:
+.LBE249:
+.LBB250:
+	.loc 1 499 0
+#APP
+// 499 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x28]
+	mov	w1, -65522
+	str	w1, [x0, 36]
+.LVL294:
+.LBE250:
+.LBB251:
+	.loc 1 500 0
+#APP
+// 500 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x28]
+	mov	w3, 240
+	str	w3, [x29, 100]
+.LVL295:
+	str	w3, [x0, 4096]
+.LBE251:
+.LBB252:
+	.loc 1 501 0
+#APP
+// 501 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x28]
+	mov	w1, 1
+	str	w1, [x0, 4100]
+.LVL296:
+.LBE252:
+.LBB253:
+	.loc 1 502 0
+#APP
+// 502 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x28]
+	mov	w2, 122
+	str	w2, [x29, 104]
+.LVL297:
+	str	w2, [x0, 4104]
+.LBE253:
+.LBB254:
+	.loc 1 503 0
+#APP
+// 503 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x28]
+	mov	w1, 37
+	str	w1, [x0, 4108]
+.LVL298:
+.LBE254:
+.LBB255:
+	.loc 1 504 0
+#APP
+// 504 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x28]
+	str	wzr, [x0, 4112]
+.LVL299:
+.LBE255:
+.LBB256:
+	.loc 1 505 0
+#APP
+// 505 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x28]
+	str	wzr, [x0, 4116]
+.LVL300:
+.LBE256:
+.LBB257:
+	.loc 1 506 0
+#APP
+// 506 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x28]
+	str	wzr, [x0, 4120]
+.LVL301:
+.LBE257:
+.LBB258:
+	.loc 1 507 0
+#APP
+// 507 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x28]
+	mov	w1, 31
+	str	w1, [x0, 4124]
+.LVL302:
+.LBE258:
+.LBB259:
+	.loc 1 508 0
+#APP
+// 508 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x28]
+	mov	w1, 11
+	str	w1, [x0, 4128]
+.LVL303:
+.LBE259:
+.LBB260:
+	.loc 1 509 0
+#APP
+// 509 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x28]
+	mov	w1, 8
+	str	w1, [x0, 4132]
+.LVL304:
+.LBE260:
+.LBB261:
+	.loc 1 510 0
+#APP
+// 510 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x28]
+	str	wzr, [x0, 4136]
+.LVL305:
+.LBE261:
+.LBB262:
+	.loc 1 511 0
+#APP
+// 511 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x28]
+	str	wzr, [x0, 4140]
+.LVL306:
+.LBE262:
+.LBB263:
+	.loc 1 512 0
+#APP
+// 512 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x28]
+	str	wzr, [x0, 4144]
+.LVL307:
+.LBE263:
+.LBB264:
+	.loc 1 513 0
+#APP
+// 513 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x28]
+.LBE264:
+.LBB265:
+	.loc 1 514 0
+	ubfx	x21, x21, 9, 8
+.LVL308:
+.LBE265:
+.LBB266:
+	.loc 1 513 0
+	str	w25, [x0, 4148]
+.LBE266:
+.LBB267:
+	.loc 1 514 0
+#APP
+// 514 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x28]
+	str	w21, [x0, 4152]
+.LVL309:
+.LBE267:
+.LBB268:
+	.loc 1 515 0
+#APP
+// 515 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x28]
+	mov	w22, 65537
+.LBE268:
+	.loc 1 516 0
+	mov	w1, 2
+.LBB269:
+	.loc 1 515 0
+	str	w22, [x0, 32]
+.LBE269:
+	.loc 1 516 0
+	mov	x0, x28
+	bl	rockchip_secure_otp_wait_status.isra.2
+.LVL310:
+	mov	w27, w0
+.LVL311:
+	.loc 1 517 0
+	ldp	w3, w2, [x29, 100]
+	tbz	w0, #31, .L87
+	.loc 1 518 0
+	adrp	x0, .LC5
+.LVL312:
+	mov	x1, x19
+	add	x0, x0, :lo12:.LC5
+.LVL313:
+.L113:
+	.loc 1 607 0
+	bl	printf
+.LVL314:
+.L88:
+.LBB270:
+	.loc 1 612 0
+#APP
+// 612 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x28]
+	mov	w1, -65533
+.LBE270:
+	.loc 1 613 0
+	ldr	x2, [x28, 16]
+	mov	w3, w25
+.LBB271:
+	.loc 1 612 0
+	str	w1, [x0, 772]
+.LBE271:
+	.loc 1 613 0
+	ldr	x0, [x29, 120]
+	ldr	x1, [x28, 24]
+	ldr	x6, [x0, 24]
+	ldr	x0, [x28, 8]
+	blr	x6
+.LVL315:
+.LBE322:
+.LBE335:
+	.loc 1 661 0
+	cbz	w27, .L86
+.LVL316:
+.L84:
+	.loc 1 662 0
+	adrp	x0, .LC20
+	add	x0, x0, :lo12:.LC20
+	b	.L114
+.LVL317:
+.L87:
+.LBB336:
+.LBB323:
+.LBB272:
+	.loc 1 522 0
+#APP
+// 522 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x28]
+.LVL318:
+	mov	w1, 14848
+	movk	w1, 0xff00, lsl 16
+	str	w1, [x0, 32]
+.LVL319:
+.LBE272:
+.LBB273:
+	.loc 1 523 0
+#APP
+// 523 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x28]
+	str	w3, [x0, 4096]
+.LVL320:
+.LBE273:
+.LBB274:
+	.loc 1 524 0
+#APP
+// 524 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x28]
+	mov	w1, 1
+	str	w1, [x0, 4100]
+.LVL321:
+.LBE274:
+.LBB275:
+	.loc 1 525 0
+#APP
+// 525 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x28]
+	str	w2, [x0, 4104]
+.LVL322:
+.LBE275:
+.LBB276:
+	.loc 1 526 0
+#APP
+// 526 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x28]
+	mov	w1, 21
+	str	w1, [x0, 4108]
+.LVL323:
+.LBE276:
+.LBB277:
+	.loc 1 527 0
+#APP
+// 527 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x28]
+	mov	w1, 220
+	str	w1, [x0, 4112]
+.LVL324:
+.LBE277:
+.LBB278:
+	.loc 1 528 0
+#APP
+// 528 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x28]
+	mov	w1, 146
+	str	w1, [x0, 4116]
+.LVL325:
+.LBE278:
+.LBB279:
+	.loc 1 529 0
+#APP
+// 529 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x28]
+	mov	w1, 121
+	str	w1, [x0, 4120]
+.LVL326:
+.LBE279:
+.LBB280:
+	.loc 1 530 0
+#APP
+// 530 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x28]
+	mov	w1, 129
+	str	w1, [x0, 4124]
+.LVL327:
+.LBE280:
+.LBB281:
+	.loc 1 531 0
+#APP
+// 531 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x28]
+	mov	w1, 126
+	str	w1, [x0, 4128]
+.LVL328:
+.LBE281:
+.LBB282:
+	.loc 1 532 0
+#APP
+// 532 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x28]
+	mov	w1, 33
+	str	w1, [x0, 4132]
+.LVL329:
+.LBE282:
+.LBB283:
+	.loc 1 533 0
+#APP
+// 533 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x28]
+	mov	w1, 17
+	str	w1, [x0, 4136]
+.LVL330:
+.LBE283:
+.LBB284:
+	.loc 1 534 0
+#APP
+// 534 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x28]
+	mov	w1, 157
+	str	w1, [x0, 4140]
+.LVL331:
+.LBE284:
+.LBB285:
+	.loc 1 535 0
+#APP
+// 535 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x28]
+	mov	w21, 2
+.LVL332:
+	str	w21, [x0, 4144]
+.LVL333:
+.LBE285:
+.LBB286:
+	.loc 1 536 0
+#APP
+// 536 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x28]
+	str	wzr, [x0, 4148]
+.LVL334:
+.LBE286:
+.LBB287:
+	.loc 1 537 0
+#APP
+// 537 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x28]
+	str	wzr, [x0, 4152]
+.LVL335:
+.LBE287:
+.LBB288:
+	.loc 1 538 0
+#APP
+// 538 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x28]
+.LBE288:
+	.loc 1 539 0
+	mov	w1, w21
+.LBB289:
+	.loc 1 538 0
+	str	w22, [x0, 32]
+.LBE289:
+	.loc 1 539 0
+	mov	x0, x28
+	bl	rockchip_secure_otp_wait_status.isra.2
+.LVL336:
+	mov	w27, w0
+.LVL337:
+	.loc 1 540 0
+	tbz	w0, #31, .L89
+	.loc 1 541 0
+	adrp	x0, .LC14
+.LVL338:
+	mov	x1, x19
+	add	x0, x0, :lo12:.LC14
+	b	.L113
+.LVL339:
+.L89:
+.LBB290:
+	.loc 1 545 0
+#APP
+// 545 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x28]
+.LVL340:
+	mov	w1, 512
+	movk	w1, 0xff00, lsl 16
+	str	w1, [x0, 32]
+.LVL341:
+.LBE290:
+.LBB291:
+	.loc 1 546 0
+#APP
+// 546 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x28]
+	mov	w1, -65535
+	str	w1, [x0, 36]
+.LVL342:
+.LBE291:
+.LBB292:
+	.loc 1 547 0
+#APP
+// 547 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x28]
+	mov	w1, 251
+	str	w1, [x0, 4096]
+.LVL343:
+.LBE292:
+.LBB293:
+	.loc 1 548 0
+#APP
+// 548 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x28]
+	str	wzr, [x0, 4100]
+.LVL344:
+.LBE293:
+.LBB294:
+	.loc 1 549 0
+#APP
+// 549 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x28]
+.LBE294:
+	.loc 1 550 0
+	mov	w1, w21
+.LBB295:
+	.loc 1 549 0
+	str	w22, [x0, 32]
+.LBE295:
+	.loc 1 550 0
+	mov	x0, x28
+	bl	rockchip_secure_otp_wait_status.isra.2
+.LVL345:
+	mov	w27, w0
+.LVL346:
+	.loc 1 551 0
+	tbz	w0, #31, .L90
+	.loc 1 552 0
+	adrp	x0, .LC15
+.LVL347:
+	mov	x1, x19
+	add	x0, x0, :lo12:.LC15
+	b	.L113
+.LVL348:
+.L90:
+.LBB296:
+	.loc 1 556 0
+#APP
+// 556 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x28]
+.LVL349:
+	mov	w1, -65534
+	str	w1, [x0, 36]
+.LVL350:
+.LBE296:
+.LBB297:
+	.loc 1 557 0
+#APP
+// 557 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x28]
+	mov	w1, 192
+	str	w1, [x0, 4096]
+.LBE297:
+.LBB298:
+	.loc 1 558 0
+	and	w1, w26, 255
+.LVL351:
+#APP
+// 558 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x28]
+.LBE298:
+.LBB299:
+	.loc 1 559 0
+	lsr	w26, w26, 8
+.LVL352:
+.LBE299:
+.LBB300:
+	.loc 1 558 0
+	str	w1, [x0, 4100]
+.LBE300:
+.LBB301:
+	.loc 1 559 0
+#APP
+// 559 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x28]
+	str	w26, [x0, 4104]
+.LVL353:
+.LBE301:
+.LBB302:
+	.loc 1 560 0
+#APP
+// 560 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x28]
+.LBE302:
+	.loc 1 561 0
+	mov	w1, w21
+.LVL354:
+.LBB303:
+	.loc 1 560 0
+	str	w22, [x0, 32]
+.LBE303:
+	.loc 1 561 0
+	mov	x0, x28
+	bl	rockchip_secure_otp_wait_status.isra.2
+.LVL355:
+	mov	w27, w0
+.LVL356:
+	.loc 1 562 0
+	tbz	w0, #31, .L91
+	.loc 1 563 0
+	adrp	x0, .LC16
+.LVL357:
+	mov	x1, x19
+	add	x0, x0, :lo12:.LC16
+	b	.L113
+.LVL358:
+.L91:
+.LBB304:
+	.loc 1 567 0
+#APP
+// 567 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x28]
+.LVL359:
+	mov	w1, 14848
+	movk	w1, 0xff00, lsl 16
+	str	w1, [x0, 32]
+.LVL360:
+.LBE304:
+.LBB305:
+	.loc 1 568 0
+#APP
+// 568 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x28]
+	mov	w1, -65535
+	str	w1, [x0, 36]
+.LVL361:
+.LBE305:
+.LBB306:
+	.loc 1 569 0
+#APP
+// 569 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x28]
+	mov	w1, 255
+	str	w1, [x0, 4096]
+.LVL362:
+.LBE306:
+.LBB307:
+	.loc 1 570 0
+#APP
+// 570 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x28]
+	mov	w1, 10
+	str	w1, [x0, 4100]
+.LVL363:
+.LBE307:
+.LBB308:
+	.loc 1 571 0
+#APP
+// 571 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x28]
+.LBE308:
+	.loc 1 572 0
+	mov	w1, w21
+.LBB309:
+	.loc 1 571 0
+	str	w22, [x0, 32]
+.LBE309:
+	.loc 1 572 0
+	mov	x0, x28
+	bl	rockchip_secure_otp_wait_status.isra.2
+.LVL364:
+	mov	w27, w0
+.LVL365:
+	.loc 1 573 0
+	tbz	w0, #31, .L92
+	.loc 1 574 0
+	adrp	x0, .LC17
+.LVL366:
+	mov	x1, x19
+	add	x0, x0, :lo12:.LC17
+	b	.L113
+.LVL367:
+.L92:
+.LBB310:
+	.loc 1 578 0
+#APP
+// 578 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x28]
+.LVL368:
+	mov	w1, -65534
+	str	w1, [x0, 36]
+.LVL369:
+.LBE310:
+.LBB311:
+	.loc 1 579 0
+#APP
+// 579 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x28]
+	mov	w1, 1
+	str	w1, [x0, 4096]
+.LVL370:
+.LBE311:
+.LBB312:
+	.loc 1 580 0
+#APP
+// 580 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x28]
+	mov	w1, 191
+	str	w1, [x0, 4100]
+.LVL371:
+.LBE312:
+.LBB313:
+	.loc 1 581 0
+#APP
+// 581 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x28]
+	str	wzr, [x0, 4104]
+.LVL372:
+.LBE313:
+.LBB314:
+	.loc 1 582 0
+#APP
+// 582 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x28]
+.LBE314:
+	.loc 1 583 0
+	mov	w1, w21
+.LBB315:
+	.loc 1 582 0
+	str	w22, [x0, 32]
+.LBE315:
+	.loc 1 583 0
+	mov	x0, x28
+	bl	rockchip_secure_otp_wait_status.isra.2
+.LVL373:
+	mov	w27, w0
+.LVL374:
+	.loc 1 584 0
+	tbz	w0, #31, .L93
+	.loc 1 585 0
+	adrp	x0, .LC18
+.LVL375:
+	mov	x1, x19
+	add	x0, x0, :lo12:.LC18
+	b	.L113
+.LVL376:
+.L93:
+	.loc 1 589 0
+	mov	x0, x28
+.LVL377:
+	bl	rockchip_secure_otp_check_flag.isra.0
+.LVL378:
+	mov	w27, w0
+.LVL379:
+	.loc 1 590 0
+	tbz	w0, #31, .L94
+	.loc 1 591 0
+	adrp	x0, .LC6
+.LVL380:
+	mov	x1, x19
+	add	x0, x0, :lo12:.LC6
+	b	.L113
+.LVL381:
+.L94:
+.LBB316:
+	.loc 1 595 0
+#APP
+// 595 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x28]
+.LVL382:
+	mov	w1, -65535
+	str	w1, [x0, 36]
+.LVL383:
+.LBE316:
+.LBB317:
+	.loc 1 596 0
+#APP
+// 596 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x28]
+	mov	w1, 2
+	str	w1, [x0, 4096]
+.LVL384:
+.LBE317:
+.LBB318:
+	.loc 1 597 0
+#APP
+// 597 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x28]
+	mov	w2, 191
+	str	w2, [x0, 4100]
+.LVL385:
+.LBE318:
+.LBB319:
+	.loc 1 598 0
+#APP
+// 598 "drivers/misc/rk3562-secure-otp.c" 1
+	dmb sy
+// 0 "" 2
+#NO_APP
+	ldr	x0, [x28]
+	mov	w2, 65537
+	str	w2, [x0, 32]
+.LBE319:
+	.loc 1 599 0
+	mov	x0, x28
+	bl	rockchip_secure_otp_wait_status.isra.2
+.LVL386:
+	mov	w27, w0
+.LVL387:
+	.loc 1 600 0
+	tbz	w0, #31, .L95
+	.loc 1 601 0
+	adrp	x0, .LC19
+.LVL388:
+	mov	x1, x19
+	add	x0, x0, :lo12:.LC19
+	b	.L113
+.LVL389:
+.L95:
+	.loc 1 605 0
+	mov	x0, x28
+.LVL390:
+	bl	rockchip_secure_otp_wait_flag.isra.1
+.LVL391:
+	mov	w27, w0
+.LVL392:
+	.loc 1 606 0
+	tbz	w0, #31, .L88
+	.loc 1 607 0
+	adrp	x0, .LC7
+.LVL393:
+	mov	x1, x19
+	add	x0, x0, :lo12:.LC7
+	b	.L113
+.LVL394:
+.L86:
+	add	x23, x23, 1
+.LVL395:
+	b	.L78
+.LVL396:
+.L79:
+.LBE323:
+.LBE336:
+.LBB337:
+.LBB331:
+	.loc 1 457 0
+	mov	w27, -1
+	b	.L98
+.LBE331:
+.LBE337:
+	.cfi_endproc
+.LFE272:
+	.size	rk3562_secure_otp_write, .-rk3562_secure_otp_write
+	.global	_u_boot_list_2_driver_2_rockchip_secure_otp
+	.section	.rodata.__func__.7582,"a",@progbits
+	.align	3
+	.set	.LANCHOR0,. + 0
+	.type	__func__.7582, %object
+	.size	__func__.7582, 32
+__func__.7582:
+	.string	"rockchip_secure_otp_wait_status"
+	.section	.rodata.__func__.7625,"a",@progbits
+	.align	3
+	.set	.LANCHOR2,. + 0
+	.type	__func__.7625, %object
+	.size	__func__.7625, 31
+__func__.7625:
+	.string	"rockchip_secure_otp_ecc_enable"
+	.section	.rodata.__func__.7643,"a",@progbits
+	.align	3
+	.set	.LANCHOR3,. + 0
+	.type	__func__.7643, %object
+	.size	__func__.7643, 23
+__func__.7643:
+	.string	"rk3562_secure_otp_read"
+	.section	.rodata.__func__.7678,"a",@progbits
+	.align	3
+	.set	.LANCHOR1,. + 0
+	.type	__func__.7678, %object
+	.size	__func__.7678, 38
+__func__.7678:
+	.string	"rk3562_secure_otp_write_2_bytes_noecc"
+	.section	.rodata.__func__.7899,"a",@progbits
+	.align	3
+	.set	.LANCHOR4,. + 0
+	.type	__func__.7899, %object
+	.size	__func__.7899, 32
+__func__.7899:
+	.string	"rk3562_secure_otp_write_2_bytes"
+	.section	.rodata.rk3562_data,"a",@progbits
+	.align	3
+	.type	rk3562_data, %object
+	.size	rk3562_data, 32
+rk3562_data:
+	.xword	rk3562_secure_otp_read
+	.xword	rk3562_secure_otp_write
+	.xword	rk3562_spl_rockchip_otp_start
+	.xword	rk3562_spl_rockchip_otp_stop
+	.section	.rodata.rk3562_secure_otp_read.str1.1,"aMS",@progbits,1
+.LC9:
+	.string	"do not access non secure area, half word offset = %d\n"
+.LC10:
+	.string	"Please input correct addr, offset(bytes) is 0x%x\n"
+.LC11:
+	.string	"%s timeout during read setup\n"
+	.section	.rodata.rk3562_secure_otp_write.str1.1,"aMS",@progbits,1
+.LC12:
+	.string	"The zone is written.\n"
+.LC13:
+	.string	"rk3562_secure_otp_write_byte_noecc error\n"
+.LC14:
+	.string	"%s timeout during write setup 2\n"
+.LC15:
+	.string	"%s timeout during write setup 3\n"
+.LC16:
+	.string	"%s timeout during write setup 4\n"
+.LC17:
+	.string	"%s timeout during write setup 5\n"
+.LC18:
+	.string	"%s timeout during write setup 6\n"
+.LC19:
+	.string	"%s timeout during write setup 8\n"
+.LC20:
+	.string	"rk3562_secure_otp_write_2_bytes error\n"
+	.section	.rodata.rk3562_secure_otp_write_2_bytes_noecc.str1.1,"aMS",@progbits,1
+.LC4:
+	.string	"Please input correct addr, offset is 0x%x\n"
+.LC5:
+	.string	"%s timeout during write setup 1\n"
+.LC6:
+	.string	"%s timeout during write setup 7\n"
+.LC7:
+	.string	"%s timeout during write setup 9\n"
+	.section	.rodata.rockchip_otp_ids,"a",@progbits
+	.align	3
+	.type	rockchip_otp_ids, %object
+	.size	rockchip_otp_ids, 32
+rockchip_otp_ids:
+	.xword	.LC22
+	.xword	rk3562_data
+	.zero	16
+	.section	.rodata.rockchip_secure_otp_ecc_enable.str1.1,"aMS",@progbits,1
+.LC8:
+	.string	"%s timeout during ecc_enable\n"
+	.section	.rodata.rockchip_secure_otp_ofdata_to_platdata.str1.1,"aMS",@progbits,1
+.LC0:
+	.string	"secure_conf"
+.LC1:
+	.string	"mask_addr"
+.LC2:
+	.string	"cru_rst_addr"
+	.section	.rodata.rockchip_secure_otp_ops,"a",@progbits
+	.align	3
+	.type	rockchip_secure_otp_ops, %object
+	.size	rockchip_secure_otp_ops, 32
+rockchip_secure_otp_ops:
+	.xword	secure_otp_read
+	.xword	secure_otp_write
+	.xword	secure_otp_ioctl
+	.zero	8
+	.section	.rodata.rockchip_secure_otp_wait_status.isra.2.str1.1,"aMS",@progbits,1
+.LC3:
+	.string	"%s: wait init status timeout\n"
+	.section	.rodata.str1.1,"aMS",@progbits,1
+.LC21:
+	.string	"rockchip_secure_otp"
+.LC22:
+	.string	"rockchip,rk3562-secure-otp"
+	.section	.u_boot_list_2_driver_2_rockchip_secure_otp,"aw",@progbits
+	.align	2
+	.type	_u_boot_list_2_driver_2_rockchip_secure_otp, %object
+	.size	_u_boot_list_2_driver_2_rockchip_secure_otp, 120
+_u_boot_list_2_driver_2_rockchip_secure_otp:
+	.8byte	.LC21
+	.word	36
+	.zero	4
+	.8byte	rockchip_otp_ids
+	.zero	32
+	.8byte	rockchip_secure_otp_ofdata_to_platdata
+	.zero	28
+	.word	32
+	.zero	8
+	.8byte	rockchip_secure_otp_ops
+	.zero	8
+	.text
+.Letext0:
+	.file 2 "include/common.h"
+	.file 3 "./arch/arm/include/asm/types.h"
+	.file 4 "include/linux/types.h"
+	.file 5 "include/errno.h"
+	.file 6 "include/linux/string.h"
+	.file 7 "include/efi.h"
+	.file 8 "include/dm/device.h"
+	.file 9 "include/ide.h"
+	.file 10 "include/linux/list.h"
+	.file 11 "include/part.h"
+	.file 12 "include/flash.h"
+	.file 13 "include/lmb.h"
+	.file 14 "include/asm-generic/u-boot.h"
+	.file 15 "./arch/arm/include/asm/u-boot-arm.h"
+	.file 16 "include/linux/libfdt_env.h"
+	.file 17 "include/linux/../../scripts/dtc/libfdt/fdt.h"
+	.file 18 "include/linux/libfdt.h"
+	.file 19 "include/image.h"
+	.file 20 "./arch/arm/include/asm/global_data.h"
+	.file 21 "include/asm-generic/global_data.h"
+	.file 22 "include/dm/of.h"
+	.file 23 "include/net.h"
+	.file 24 "include/dm/uclass-id.h"
+	.file 25 "include/dm/ofnode.h"
+	.file 26 "include/malloc.h"
+	.file 27 "include/linux/compat.h"
+	.file 28 "include/dm/uclass.h"
+	.file 29 "include/asm-generic/ioctl.h"
+	.file 30 "include/misc.h"
+	.file 31 "include/rockchip-otp.h"
+	.file 32 "include/dm/read.h"
+	.file 33 "include/stdio.h"
+	.file 34 "include/linux/delay.h"
+	.file 35 "include/log.h"
+	.section	.debug_info,"",@progbits
+.Ldebug_info0:
+	.4byte	0x42d6
+	.2byte	0x4
+	.4byte	.Ldebug_abbrev0
+	.byte	0x8
+	.uleb128 0x1
+	.4byte	.LASF459
+	.byte	0xc
+	.4byte	.LASF460
+	.4byte	.LASF461
+	.4byte	.Ldebug_ranges0+0x6c0
+	.8byte	0
+	.4byte	.Ldebug_line0
+	.uleb128 0x2
+	.4byte	.LASF4
+	.byte	0x2
+	.byte	0xd
+	.4byte	0x34
+	.uleb128 0x3
+	.byte	0x1
+	.byte	0x8
+	.4byte	.LASF0
+	.uleb128 0x3
+	.byte	0x8
+	.byte	0x7
+	.4byte	.LASF1
+	.uleb128 0x3
+	.byte	0x2
+	.byte	0x7
+	.4byte	.LASF2
+	.uleb128 0x4
+	.4byte	.LASF21
+	.byte	0x5
+	.byte	0xc
+	.4byte	0x54
+	.uleb128 0x5
+	.byte	0x4
+	.byte	0x5
+	.string	"int"
+	.uleb128 0x3
+	.byte	0x1
+	.byte	0x6
+	.4byte	.LASF3
+	.uleb128 0x2
+	.4byte	.LASF5
+	.byte	0x3
+	.byte	0xc
+	.4byte	0x34
+	.uleb128 0x3
+	.byte	0x2
+	.byte	0x5
+	.4byte	.LASF6
+	.uleb128 0x2
+	.4byte	.LASF7
+	.byte	0x3
+	.byte	0x12
+	.4byte	0x7f
+	.uleb128 0x3
+	.byte	0x4
+	.byte	0x7
+	.4byte	.LASF8
+	.uleb128 0x3
+	.byte	0x8
+	.byte	0x5
+	.4byte	.LASF9
+	.uleb128 0x3
+	.byte	0x8
+	.byte	0x7
+	.4byte	.LASF10
+	.uleb128 0x6
+	.string	"u8"
+	.byte	0x3
+	.byte	0x1f
+	.4byte	0x34
+	.uleb128 0x7
+	.4byte	0x94
+	.uleb128 0x6
+	.string	"u16"
+	.byte	0x3
+	.byte	0x22
+	.4byte	0x42
+	.uleb128 0x6
+	.string	"u32"
+	.byte	0x3
+	.byte	0x25
+	.4byte	0x7f
+	.uleb128 0x6
+	.string	"u64"
+	.byte	0x3
+	.byte	0x28
+	.4byte	0x8d
+	.uleb128 0x2
+	.4byte	.LASF11
+	.byte	0x3
+	.byte	0x31
+	.4byte	0x8d
+	.uleb128 0x2
+	.4byte	.LASF12
+	.byte	0x3
+	.byte	0x32
+	.4byte	0x8d
+	.uleb128 0x3
+	.byte	0x8
+	.byte	0x7
+	.4byte	.LASF13
+	.uleb128 0x8
+	.byte	0x8
+	.4byte	0xee
+	.uleb128 0x3
+	.byte	0x1
+	.byte	0x8
+	.4byte	.LASF14
+	.uleb128 0x7
+	.4byte	0xe7
+	.uleb128 0x3
+	.byte	0x8
+	.byte	0x5
+	.4byte	.LASF15
+	.uleb128 0x8
+	.byte	0x8
+	.4byte	0xe7
+	.uleb128 0x2
+	.4byte	.LASF16
+	.byte	0x4
+	.byte	0x59
+	.4byte	0x42
+	.uleb128 0x2
+	.4byte	.LASF17
+	.byte	0x4
+	.byte	0x5b
+	.4byte	0x3b
+	.uleb128 0x2
+	.4byte	.LASF18
+	.byte	0x4
+	.byte	0x69
+	.4byte	0x62
+	.uleb128 0x2
+	.4byte	.LASF19
+	.byte	0x4
+	.byte	0x6b
+	.4byte	0x74
+	.uleb128 0x2
+	.4byte	.LASF20
+	.byte	0x4
+	.byte	0x97
+	.4byte	0x74
+	.uleb128 0x9
+	.byte	0x8
+	.uleb128 0x4
+	.4byte	.LASF22
+	.byte	0x6
+	.byte	0xb
+	.4byte	0xfa
+	.uleb128 0x3
+	.byte	0x1
+	.byte	0x2
+	.4byte	.LASF23
+	.uleb128 0xa
+	.4byte	0xe7
+	.4byte	0x156
+	.uleb128 0xb
+	.byte	0
+	.uleb128 0xc
+	.4byte	.LASF24
+	.byte	0x7
+	.2byte	0x140
+	.4byte	0x14b
+	.uleb128 0xc
+	.4byte	.LASF25
+	.byte	0x7
+	.2byte	0x143
+	.4byte	0x14b
+	.uleb128 0xc
+	.4byte	.LASF26
+	.byte	0x7
+	.2byte	0x143
+	.4byte	0x14b
+	.uleb128 0xd
+	.4byte	.LASF45
+	.byte	0xa0
+	.byte	0x8
+	.byte	0x83
+	.4byte	0x25f
+	.uleb128 0xe
+	.4byte	.LASF27
+	.byte	0x8
+	.byte	0x84
+	.4byte	0x139d
+	.byte	0
+	.uleb128 0xe
+	.4byte	.LASF28
+	.byte	0x8
+	.byte	0x85
+	.4byte	0xe1
+	.byte	0x8
+	.uleb128 0xe
+	.4byte	.LASF29
+	.byte	0x8
+	.byte	0x86
+	.4byte	0x137
+	.byte	0x10
+	.uleb128 0xe
+	.4byte	.LASF30
+	.byte	0x8
+	.byte	0x87
+	.4byte	0x137
+	.byte	0x18
+	.uleb128 0xe
+	.4byte	.LASF31
+	.byte	0x8
+	.byte	0x88
+	.4byte	0x137
+	.byte	0x20
+	.uleb128 0xe
+	.4byte	.LASF32
+	.byte	0x8
+	.byte	0x89
+	.4byte	0x1344
+	.byte	0x28
+	.uleb128 0xe
+	.4byte	.LASF33
+	.byte	0x8
+	.byte	0x8a
+	.4byte	0x10b
+	.byte	0x30
+	.uleb128 0xe
+	.4byte	.LASF34
+	.byte	0x8
+	.byte	0x8b
+	.4byte	0x25f
+	.byte	0x38
+	.uleb128 0xe
+	.4byte	.LASF35
+	.byte	0x8
+	.byte	0x8c
+	.4byte	0x137
+	.byte	0x40
+	.uleb128 0xe
+	.4byte	.LASF36
+	.byte	0x8
+	.byte	0x8d
+	.4byte	0x13ec
+	.byte	0x48
+	.uleb128 0xe
+	.4byte	.LASF37
+	.byte	0x8
+	.byte	0x8e
+	.4byte	0x137
+	.byte	0x50
+	.uleb128 0xe
+	.4byte	.LASF38
+	.byte	0x8
+	.byte	0x8f
+	.4byte	0x137
+	.byte	0x58
+	.uleb128 0xe
+	.4byte	.LASF39
+	.byte	0x8
+	.byte	0x90
+	.4byte	0x292
+	.byte	0x60
+	.uleb128 0xe
+	.4byte	.LASF40
+	.byte	0x8
+	.byte	0x91
+	.4byte	0x292
+	.byte	0x70
+	.uleb128 0xe
+	.4byte	.LASF41
+	.byte	0x8
+	.byte	0x92
+	.4byte	0x292
+	.byte	0x80
+	.uleb128 0xe
+	.4byte	.LASF42
+	.byte	0x8
+	.byte	0x93
+	.4byte	0x121
+	.byte	0x90
+	.uleb128 0xe
+	.4byte	.LASF43
+	.byte	0x8
+	.byte	0x94
+	.4byte	0x54
+	.byte	0x94
+	.uleb128 0xf
+	.string	"seq"
+	.byte	0x8
+	.byte	0x95
+	.4byte	0x54
+	.byte	0x98
+	.byte	0
+	.uleb128 0x8
+	.byte	0x8
+	.4byte	0x17a
+	.uleb128 0x8
+	.byte	0x8
+	.4byte	0x26b
+	.uleb128 0x10
+	.uleb128 0xa
+	.4byte	0x10b
+	.4byte	0x277
+	.uleb128 0xb
+	.byte	0
+	.uleb128 0x4
+	.4byte	.LASF44
+	.byte	0x9
+	.byte	0x10
+	.4byte	0x26c
+	.uleb128 0xa
+	.4byte	0x34
+	.4byte	0x292
+	.uleb128 0x11
+	.4byte	0xda
+	.byte	0x5
+	.byte	0
+	.uleb128 0xd
+	.4byte	.LASF46
+	.byte	0x10
+	.byte	0xa
+	.byte	0x16
+	.4byte	0x2b7
+	.uleb128 0xe
+	.4byte	.LASF47
+	.byte	0xa
+	.byte	0x17
+	.4byte	0x2b7
+	.byte	0
+	.uleb128 0xe
+	.4byte	.LASF48
+	.byte	0xa
+	.byte	0x17
+	.4byte	0x2b7
+	.byte	0x8
+	.byte	0
+	.uleb128 0x8
+	.byte	0x8
+	.4byte	0x292
+	.uleb128 0xd
+	.4byte	.LASF49
+	.byte	0x10
+	.byte	0xb
+	.byte	0xf
+	.4byte	0x2e2
+	.uleb128 0xe
+	.4byte	.LASF28
+	.byte	0xb
+	.byte	0x10
+	.4byte	0xfa
+	.byte	0
+	.uleb128 0xe
+	.4byte	.LASF50
+	.byte	0xb
+	.byte	0x11
+	.4byte	0x2fb
+	.byte	0x8
+	.byte	0
+	.uleb128 0x7
+	.4byte	0x2bd
+	.uleb128 0x12
+	.4byte	0x54
+	.4byte	0x2fb
+	.uleb128 0x13
+	.4byte	0x54
+	.uleb128 0x13
+	.4byte	0x54
+	.byte	0
+	.uleb128 0x8
+	.byte	0x8
+	.4byte	0x2e7
+	.uleb128 0xa
+	.4byte	0x2e2
+	.4byte	0x30c
+	.uleb128 0xb
+	.byte	0
+	.uleb128 0x7
+	.4byte	0x301
+	.uleb128 0x4
+	.4byte	.LASF49
+	.byte	0xb
+	.byte	0xe1
+	.4byte	0x30c
+	.uleb128 0x14
+	.2byte	0x1220
+	.byte	0xc
+	.byte	0x13
+	.4byte	0x370
+	.uleb128 0xe
+	.4byte	.LASF51
+	.byte	0xc
+	.byte	0x14
+	.4byte	0x10b
+	.byte	0
+	.uleb128 0xe
+	.4byte	.LASF52
+	.byte	0xc
+	.byte	0x15
+	.4byte	0x100
+	.byte	0x8
+	.uleb128 0xe
+	.4byte	.LASF53
+	.byte	0xc
+	.byte	0x16
+	.4byte	0x10b
+	.byte	0x10
+	.uleb128 0xe
+	.4byte	.LASF54
+	.byte	0xc
+	.byte	0x17
+	.4byte	0x370
+	.byte	0x18
+	.uleb128 0x15
+	.4byte	.LASF55
+	.byte	0xc
+	.byte	0x18
+	.4byte	0x381
+	.2byte	0x1018
+	.uleb128 0x16
+	.string	"mtd"
+	.byte	0xc
+	.byte	0x31
+	.4byte	0x397
+	.2byte	0x1218
+	.byte	0
+	.uleb128 0xa
+	.4byte	0x10b
+	.4byte	0x381
+	.uleb128 0x17
+	.4byte	0xda
+	.2byte	0x1ff
+	.byte	0
+	.uleb128 0xa
+	.4byte	0x29
+	.4byte	0x392
+	.uleb128 0x17
+	.4byte	0xda
+	.2byte	0x1ff
+	.byte	0
+	.uleb128 0x18
+	.4byte	.LASF318
+	.uleb128 0x8
+	.byte	0x8
+	.4byte	0x392
+	.uleb128 0x2
+	.4byte	.LASF56
+	.byte	0xc
+	.byte	0x37
+	.4byte	0x31c
+	.uleb128 0xa
+	.4byte	0x39d
+	.4byte	0x3b3
+	.uleb128 0xb
+	.byte	0
+	.uleb128 0x4
+	.4byte	.LASF57
+	.byte	0xc
+	.byte	0x39
+	.4byte	0x3a8
+	.uleb128 0x3
+	.byte	0x10
+	.byte	0x4
+	.4byte	.LASF58
+	.uleb128 0xd
+	.4byte	.LASF59
+	.byte	0x10
+	.byte	0xd
+	.byte	0x10
+	.4byte	0x3ea
+	.uleb128 0xe
+	.4byte	.LASF60
+	.byte	0xd
+	.byte	0x11
+	.4byte	0xc4
+	.byte	0
+	.uleb128 0xe
+	.4byte	.LASF51
+	.byte	0xd
+	.byte	0x12
+	.4byte	0xcf
+	.byte	0x8
+	.byte	0
+	.uleb128 0x19
+	.4byte	.LASF61
+	.2byte	0x120
+	.byte	0xd
+	.byte	0x15
+	.4byte	0x41c
+	.uleb128 0xf
+	.string	"cnt"
+	.byte	0xd
+	.byte	0x16
+	.4byte	0x3b
+	.byte	0
+	.uleb128 0xe
+	.4byte	.LASF51
+	.byte	0xd
+	.byte	0x17
+	.4byte	0xcf
+	.byte	0x8
+	.uleb128 0xe
+	.4byte	.LASF62
+	.byte	0xd
+	.byte	0x18
+	.4byte	0x41c
+	.byte	0x10
+	.byte	0
+	.uleb128 0xa
+	.4byte	0x3c5
+	.4byte	0x42c
+	.uleb128 0x11
+	.4byte	0xda
+	.byte	0x10
+	.byte	0
+	.uleb128 0x1a
+	.string	"lmb"
+	.2byte	0x240
+	.byte	0xd
+	.byte	0x1b
+	.4byte	0x453
+	.uleb128 0xe
+	.4byte	.LASF63
+	.byte	0xd
+	.byte	0x1c
+	.4byte	0x3ea
+	.byte	0
+	.uleb128 0x15
+	.4byte	.LASF64
+	.byte	0xd
+	.byte	0x1d
+	.4byte	0x3ea
+	.2byte	0x120
+	.byte	0
+	.uleb128 0x1b
+	.string	"lmb"
+	.byte	0xd
+	.byte	0x20
+	.4byte	0x42c
+	.uleb128 0x1c
+	.byte	0x10
+	.byte	0xe
+	.byte	0x5d
+	.4byte	0x47f
+	.uleb128 0xe
+	.4byte	.LASF54
+	.byte	0xe
+	.byte	0x5e
+	.4byte	0xb9
+	.byte	0
+	.uleb128 0xe
+	.4byte	.LASF51
+	.byte	0xe
+	.byte	0x5f
+	.4byte	0xb9
+	.byte	0x8
+	.byte	0
+	.uleb128 0xd
+	.4byte	.LASF65
+	.byte	0xb0
+	.byte	0xe
+	.byte	0x1b
+	.4byte	0x57c
+	.uleb128 0xe
+	.4byte	.LASF66
+	.byte	0xe
+	.byte	0x1c
+	.4byte	0x3b
+	.byte	0
+	.uleb128 0xe
+	.4byte	.LASF67
+	.byte	0xe
+	.byte	0x1d
+	.4byte	0xcf
+	.byte	0x8
+	.uleb128 0xe
+	.4byte	.LASF68
+	.byte	0xe
+	.byte	0x1e
+	.4byte	0x3b
+	.byte	0x10
+	.uleb128 0xe
+	.4byte	.LASF69
+	.byte	0xe
+	.byte	0x1f
+	.4byte	0x3b
+	.byte	0x18
+	.uleb128 0xe
+	.4byte	.LASF70
+	.byte	0xe
+	.byte	0x20
+	.4byte	0x3b
+	.byte	0x20
+	.uleb128 0xe
+	.4byte	.LASF71
+	.byte	0xe
+	.byte	0x21
+	.4byte	0x3b
+	.byte	0x28
+	.uleb128 0xe
+	.4byte	.LASF72
+	.byte	0xe
+	.byte	0x22
+	.4byte	0x3b
+	.byte	0x30
+	.uleb128 0xe
+	.4byte	.LASF73
+	.byte	0xe
+	.byte	0x24
+	.4byte	0x3b
+	.byte	0x38
+	.uleb128 0xe
+	.4byte	.LASF74
+	.byte	0xe
+	.byte	0x25
+	.4byte	0x3b
+	.byte	0x40
+	.uleb128 0xe
+	.4byte	.LASF75
+	.byte	0xe
+	.byte	0x26
+	.4byte	0x3b
+	.byte	0x48
+	.uleb128 0xe
+	.4byte	.LASF76
+	.byte	0xe
+	.byte	0x31
+	.4byte	0x3b
+	.byte	0x50
+	.uleb128 0xe
+	.4byte	.LASF77
+	.byte	0xe
+	.byte	0x32
+	.4byte	0x3b
+	.byte	0x58
+	.uleb128 0xe
+	.4byte	.LASF78
+	.byte	0xe
+	.byte	0x33
+	.4byte	0x282
+	.byte	0x60
+	.uleb128 0xe
+	.4byte	.LASF79
+	.byte	0xe
+	.byte	0x34
+	.4byte	0x42
+	.byte	0x66
+	.uleb128 0xe
+	.4byte	.LASF80
+	.byte	0xe
+	.byte	0x35
+	.4byte	0x3b
+	.byte	0x68
+	.uleb128 0xe
+	.4byte	.LASF81
+	.byte	0xe
+	.byte	0x36
+	.4byte	0x3b
+	.byte	0x70
+	.uleb128 0xe
+	.4byte	.LASF82
+	.byte	0xe
+	.byte	0x57
+	.4byte	0x10b
+	.byte	0x78
+	.uleb128 0xe
+	.4byte	.LASF83
+	.byte	0xe
+	.byte	0x58
+	.4byte	0x10b
+	.byte	0x80
+	.uleb128 0xe
+	.4byte	.LASF84
+	.byte	0xe
+	.byte	0x5b
+	.4byte	0x7f
+	.byte	0x88
+	.uleb128 0xe
+	.4byte	.LASF85
+	.byte	0xe
+	.byte	0x60
+	.4byte	0x57c
+	.byte	0x90
+	.byte	0
+	.uleb128 0xa
+	.4byte	0x45e
+	.4byte	0x58c
+	.uleb128 0x11
+	.4byte	0xda
+	.byte	0x1
+	.byte	0
+	.uleb128 0x2
+	.4byte	.LASF86
+	.byte	0xe
+	.byte	0x62
+	.4byte	0x47f
+	.uleb128 0x4
+	.4byte	.LASF87
+	.byte	0xf
+	.byte	0x13
+	.4byte	0x10b
+	.uleb128 0x4
+	.4byte	.LASF88
+	.byte	0xf
+	.byte	0x14
+	.4byte	0x10b
+	.uleb128 0x4
+	.4byte	.LASF89
+	.byte	0xf
+	.byte	0x15
+	.4byte	0x10b
+	.uleb128 0x4
+	.4byte	.LASF90
+	.byte	0xf
+	.byte	0x16
+	.4byte	0x10b
+	.uleb128 0x4
+	.4byte	.LASF91
+	.byte	0xf
+	.byte	0x17
+	.4byte	0x10b
+	.uleb128 0x4
+	.4byte	.LASF92
+	.byte	0xf
+	.byte	0x18
+	.4byte	0x10b
+	.uleb128 0x4
+	.4byte	.LASF93
+	.byte	0xf
+	.byte	0x19
+	.4byte	0x10b
+	.uleb128 0x2
+	.4byte	.LASF94
+	.byte	0x10
+	.byte	0x11
+	.4byte	0x12c
+	.uleb128 0xd
+	.4byte	.LASF95
+	.byte	0x28
+	.byte	0x11
+	.byte	0x39
+	.4byte	0x674
+	.uleb128 0xe
+	.4byte	.LASF96
+	.byte	0x11
+	.byte	0x3a
+	.4byte	0x5e4
+	.byte	0
+	.uleb128 0xe
+	.4byte	.LASF97
+	.byte	0x11
+	.byte	0x3b
+	.4byte	0x5e4
+	.byte	0x4
+	.uleb128 0xe
+	.4byte	.LASF98
+	.byte	0x11
+	.byte	0x3c
+	.4byte	0x5e4
+	.byte	0x8
+	.uleb128 0xe
+	.4byte	.LASF99
+	.byte	0x11
+	.byte	0x3d
+	.4byte	0x5e4
+	.byte	0xc
+	.uleb128 0xe
+	.4byte	.LASF100
+	.byte	0x11
+	.byte	0x3e
+	.4byte	0x5e4
+	.byte	0x10
+	.uleb128 0xe
+	.4byte	.LASF101
+	.byte	0x11
+	.byte	0x3f
+	.4byte	0x5e4
+	.byte	0x14
+	.uleb128 0xe
+	.4byte	.LASF102
+	.byte	0x11
+	.byte	0x40
+	.4byte	0x5e4
+	.byte	0x18
+	.uleb128 0xe
+	.4byte	.LASF103
+	.byte	0x11
+	.byte	0x43
+	.4byte	0x5e4
+	.byte	0x1c
+	.uleb128 0xe
+	.4byte	.LASF104
+	.byte	0x11
+	.byte	0x46
+	.4byte	0x5e4
+	.byte	0x20
+	.uleb128 0xe
+	.4byte	.LASF105
+	.byte	0x11
+	.byte	0x49
+	.4byte	0x5e4
+	.byte	0x24
+	.byte	0
+	.uleb128 0xc
+	.4byte	.LASF106
+	.byte	0x12
+	.2byte	0x136
+	.4byte	0x680
+	.uleb128 0x8
+	.byte	0x8
+	.4byte	0x5ef
+	.uleb128 0x1d
+	.4byte	.LASF107
+	.byte	0x40
+	.byte	0x13
+	.2byte	0x137
+	.4byte	0x730
+	.uleb128 0x1e
+	.4byte	.LASF108
+	.byte	0x13
+	.2byte	0x138
+	.4byte	0x12c
+	.byte	0
+	.uleb128 0x1e
+	.4byte	.LASF109
+	.byte	0x13
+	.2byte	0x139
+	.4byte	0x12c
+	.byte	0x4
+	.uleb128 0x1e
+	.4byte	.LASF110
+	.byte	0x13
+	.2byte	0x13a
+	.4byte	0x12c
+	.byte	0x8
+	.uleb128 0x1e
+	.4byte	.LASF111
+	.byte	0x13
+	.2byte	0x13b
+	.4byte	0x12c
+	.byte	0xc
+	.uleb128 0x1e
+	.4byte	.LASF112
+	.byte	0x13
+	.2byte	0x13c
+	.4byte	0x12c
+	.byte	0x10
+	.uleb128 0x1e
+	.4byte	.LASF113
+	.byte	0x13
+	.2byte	0x13d
+	.4byte	0x12c
+	.byte	0x14
+	.uleb128 0x1e
+	.4byte	.LASF114
+	.byte	0x13
+	.2byte	0x13e
+	.4byte	0x12c
+	.byte	0x18
+	.uleb128 0x1e
+	.4byte	.LASF115
+	.byte	0x13
+	.2byte	0x13f
+	.4byte	0x116
+	.byte	0x1c
+	.uleb128 0x1e
+	.4byte	.LASF116
+	.byte	0x13
+	.2byte	0x140
+	.4byte	0x116
+	.byte	0x1d
+	.uleb128 0x1e
+	.4byte	.LASF117
+	.byte	0x13
+	.2byte	0x141
+	.4byte	0x116
+	.byte	0x1e
+	.uleb128 0x1e
+	.4byte	.LASF118
+	.byte	0x13
+	.2byte	0x142
+	.4byte	0x116
+	.byte	0x1f
+	.uleb128 0x1e
+	.4byte	.LASF119
+	.byte	0x13
+	.2byte	0x143
+	.4byte	0x730
+	.byte	0x20
+	.byte	0
+	.uleb128 0xa
+	.4byte	0x116
+	.4byte	0x740
+	.uleb128 0x11
+	.4byte	0xda
+	.byte	0x1f
+	.byte	0
+	.uleb128 0x1f
+	.4byte	.LASF120
+	.byte	0x13
+	.2byte	0x144
+	.4byte	0x686
+	.uleb128 0x1d
+	.4byte	.LASF121
+	.byte	0x30
+	.byte	0x13
+	.2byte	0x146
+	.4byte	0x7ce
+	.uleb128 0x1e
+	.4byte	.LASF54
+	.byte	0x13
+	.2byte	0x147
+	.4byte	0x10b
+	.byte	0
+	.uleb128 0x20
+	.string	"end"
+	.byte	0x13
+	.2byte	0x147
+	.4byte	0x10b
+	.byte	0x8
+	.uleb128 0x1e
+	.4byte	.LASF122
+	.byte	0x13
+	.2byte	0x148
+	.4byte	0x10b
+	.byte	0x10
+	.uleb128 0x1e
+	.4byte	.LASF123
+	.byte	0x13
+	.2byte	0x148
+	.4byte	0x10b
+	.byte	0x18
+	.uleb128 0x1e
+	.4byte	.LASF124
+	.byte	0x13
+	.2byte	0x149
+	.4byte	0x10b
+	.byte	0x20
+	.uleb128 0x1e
+	.4byte	.LASF125
+	.byte	0x13
+	.2byte	0x14a
+	.4byte	0x116
+	.byte	0x28
+	.uleb128 0x1e
+	.4byte	.LASF126
+	.byte	0x13
+	.2byte	0x14a
+	.4byte	0x116
+	.byte	0x29
+	.uleb128 0x20
+	.string	"os"
+	.byte	0x13
+	.2byte	0x14a
+	.4byte	0x116
+	.byte	0x2a
+	.uleb128 0x1e
+	.4byte	.LASF127
+	.byte	0x13
+	.2byte	0x14b
+	.4byte	0x116
+	.byte	0x2b
+	.byte	0
+	.uleb128 0x1f
+	.4byte	.LASF128
+	.byte	0x13
+	.2byte	0x14c
+	.4byte	0x74c
+	.uleb128 0x21
+	.4byte	.LASF129
+	.2byte	0x380
+	.byte	0x13
+	.2byte	0x152
+	.4byte	0x977
+	.uleb128 0x1e
+	.4byte	.LASF130
+	.byte	0x13
+	.2byte	0x158
+	.4byte	0x977
+	.byte	0
+	.uleb128 0x1e
+	.4byte	.LASF131
+	.byte	0x13
+	.2byte	0x159
+	.4byte	0x740
+	.byte	0x8
+	.uleb128 0x1e
+	.4byte	.LASF132
+	.byte	0x13
+	.2byte	0x15a
+	.4byte	0x10b
+	.byte	0x48
+	.uleb128 0x1e
+	.4byte	.LASF133
+	.byte	0x13
+	.2byte	0x15d
+	.4byte	0xe1
+	.byte	0x50
+	.uleb128 0x1e
+	.4byte	.LASF134
+	.byte	0x13
+	.2byte	0x15f
+	.4byte	0x137
+	.byte	0x58
+	.uleb128 0x1e
+	.4byte	.LASF135
+	.byte	0x13
+	.2byte	0x160
+	.4byte	0xe1
+	.byte	0x60
+	.uleb128 0x1e
+	.4byte	.LASF136
+	.byte	0x13
+	.2byte	0x161
+	.4byte	0x54
+	.byte	0x68
+	.uleb128 0x1e
+	.4byte	.LASF137
+	.byte	0x13
+	.2byte	0x163
+	.4byte	0x137
+	.byte	0x70
+	.uleb128 0x1e
+	.4byte	.LASF138
+	.byte	0x13
+	.2byte	0x164
+	.4byte	0xe1
+	.byte	0x78
+	.uleb128 0x1e
+	.4byte	.LASF139
+	.byte	0x13
+	.2byte	0x165
+	.4byte	0x54
+	.byte	0x80
+	.uleb128 0x1e
+	.4byte	.LASF140
+	.byte	0x13
+	.2byte	0x167
+	.4byte	0x137
+	.byte	0x88
+	.uleb128 0x1e
+	.4byte	.LASF141
+	.byte	0x13
+	.2byte	0x168
+	.4byte	0xe1
+	.byte	0x90
+	.uleb128 0x1e
+	.4byte	.LASF142
+	.byte	0x13
+	.2byte	0x169
+	.4byte	0x54
+	.byte	0x98
+	.uleb128 0x1e
+	.4byte	.LASF143
+	.byte	0x13
+	.2byte	0x16b
+	.4byte	0x137
+	.byte	0xa0
+	.uleb128 0x1e
+	.4byte	.LASF144
+	.byte	0x13
+	.2byte	0x16c
+	.4byte	0xe1
+	.byte	0xa8
+	.uleb128 0x1e
+	.4byte	.LASF145
+	.byte	0x13
+	.2byte	0x16d
+	.4byte	0x54
+	.byte	0xb0
+	.uleb128 0x20
+	.string	"os"
+	.byte	0x13
+	.2byte	0x171
+	.4byte	0x7ce
+	.byte	0xb8
+	.uleb128 0x20
+	.string	"ep"
+	.byte	0x13
+	.2byte	0x172
+	.4byte	0x10b
+	.byte	0xe8
+	.uleb128 0x1e
+	.4byte	.LASF146
+	.byte	0x13
+	.2byte	0x174
+	.4byte	0x10b
+	.byte	0xf0
+	.uleb128 0x1e
+	.4byte	.LASF147
+	.byte	0x13
+	.2byte	0x174
+	.4byte	0x10b
+	.byte	0xf8
+	.uleb128 0x22
+	.4byte	.LASF148
+	.byte	0x13
+	.2byte	0x176
+	.4byte	0xfa
+	.2byte	0x100
+	.uleb128 0x22
+	.4byte	.LASF149
+	.byte	0x13
+	.2byte	0x177
+	.4byte	0x10b
+	.2byte	0x108
+	.uleb128 0x22
+	.4byte	.LASF150
+	.byte	0x13
+	.2byte	0x179
+	.4byte	0x10b
+	.2byte	0x110
+	.uleb128 0x22
+	.4byte	.LASF151
+	.byte	0x13
+	.2byte	0x17a
+	.4byte	0x10b
+	.2byte	0x118
+	.uleb128 0x22
+	.4byte	.LASF152
+	.byte	0x13
+	.2byte	0x17b
+	.4byte	0x10b
+	.2byte	0x120
+	.uleb128 0x22
+	.4byte	.LASF153
+	.byte	0x13
+	.2byte	0x17c
+	.4byte	0x10b
+	.2byte	0x128
+	.uleb128 0x23
+	.string	"kbd"
+	.byte	0x13
+	.2byte	0x17d
+	.4byte	0x97d
+	.2byte	0x130
+	.uleb128 0x22
+	.4byte	.LASF154
+	.byte	0x13
+	.2byte	0x180
+	.4byte	0x54
+	.2byte	0x138
+	.uleb128 0x22
+	.4byte	.LASF155
+	.byte	0x13
+	.2byte	0x18d
+	.4byte	0x54
+	.2byte	0x13c
+	.uleb128 0x23
+	.string	"lmb"
+	.byte	0x13
+	.2byte	0x190
+	.4byte	0x42c
+	.2byte	0x140
+	.byte	0
+	.uleb128 0x8
+	.byte	0x8
+	.4byte	0x740
+	.uleb128 0x8
+	.byte	0x8
+	.4byte	0x58c
+	.uleb128 0x1f
+	.4byte	.LASF156
+	.byte	0x13
+	.2byte	0x196
+	.4byte	0x7da
+	.uleb128 0xc
+	.4byte	.LASF157
+	.byte	0x13
+	.2byte	0x198
+	.4byte	0x983
+	.uleb128 0xa
+	.4byte	0xe7
+	.4byte	0x9ac
+	.uleb128 0x17
+	.4byte	0xda
+	.2byte	0x3ff
+	.byte	0
+	.uleb128 0x24
+	.4byte	.LASF352
+	.byte	0x4
+	.4byte	0x54
+	.byte	0x18
+	.byte	0xe
+	.4byte	0xc15
+	.uleb128 0x25
+	.4byte	.LASF158
+	.byte	0
+	.uleb128 0x25
+	.4byte	.LASF159
+	.byte	0x1
+	.uleb128 0x25
+	.4byte	.LASF160
+	.byte	0x2
+	.uleb128 0x25
+	.4byte	.LASF161
+	.byte	0x3
+	.uleb128 0x25
+	.4byte	.LASF162
+	.byte	0x4
+	.uleb128 0x25
+	.4byte	.LASF163
+	.byte	0x5
+	.uleb128 0x25
+	.4byte	.LASF164
+	.byte	0x6
+	.uleb128 0x25
+	.4byte	.LASF165
+	.byte	0x7
+	.uleb128 0x25
+	.4byte	.LASF166
+	.byte	0x8
+	.uleb128 0x25
+	.4byte	.LASF167
+	.byte	0x9
+	.uleb128 0x25
+	.4byte	.LASF168
+	.byte	0xa
+	.uleb128 0x25
+	.4byte	.LASF169
+	.byte	0xb
+	.uleb128 0x25
+	.4byte	.LASF170
+	.byte	0xc
+	.uleb128 0x25
+	.4byte	.LASF171
+	.byte	0xd
+	.uleb128 0x25
+	.4byte	.LASF172
+	.byte	0xe
+	.uleb128 0x25
+	.4byte	.LASF173
+	.byte	0xf
+	.uleb128 0x25
+	.4byte	.LASF174
+	.byte	0x10
+	.uleb128 0x25
+	.4byte	.LASF175
+	.byte	0x11
+	.uleb128 0x25
+	.4byte	.LASF176
+	.byte	0x12
+	.uleb128 0x25
+	.4byte	.LASF177
+	.byte	0x13
+	.uleb128 0x25
+	.4byte	.LASF178
+	.byte	0x14
+	.uleb128 0x25
+	.4byte	.LASF179
+	.byte	0x15
+	.uleb128 0x25
+	.4byte	.LASF180
+	.byte	0x16
+	.uleb128 0x25
+	.4byte	.LASF181
+	.byte	0x17
+	.uleb128 0x25
+	.4byte	.LASF182
+	.byte	0x18
+	.uleb128 0x25
+	.4byte	.LASF183
+	.byte	0x19
+	.uleb128 0x25
+	.4byte	.LASF184
+	.byte	0x1a
+	.uleb128 0x25
+	.4byte	.LASF185
+	.byte	0x1b
+	.uleb128 0x25
+	.4byte	.LASF186
+	.byte	0x1c
+	.uleb128 0x25
+	.4byte	.LASF187
+	.byte	0x1d
+	.uleb128 0x25
+	.4byte	.LASF188
+	.byte	0x1e
+	.uleb128 0x25
+	.4byte	.LASF189
+	.byte	0x1f
+	.uleb128 0x25
+	.4byte	.LASF190
+	.byte	0x20
+	.uleb128 0x25
+	.4byte	.LASF191
+	.byte	0x21
+	.uleb128 0x25
+	.4byte	.LASF192
+	.byte	0x22
+	.uleb128 0x25
+	.4byte	.LASF193
+	.byte	0x23
+	.uleb128 0x25
+	.4byte	.LASF194
+	.byte	0x24
+	.uleb128 0x25
+	.4byte	.LASF195
+	.byte	0x25
+	.uleb128 0x25
+	.4byte	.LASF196
+	.byte	0x26
+	.uleb128 0x25
+	.4byte	.LASF197
+	.byte	0x27
+	.uleb128 0x25
+	.4byte	.LASF198
+	.byte	0x28
+	.uleb128 0x25
+	.4byte	.LASF199
+	.byte	0x29
+	.uleb128 0x25
+	.4byte	.LASF200
+	.byte	0x2a
+	.uleb128 0x25
+	.4byte	.LASF201
+	.byte	0x2b
+	.uleb128 0x25
+	.4byte	.LASF202
+	.byte	0x2c
+	.uleb128 0x25
+	.4byte	.LASF203
+	.byte	0x2d
+	.uleb128 0x25
+	.4byte	.LASF204
+	.byte	0x2e
+	.uleb128 0x25
+	.4byte	.LASF205
+	.byte	0x2f
+	.uleb128 0x25
+	.4byte	.LASF206
+	.byte	0x30
+	.uleb128 0x25
+	.4byte	.LASF207
+	.byte	0x31
+	.uleb128 0x25
+	.4byte	.LASF208
+	.byte	0x32
+	.uleb128 0x25
+	.4byte	.LASF209
+	.byte	0x33
+	.uleb128 0x25
+	.4byte	.LASF210
+	.byte	0x34
+	.uleb128 0x25
+	.4byte	.LASF211
+	.byte	0x35
+	.uleb128 0x25
+	.4byte	.LASF212
+	.byte	0x36
+	.uleb128 0x25
+	.4byte	.LASF213
+	.byte	0x37
+	.uleb128 0x25
+	.4byte	.LASF214
+	.byte	0x38
+	.uleb128 0x25
+	.4byte	.LASF215
+	.byte	0x39
+	.uleb128 0x25
+	.4byte	.LASF216
+	.byte	0x3a
+	.uleb128 0x25
+	.4byte	.LASF217
+	.byte	0x3b
+	.uleb128 0x25
+	.4byte	.LASF218
+	.byte	0x3c
+	.uleb128 0x25
+	.4byte	.LASF219
+	.byte	0x3d
+	.uleb128 0x25
+	.4byte	.LASF220
+	.byte	0x3e
+	.uleb128 0x25
+	.4byte	.LASF221
+	.byte	0x3f
+	.uleb128 0x25
+	.4byte	.LASF222
+	.byte	0x40
+	.uleb128 0x25
+	.4byte	.LASF223
+	.byte	0x41
+	.uleb128 0x25
+	.4byte	.LASF224
+	.byte	0x42
+	.uleb128 0x25
+	.4byte	.LASF225
+	.byte	0x43
+	.uleb128 0x25
+	.4byte	.LASF226
+	.byte	0x44
+	.uleb128 0x25
+	.4byte	.LASF227
+	.byte	0x45
+	.uleb128 0x25
+	.4byte	.LASF228
+	.byte	0x46
+	.uleb128 0x25
+	.4byte	.LASF229
+	.byte	0x47
+	.uleb128 0x25
+	.4byte	.LASF230
+	.byte	0x48
+	.uleb128 0x25
+	.4byte	.LASF231
+	.byte	0x49
+	.uleb128 0x25
+	.4byte	.LASF232
+	.byte	0x4a
+	.uleb128 0x25
+	.4byte	.LASF233
+	.byte	0x4b
+	.uleb128 0x25
+	.4byte	.LASF234
+	.byte	0x4c
+	.uleb128 0x25
+	.4byte	.LASF235
+	.byte	0x4d
+	.uleb128 0x25
+	.4byte	.LASF236
+	.byte	0x4e
+	.uleb128 0x25
+	.4byte	.LASF237
+	.byte	0x4f
+	.uleb128 0x25
+	.4byte	.LASF238
+	.byte	0x50
+	.uleb128 0x25
+	.4byte	.LASF239
+	.byte	0x51
+	.uleb128 0x25
+	.4byte	.LASF240
+	.byte	0x52
+	.uleb128 0x25
+	.4byte	.LASF241
+	.byte	0x53
+	.uleb128 0x25
+	.4byte	.LASF242
+	.byte	0x54
+	.uleb128 0x25
+	.4byte	.LASF243
+	.byte	0x55
+	.uleb128 0x25
+	.4byte	.LASF244
+	.byte	0x56
+	.uleb128 0x25
+	.4byte	.LASF245
+	.byte	0x57
+	.uleb128 0x25
+	.4byte	.LASF246
+	.byte	0x58
+	.uleb128 0x25
+	.4byte	.LASF247
+	.byte	0x59
+	.uleb128 0x25
+	.4byte	.LASF248
+	.byte	0x5a
+	.uleb128 0x25
+	.4byte	.LASF249
+	.byte	0x5b
+	.uleb128 0x25
+	.4byte	.LASF250
+	.byte	0x5c
+	.uleb128 0x25
+	.4byte	.LASF251
+	.byte	0x5d
+	.uleb128 0x25
+	.4byte	.LASF252
+	.byte	0x5e
+	.uleb128 0x25
+	.4byte	.LASF253
+	.byte	0x5f
+	.uleb128 0x25
+	.4byte	.LASF254
+	.byte	0x60
+	.uleb128 0x25
+	.4byte	.LASF255
+	.byte	0x61
+	.uleb128 0x25
+	.4byte	.LASF256
+	.byte	0x62
+	.uleb128 0x26
+	.4byte	.LASF257
+	.sleb128 -1
+	.byte	0
+	.uleb128 0x27
+	.byte	0x4
+	.4byte	0x7f
+	.byte	0x23
+	.byte	0xf6
+	.4byte	0xc28
+	.uleb128 0x25
+	.4byte	.LASF258
+	.byte	0x5
+	.byte	0
+	.uleb128 0xd
+	.4byte	.LASF259
+	.byte	0x40
+	.byte	0x14
+	.byte	0xc
+	.4byte	0xca1
+	.uleb128 0xe
+	.4byte	.LASF260
+	.byte	0x14
+	.byte	0x22
+	.4byte	0x3b
+	.byte	0
+	.uleb128 0xf
+	.string	"tbu"
+	.byte	0x14
+	.byte	0x23
+	.4byte	0x7f
+	.byte	0x8
+	.uleb128 0xf
+	.string	"tbl"
+	.byte	0x14
+	.byte	0x24
+	.4byte	0x7f
+	.byte	0xc
+	.uleb128 0xe
+	.4byte	.LASF261
+	.byte	0x14
+	.byte	0x25
+	.4byte	0x3b
+	.byte	0x10
+	.uleb128 0xe
+	.4byte	.LASF262
+	.byte	0x14
+	.byte	0x26
+	.4byte	0x8d
+	.byte	0x18
+	.uleb128 0xe
+	.4byte	.LASF263
+	.byte	0x14
+	.byte	0x29
+	.4byte	0x3b
+	.byte	0x20
+	.uleb128 0xe
+	.4byte	.LASF264
+	.byte	0x14
+	.byte	0x2a
+	.4byte	0x3b
+	.byte	0x28
+	.uleb128 0xe
+	.4byte	.LASF265
+	.byte	0x14
+	.byte	0x2c
+	.4byte	0x3b
+	.byte	0x30
+	.uleb128 0xe
+	.4byte	.LASF266
+	.byte	0x14
+	.byte	0x2d
+	.4byte	0x3b
+	.byte	0x38
+	.byte	0
+	.uleb128 0xd
+	.4byte	.LASF267
+	.byte	0x18
+	.byte	0x15
+	.byte	0x22
+	.4byte	0xce9
+	.uleb128 0xe
+	.4byte	.LASF268
+	.byte	0x15
+	.byte	0x23
+	.4byte	0xae
+	.byte	0
+	.uleb128 0xe
+	.4byte	.LASF269
+	.byte	0x15
+	.byte	0x24
+	.4byte	0xae
+	.byte	0x4
+	.uleb128 0xf
+	.string	"id"
+	.byte	0x15
+	.byte	0x25
+	.4byte	0xae
+	.byte	0x8
+	.uleb128 0xe
+	.4byte	.LASF270
+	.byte	0x15
+	.byte	0x26
+	.4byte	0xae
+	.byte	0xc
+	.uleb128 0xe
+	.4byte	.LASF271
+	.byte	0x15
+	.byte	0x27
+	.4byte	0x10b
+	.byte	0x10
+	.byte	0
+	.uleb128 0x19
+	.4byte	.LASF272
+	.2byte	0x1c0
+	.byte	0x15
+	.byte	0x2a
+	.4byte	0xf12
+	.uleb128 0xf
+	.string	"bd"
+	.byte	0x15
+	.byte	0x2b
+	.4byte	0x97d
+	.byte	0
+	.uleb128 0xe
+	.4byte	.LASF42
+	.byte	0x15
+	.byte	0x2c
+	.4byte	0x3b
+	.byte	0x8
+	.uleb128 0xe
+	.4byte	.LASF270
+	.byte	0x15
+	.byte	0x2d
+	.4byte	0x7f
+	.byte	0x10
+	.uleb128 0xe
+	.4byte	.LASF273
+	.byte	0x15
+	.byte	0x2e
+	.4byte	0x3b
+	.byte	0x18
+	.uleb128 0xe
+	.4byte	.LASF274
+	.byte	0x15
+	.byte	0x2f
+	.4byte	0x3b
+	.byte	0x20
+	.uleb128 0xe
+	.4byte	.LASF275
+	.byte	0x15
+	.byte	0x31
+	.4byte	0x3b
+	.byte	0x28
+	.uleb128 0xe
+	.4byte	.LASF276
+	.byte	0x15
+	.byte	0x32
+	.4byte	0x3b
+	.byte	0x30
+	.uleb128 0xe
+	.4byte	.LASF277
+	.byte	0x15
+	.byte	0x3e
+	.4byte	0x3b
+	.byte	0x38
+	.uleb128 0xe
+	.4byte	.LASF278
+	.byte	0x15
+	.byte	0x42
+	.4byte	0x3b
+	.byte	0x40
+	.uleb128 0xe
+	.4byte	.LASF279
+	.byte	0x15
+	.byte	0x43
+	.4byte	0x3b
+	.byte	0x48
+	.uleb128 0xe
+	.4byte	.LASF280
+	.byte	0x15
+	.byte	0x45
+	.4byte	0x3b
+	.byte	0x50
+	.uleb128 0xe
+	.4byte	.LASF281
+	.byte	0x15
+	.byte	0x46
+	.4byte	0x3b
+	.byte	0x58
+	.uleb128 0xe
+	.4byte	.LASF282
+	.byte	0x15
+	.byte	0x47
+	.4byte	0x3b
+	.byte	0x60
+	.uleb128 0xe
+	.4byte	.LASF283
+	.byte	0x15
+	.byte	0x48
+	.4byte	0xcf
+	.byte	0x68
+	.uleb128 0xe
+	.4byte	.LASF284
+	.byte	0x15
+	.byte	0x49
+	.4byte	0x3b
+	.byte	0x70
+	.uleb128 0xe
+	.4byte	.LASF285
+	.byte	0x15
+	.byte	0x4a
+	.4byte	0x3b
+	.byte	0x78
+	.uleb128 0xe
+	.4byte	.LASF286
+	.byte	0x15
+	.byte	0x4b
+	.4byte	0x3b
+	.byte	0x80
+	.uleb128 0xe
+	.4byte	.LASF287
+	.byte	0x15
+	.byte	0x4c
+	.4byte	0x3b
+	.byte	0x88
+	.uleb128 0xe
+	.4byte	.LASF288
+	.byte	0x15
+	.byte	0x4d
+	.4byte	0xf12
+	.byte	0x90
+	.uleb128 0xe
+	.4byte	.LASF289
+	.byte	0x15
+	.byte	0x50
+	.4byte	0x25f
+	.byte	0x98
+	.uleb128 0xe
+	.4byte	.LASF290
+	.byte	0x15
+	.byte	0x51
+	.4byte	0x25f
+	.byte	0xa0
+	.uleb128 0xe
+	.4byte	.LASF291
+	.byte	0x15
+	.byte	0x52
+	.4byte	0x292
+	.byte	0xa8
+	.uleb128 0xe
+	.4byte	.LASF292
+	.byte	0x15
+	.byte	0x57
+	.4byte	0x265
+	.byte	0xb8
+	.uleb128 0xe
+	.4byte	.LASF293
+	.byte	0x15
+	.byte	0x58
+	.4byte	0x137
+	.byte	0xc0
+	.uleb128 0xe
+	.4byte	.LASF294
+	.byte	0x15
+	.byte	0x59
+	.4byte	0x3b
+	.byte	0xc8
+	.uleb128 0xe
+	.4byte	.LASF295
+	.byte	0x15
+	.byte	0x5b
+	.4byte	0xf8a
+	.byte	0xd0
+	.uleb128 0xe
+	.4byte	.LASF296
+	.byte	0x15
+	.byte	0x5c
+	.4byte	0xf8a
+	.byte	0xd8
+	.uleb128 0xe
+	.4byte	.LASF297
+	.byte	0x15
+	.byte	0x5e
+	.4byte	0x265
+	.byte	0xe0
+	.uleb128 0xe
+	.4byte	.LASF298
+	.byte	0x15
+	.byte	0x5f
+	.4byte	0x265
+	.byte	0xe8
+	.uleb128 0xf
+	.string	"jt"
+	.byte	0x15
+	.byte	0x60
+	.4byte	0xf95
+	.byte	0xf0
+	.uleb128 0xe
+	.4byte	.LASF299
+	.byte	0x15
+	.byte	0x61
+	.4byte	0xf9b
+	.byte	0xf8
+	.uleb128 0x15
+	.4byte	.LASF300
+	.byte	0x15
+	.byte	0x6b
+	.4byte	0x7f
+	.2byte	0x118
+	.uleb128 0x15
+	.4byte	.LASF301
+	.byte	0x15
+	.byte	0x6c
+	.4byte	0x7f
+	.2byte	0x11c
+	.uleb128 0x15
+	.4byte	.LASF302
+	.byte	0x15
+	.byte	0x6e
+	.4byte	0x3b
+	.2byte	0x120
+	.uleb128 0x15
+	.4byte	.LASF303
+	.byte	0x15
+	.byte	0x6f
+	.4byte	0x3b
+	.2byte	0x128
+	.uleb128 0x15
+	.4byte	.LASF304
+	.byte	0x15
+	.byte	0x70
+	.4byte	0x3b
+	.2byte	0x130
+	.uleb128 0x15
+	.4byte	.LASF305
+	.byte	0x15
+	.byte	0x79
+	.4byte	0x25f
+	.2byte	0x138
+	.uleb128 0x15
+	.4byte	.LASF127
+	.byte	0x15
+	.byte	0x7a
+	.4byte	0xc28
+	.2byte	0x140
+	.uleb128 0x15
+	.4byte	.LASF306
+	.byte	0x15
+	.byte	0x80
+	.4byte	0x10b
+	.2byte	0x180
+	.uleb128 0x15
+	.4byte	.LASF307
+	.byte	0x15
+	.byte	0x81
+	.4byte	0x10b
+	.2byte	0x188
+	.uleb128 0x15
+	.4byte	.LASF308
+	.byte	0x15
+	.byte	0x87
+	.4byte	0xc4
+	.2byte	0x190
+	.uleb128 0x15
+	.4byte	.LASF309
+	.byte	0x15
+	.byte	0x8c
+	.4byte	0xca1
+	.2byte	0x198
+	.uleb128 0x15
+	.4byte	.LASF310
+	.byte	0x15
+	.byte	0x8d
+	.4byte	0x10b
+	.2byte	0x1b0
+	.uleb128 0x15
+	.4byte	.LASF311
+	.byte	0x15
+	.byte	0x8e
+	.4byte	0x54
+	.2byte	0x1b8
+	.byte	0
+	.uleb128 0x8
+	.byte	0x8
+	.4byte	0xce9
+	.uleb128 0xd
+	.4byte	.LASF312
+	.byte	0x40
+	.byte	0x16
+	.byte	0x2c
+	.4byte	0xf85
+	.uleb128 0xe
+	.4byte	.LASF28
+	.byte	0x16
+	.byte	0x2d
+	.4byte	0xe1
+	.byte	0
+	.uleb128 0xe
+	.4byte	.LASF126
+	.byte	0x16
+	.byte	0x2e
+	.4byte	0xe1
+	.byte	0x8
+	.uleb128 0xe
+	.4byte	.LASF313
+	.byte	0x16
+	.byte	0x2f
+	.4byte	0x12be
+	.byte	0x10
+	.uleb128 0xe
+	.4byte	.LASF314
+	.byte	0x16
+	.byte	0x30
+	.4byte	0xe1
+	.byte	0x18
+	.uleb128 0xe
+	.4byte	.LASF315
+	.byte	0x16
+	.byte	0x32
+	.4byte	0x1306
+	.byte	0x20
+	.uleb128 0xe
+	.4byte	.LASF34
+	.byte	0x16
+	.byte	0x33
+	.4byte	0xf8a
+	.byte	0x28
+	.uleb128 0xe
+	.4byte	.LASF316
+	.byte	0x16
+	.byte	0x34
+	.4byte	0xf8a
+	.byte	0x30
+	.uleb128 0xe
+	.4byte	.LASF317
+	.byte	0x16
+	.byte	0x35
+	.4byte	0xf8a
+	.byte	0x38
+	.byte	0
+	.uleb128 0x7
+	.4byte	0xf18
+	.uleb128 0x8
+	.byte	0x8
+	.4byte	0xf18
+	.uleb128 0x18
+	.4byte	.LASF319
+	.uleb128 0x8
+	.byte	0x8
+	.4byte	0xf90
+	.uleb128 0xa
+	.4byte	0xe7
+	.4byte	0xfab
+	.uleb128 0x11
+	.4byte	0xda
+	.byte	0x1f
+	.byte	0
+	.uleb128 0x2
+	.4byte	.LASF320
+	.byte	0x15
+	.byte	0x9b
+	.4byte	0xce9
+	.uleb128 0x28
+	.4byte	0xfab
+	.uleb128 0x4
+	.4byte	.LASF321
+	.byte	0x2
+	.byte	0xad
+	.4byte	0x10b
+	.uleb128 0xa
+	.4byte	0x94
+	.4byte	0xfd1
+	.uleb128 0xb
+	.byte	0
+	.uleb128 0x4
+	.4byte	.LASF322
+	.byte	0x2
+	.byte	0xaf
+	.4byte	0xfc6
+	.uleb128 0x4
+	.4byte	.LASF323
+	.byte	0x2
+	.byte	0xb0
+	.4byte	0xfc6
+	.uleb128 0x4
+	.4byte	.LASF324
+	.byte	0x2
+	.byte	0xfe
+	.4byte	0x10b
+	.uleb128 0x4
+	.4byte	.LASF325
+	.byte	0x2
+	.byte	0xff
+	.4byte	0x10b
+	.uleb128 0xc
+	.4byte	.LASF326
+	.byte	0x2
+	.2byte	0x100
+	.4byte	0x10b
+	.uleb128 0xd
+	.4byte	.LASF327
+	.byte	0x4
+	.byte	0x17
+	.byte	0x2e
+	.4byte	0x1022
+	.uleb128 0xe
+	.4byte	.LASF328
+	.byte	0x17
+	.byte	0x2f
+	.4byte	0x12c
+	.byte	0
+	.byte	0
+	.uleb128 0x8
+	.byte	0x8
+	.4byte	0x29
+	.uleb128 0x12
+	.4byte	0x54
+	.4byte	0x1037
+	.uleb128 0x13
+	.4byte	0x25f
+	.byte	0
+	.uleb128 0x8
+	.byte	0x8
+	.4byte	0x1028
+	.uleb128 0xa
+	.4byte	0x94
+	.4byte	0x104d
+	.uleb128 0x11
+	.4byte	0xda
+	.byte	0x5
+	.byte	0
+	.uleb128 0xc
+	.4byte	.LASF329
+	.byte	0x17
+	.2byte	0x1fd
+	.4byte	0x1009
+	.uleb128 0xc
+	.4byte	.LASF330
+	.byte	0x17
+	.2byte	0x1fe
+	.4byte	0x1009
+	.uleb128 0xc
+	.4byte	.LASF331
+	.byte	0x17
+	.2byte	0x200
+	.4byte	0x1009
+	.uleb128 0xc
+	.4byte	.LASF332
+	.byte	0x17
+	.2byte	0x205
+	.4byte	0xf9b
+	.uleb128 0xc
+	.4byte	.LASF333
+	.byte	0x17
+	.2byte	0x206
+	.4byte	0xf9b
+	.uleb128 0xa
+	.4byte	0xe7
+	.4byte	0x1099
+	.uleb128 0x11
+	.4byte	0xda
+	.byte	0x3f
+	.byte	0
+	.uleb128 0xc
+	.4byte	.LASF334
+	.byte	0x17
+	.2byte	0x207
+	.4byte	0x1089
+	.uleb128 0xc
+	.4byte	.LASF335
+	.byte	0x17
+	.2byte	0x209
+	.4byte	0x103d
+	.uleb128 0xc
+	.4byte	.LASF336
+	.byte	0x17
+	.2byte	0x20a
+	.4byte	0x103d
+	.uleb128 0xc
+	.4byte	.LASF337
+	.byte	0x17
+	.2byte	0x20b
+	.4byte	0x1009
+	.uleb128 0xc
+	.4byte	.LASF338
+	.byte	0x17
+	.2byte	0x20c
+	.4byte	0x1009
+	.uleb128 0xc
+	.4byte	.LASF339
+	.byte	0x17
+	.2byte	0x20d
+	.4byte	0x1022
+	.uleb128 0xa
+	.4byte	0x1022
+	.4byte	0x10f1
+	.uleb128 0x11
+	.4byte	0xda
+	.byte	0x3
+	.byte	0
+	.uleb128 0xc
+	.4byte	.LASF340
+	.byte	0x17
+	.2byte	0x20e
+	.4byte	0x10e1
+	.uleb128 0xc
+	.4byte	.LASF341
+	.byte	0x17
+	.2byte	0x20f
+	.4byte	0x1022
+	.uleb128 0xc
+	.4byte	.LASF342
+	.byte	0x17
+	.2byte	0x210
+	.4byte	0x54
+	.uleb128 0xa
+	.4byte	0x9e
+	.4byte	0x1125
+	.uleb128 0x11
+	.4byte	0xda
+	.byte	0x5
+	.byte	0
+	.uleb128 0x7
+	.4byte	0x1115
+	.uleb128 0xc
+	.4byte	.LASF343
+	.byte	0x17
+	.2byte	0x211
+	.4byte	0x1125
+	.uleb128 0xc
+	.4byte	.LASF344
+	.byte	0x17
+	.2byte	0x212
+	.4byte	0x1125
+	.uleb128 0xc
+	.4byte	.LASF345
+	.byte	0x17
+	.2byte	0x216
+	.4byte	0x100
+	.uleb128 0xc
+	.4byte	.LASF346
+	.byte	0x17
+	.2byte	0x217
+	.4byte	0x100
+	.uleb128 0xc
+	.4byte	.LASF347
+	.byte	0x17
+	.2byte	0x219
+	.4byte	0x54
+	.uleb128 0xc
+	.4byte	.LASF348
+	.byte	0x17
+	.2byte	0x220
+	.4byte	0x99b
+	.uleb128 0xc
+	.4byte	.LASF349
+	.byte	0x17
+	.2byte	0x222
+	.4byte	0xae
+	.uleb128 0xc
+	.4byte	.LASF350
+	.byte	0x17
+	.2byte	0x224
+	.4byte	0xae
+	.uleb128 0xc
+	.4byte	.LASF351
+	.byte	0x17
+	.2byte	0x230
+	.4byte	0x1009
+	.uleb128 0x29
+	.4byte	.LASF353
+	.byte	0x4
+	.4byte	0x7f
+	.byte	0x17
+	.2byte	0x286
+	.4byte	0x11c0
+	.uleb128 0x25
+	.4byte	.LASF354
+	.byte	0
+	.uleb128 0x25
+	.4byte	.LASF355
+	.byte	0x1
+	.uleb128 0x25
+	.4byte	.LASF356
+	.byte	0x2
+	.uleb128 0x25
+	.4byte	.LASF357
+	.byte	0x3
+	.byte	0
+	.uleb128 0xc
+	.4byte	.LASF358
+	.byte	0x17
+	.2byte	0x28c
+	.4byte	0x1196
+	.uleb128 0x8
+	.byte	0x8
+	.4byte	0x94
+	.uleb128 0x8
+	.byte	0x8
+	.4byte	0xa3
+	.uleb128 0x8
+	.byte	0x8
+	.4byte	0xae
+	.uleb128 0xd
+	.4byte	.LASF27
+	.byte	0x78
+	.byte	0x8
+	.byte	0xf1
+	.4byte	0x12b9
+	.uleb128 0xe
+	.4byte	.LASF28
+	.byte	0x8
+	.byte	0xf2
+	.4byte	0xfa
+	.byte	0
+	.uleb128 0xf
+	.string	"id"
+	.byte	0x8
+	.byte	0xf3
+	.4byte	0x9ac
+	.byte	0x8
+	.uleb128 0xe
+	.4byte	.LASF359
+	.byte	0x8
+	.byte	0xf4
+	.4byte	0x141c
+	.byte	0x10
+	.uleb128 0xe
+	.4byte	.LASF360
+	.byte	0x8
+	.byte	0xf5
+	.4byte	0x1037
+	.byte	0x18
+	.uleb128 0xe
+	.4byte	.LASF361
+	.byte	0x8
+	.byte	0xf6
+	.4byte	0x1037
+	.byte	0x20
+	.uleb128 0xe
+	.4byte	.LASF362
+	.byte	0x8
+	.byte	0xf7
+	.4byte	0x1037
+	.byte	0x28
+	.uleb128 0xe
+	.4byte	.LASF363
+	.byte	0x8
+	.byte	0xf8
+	.4byte	0x1037
+	.byte	0x30
+	.uleb128 0xe
+	.4byte	.LASF364
+	.byte	0x8
+	.byte	0xf9
+	.4byte	0x1037
+	.byte	0x38
+	.uleb128 0xe
+	.4byte	.LASF365
+	.byte	0x8
+	.byte	0xfa
+	.4byte	0x1037
+	.byte	0x40
+	.uleb128 0xe
+	.4byte	.LASF366
+	.byte	0x8
+	.byte	0xfb
+	.4byte	0x1037
+	.byte	0x48
+	.uleb128 0xe
+	.4byte	.LASF367
+	.byte	0x8
+	.byte	0xfc
+	.4byte	0x1037
+	.byte	0x50
+	.uleb128 0xe
+	.4byte	.LASF368
+	.byte	0x8
+	.byte	0xfd
+	.4byte	0x54
+	.byte	0x58
+	.uleb128 0xe
+	.4byte	.LASF369
+	.byte	0x8
+	.byte	0xfe
+	.4byte	0x54
+	.byte	0x5c
+	.uleb128 0xe
+	.4byte	.LASF370
+	.byte	0x8
+	.byte	0xff
+	.4byte	0x54
+	.byte	0x60
+	.uleb128 0x1e
+	.4byte	.LASF371
+	.byte	0x8
+	.2byte	0x100
+	.4byte	0x54
+	.byte	0x64
+	.uleb128 0x20
+	.string	"ops"
+	.byte	0x8
+	.2byte	0x101
+	.4byte	0x265
+	.byte	0x68
+	.uleb128 0x1e
+	.4byte	.LASF42
+	.byte	0x8
+	.2byte	0x102
+	.4byte	0x121
+	.byte	0x70
+	.byte	0
+	.uleb128 0x7
+	.4byte	0x11de
+	.uleb128 0x2
+	.4byte	.LASF313
+	.byte	0x16
+	.byte	0xf
+	.4byte	0xae
+	.uleb128 0xd
+	.4byte	.LASF372
+	.byte	0x20
+	.byte	0x16
+	.byte	0x19
+	.4byte	0x1306
+	.uleb128 0xe
+	.4byte	.LASF28
+	.byte	0x16
+	.byte	0x1a
+	.4byte	0xfa
+	.byte	0
+	.uleb128 0xe
+	.4byte	.LASF373
+	.byte	0x16
+	.byte	0x1b
+	.4byte	0x54
+	.byte	0x8
+	.uleb128 0xe
+	.4byte	.LASF374
+	.byte	0x16
+	.byte	0x1c
+	.4byte	0x137
+	.byte	0x10
+	.uleb128 0xe
+	.4byte	.LASF47
+	.byte	0x16
+	.byte	0x1d
+	.4byte	0x1306
+	.byte	0x18
+	.byte	0
+	.uleb128 0x8
+	.byte	0x8
+	.4byte	0x12c9
+	.uleb128 0x2a
+	.string	"gd"
+	.byte	0x16
+	.byte	0x57
+	.4byte	0x1316
+	.uleb128 0x8
+	.byte	0x8
+	.4byte	0xfb6
+	.uleb128 0x2b
+	.4byte	.LASF462
+	.byte	0x8
+	.byte	0x19
+	.byte	0x33
+	.4byte	0x133e
+	.uleb128 0x2c
+	.string	"np"
+	.byte	0x19
+	.byte	0x34
+	.4byte	0x133e
+	.uleb128 0x2d
+	.4byte	.LASF375
+	.byte	0x19
+	.byte	0x35
+	.4byte	0xf3
+	.byte	0
+	.uleb128 0x8
+	.byte	0x8
+	.4byte	0xf85
+	.uleb128 0x2
+	.4byte	.LASF376
+	.byte	0x19
+	.byte	0x36
+	.4byte	0x131c
+	.uleb128 0xc
+	.4byte	.LASF377
+	.byte	0x1a
+	.2byte	0x3ba
+	.4byte	0x10b
+	.uleb128 0xc
+	.4byte	.LASF378
+	.byte	0x1a
+	.2byte	0x3bb
+	.4byte	0x10b
+	.uleb128 0xc
+	.4byte	.LASF379
+	.byte	0x1a
+	.2byte	0x3bc
+	.4byte	0x10b
+	.uleb128 0xd
+	.4byte	.LASF380
+	.byte	0x4
+	.byte	0x1b
+	.byte	0xd
+	.4byte	0x138c
+	.uleb128 0xf
+	.string	"pid"
+	.byte	0x1b
+	.byte	0xe
+	.4byte	0x54
+	.byte	0
+	.byte	0
+	.uleb128 0x4
+	.4byte	.LASF381
+	.byte	0x1b
+	.byte	0x11
+	.4byte	0x1397
+	.uleb128 0x8
+	.byte	0x8
+	.4byte	0x1373
+	.uleb128 0x8
+	.byte	0x8
+	.4byte	0x12b9
+	.uleb128 0xd
+	.4byte	.LASF36
+	.byte	0x38
+	.byte	0x1c
+	.byte	0x23
+	.4byte	0x13ec
+	.uleb128 0xe
+	.4byte	.LASF35
+	.byte	0x1c
+	.byte	0x24
+	.4byte	0x137
+	.byte	0
+	.uleb128 0xe
+	.4byte	.LASF382
+	.byte	0x1c
+	.byte	0x25
+	.4byte	0x1506
+	.byte	0x8
+	.uleb128 0xe
+	.4byte	.LASF383
+	.byte	0x1c
+	.byte	0x26
+	.4byte	0x292
+	.byte	0x10
+	.uleb128 0xe
+	.4byte	.LASF41
+	.byte	0x1c
+	.byte	0x27
+	.4byte	0x292
+	.byte	0x20
+	.uleb128 0xe
+	.4byte	.LASF384
+	.byte	0x1c
+	.byte	0x29
+	.4byte	0x2b7
+	.byte	0x30
+	.byte	0
+	.uleb128 0x8
+	.byte	0x8
+	.4byte	0x13a3
+	.uleb128 0xd
+	.4byte	.LASF385
+	.byte	0x10
+	.byte	0x8
+	.byte	0xb8
+	.4byte	0x1417
+	.uleb128 0xe
+	.4byte	.LASF386
+	.byte	0x8
+	.byte	0xb9
+	.4byte	0xe1
+	.byte	0
+	.uleb128 0xe
+	.4byte	.LASF387
+	.byte	0x8
+	.byte	0xba
+	.4byte	0x10b
+	.byte	0x8
+	.byte	0
+	.uleb128 0x7
+	.4byte	0x13f2
+	.uleb128 0x8
+	.byte	0x8
+	.4byte	0x1417
+	.uleb128 0xd
+	.4byte	.LASF388
+	.byte	0x80
+	.byte	0x1c
+	.byte	0x57
+	.4byte	0x1506
+	.uleb128 0xe
+	.4byte	.LASF28
+	.byte	0x1c
+	.byte	0x58
+	.4byte	0xe1
+	.byte	0
+	.uleb128 0xf
+	.string	"id"
+	.byte	0x1c
+	.byte	0x59
+	.4byte	0x9ac
+	.byte	0x8
+	.uleb128 0xe
+	.4byte	.LASF389
+	.byte	0x1c
+	.byte	0x5a
+	.4byte	0x1037
+	.byte	0x10
+	.uleb128 0xe
+	.4byte	.LASF390
+	.byte	0x1c
+	.byte	0x5b
+	.4byte	0x1037
+	.byte	0x18
+	.uleb128 0xe
+	.4byte	.LASF391
+	.byte	0x1c
+	.byte	0x5c
+	.4byte	0x1037
+	.byte	0x20
+	.uleb128 0xe
+	.4byte	.LASF392
+	.byte	0x1c
+	.byte	0x5d
+	.4byte	0x1037
+	.byte	0x28
+	.uleb128 0xe
+	.4byte	.LASF393
+	.byte	0x1c
+	.byte	0x5e
+	.4byte	0x1037
+	.byte	0x30
+	.uleb128 0xe
+	.4byte	.LASF365
+	.byte	0x1c
+	.byte	0x5f
+	.4byte	0x1037
+	.byte	0x38
+	.uleb128 0xe
+	.4byte	.LASF366
+	.byte	0x1c
+	.byte	0x60
+	.4byte	0x1037
+	.byte	0x40
+	.uleb128 0xe
+	.4byte	.LASF394
+	.byte	0x1c
+	.byte	0x61
+	.4byte	0x151b
+	.byte	0x48
+	.uleb128 0xe
+	.4byte	.LASF395
+	.byte	0x1c
+	.byte	0x62
+	.4byte	0x151b
+	.byte	0x50
+	.uleb128 0xe
+	.4byte	.LASF368
+	.byte	0x1c
+	.byte	0x63
+	.4byte	0x54
+	.byte	0x58
+	.uleb128 0xe
+	.4byte	.LASF396
+	.byte	0x1c
+	.byte	0x64
+	.4byte	0x54
+	.byte	0x5c
+	.uleb128 0xe
+	.4byte	.LASF397
+	.byte	0x1c
+	.byte	0x65
+	.4byte	0x54
+	.byte	0x60
+	.uleb128 0xe
+	.4byte	.LASF370
+	.byte	0x1c
+	.byte	0x66
+	.4byte	0x54
+	.byte	0x64
+	.uleb128 0xe
+	.4byte	.LASF371
+	.byte	0x1c
+	.byte	0x67
+	.4byte	0x54
+	.byte	0x68
+	.uleb128 0xf
+	.string	"ops"
+	.byte	0x1c
+	.byte	0x68
+	.4byte	0x265
+	.byte	0x70
+	.uleb128 0xe
+	.4byte	.LASF42
+	.byte	0x1c
+	.byte	0x69
+	.4byte	0x121
+	.byte	0x78
+	.byte	0
+	.uleb128 0x8
+	.byte	0x8
+	.4byte	0x1422
+	.uleb128 0x12
+	.4byte	0x54
+	.4byte	0x151b
+	.uleb128 0x13
+	.4byte	0x13ec
+	.byte	0
+	.uleb128 0x8
+	.byte	0x8
+	.4byte	0x150c
+	.uleb128 0x4
+	.4byte	.LASF398
+	.byte	0x1d
+	.byte	0x49
+	.4byte	0x7f
+	.uleb128 0x24
+	.4byte	.LASF399
+	.byte	0x4
+	.4byte	0x7f
+	.byte	0x1e
+	.byte	0x15
+	.4byte	0x155b
+	.uleb128 0x25
+	.4byte	.LASF400
+	.byte	0x1
+	.uleb128 0x25
+	.4byte	.LASF401
+	.byte	0x2
+	.uleb128 0x25
+	.4byte	.LASF402
+	.byte	0x4
+	.uleb128 0x25
+	.4byte	.LASF403
+	.byte	0x8
+	.uleb128 0x25
+	.4byte	.LASF404
+	.byte	0x10
+	.byte	0
+	.uleb128 0xd
+	.4byte	.LASF405
+	.byte	0x20
+	.byte	0x1e
+	.byte	0x61
+	.4byte	0x1598
+	.uleb128 0xe
+	.4byte	.LASF406
+	.byte	0x1e
+	.byte	0x6b
+	.4byte	0x15bb
+	.byte	0
+	.uleb128 0xe
+	.4byte	.LASF407
+	.byte	0x1e
+	.byte	0x75
+	.4byte	0x15df
+	.byte	0x8
+	.uleb128 0xe
+	.4byte	.LASF408
+	.byte	0x1e
+	.byte	0x7f
+	.4byte	0x15fe
+	.byte	0x10
+	.uleb128 0xe
+	.4byte	.LASF409
+	.byte	0x1e
+	.byte	0x8c
+	.4byte	0x162c
+	.byte	0x18
+	.byte	0
+	.uleb128 0x7
+	.4byte	0x155b
+	.uleb128 0x12
+	.4byte	0x54
+	.4byte	0x15bb
+	.uleb128 0x13
+	.4byte	0x25f
+	.uleb128 0x13
+	.4byte	0x54
+	.uleb128 0x13
+	.4byte	0x137
+	.uleb128 0x13
+	.4byte	0x54
+	.byte	0
+	.uleb128 0x8
+	.byte	0x8
+	.4byte	0x159d
+	.uleb128 0x12
+	.4byte	0x54
+	.4byte	0x15df
+	.uleb128 0x13
+	.4byte	0x25f
+	.uleb128 0x13
+	.4byte	0x54
+	.uleb128 0x13
+	.4byte	0x265
+	.uleb128 0x13
+	.4byte	0x54
+	.byte	0
+	.uleb128 0x8
+	.byte	0x8
+	.4byte	0x15c1
+	.uleb128 0x12
+	.4byte	0x54
+	.4byte	0x15fe
+	.uleb128 0x13
+	.4byte	0x25f
+	.uleb128 0x13
+	.4byte	0x3b
+	.uleb128 0x13
+	.4byte	0x137
+	.byte	0
+	.uleb128 0x8
+	.byte	0x8
+	.4byte	0x15e5
+	.uleb128 0x12
+	.4byte	0x54
+	.4byte	0x162c
+	.uleb128 0x13
+	.4byte	0x25f
+	.uleb128 0x13
+	.4byte	0x54
+	.uleb128 0x13
+	.4byte	0x137
+	.uleb128 0x13
+	.4byte	0x54
+	.uleb128 0x13
+	.4byte	0x137
+	.uleb128 0x13
+	.4byte	0x54
+	.byte	0
+	.uleb128 0x8
+	.byte	0x8
+	.4byte	0x1604
+	.uleb128 0xd
+	.4byte	.LASF410
+	.byte	0x20
+	.byte	0x1f
+	.byte	0x5e
+	.4byte	0x166f
+	.uleb128 0xe
+	.4byte	.LASF60
+	.byte	0x1f
+	.byte	0x5f
+	.4byte	0x137
+	.byte	0
+	.uleb128 0xe
+	.4byte	.LASF411
+	.byte	0x1f
+	.byte	0x60
+	.4byte	0x3b
+	.byte	0x8
+	.uleb128 0xe
+	.4byte	.LASF412
+	.byte	0x1f
+	.byte	0x61
+	.4byte	0x3b
+	.byte	0x10
+	.uleb128 0xe
+	.4byte	.LASF413
+	.byte	0x1f
+	.byte	0x62
+	.4byte	0x3b
+	.byte	0x18
+	.byte	0
+	.uleb128 0xd
+	.4byte	.LASF414
+	.byte	0x20
+	.byte	0x1
+	.byte	0xf
+	.4byte	0x16ac
+	.uleb128 0xe
+	.4byte	.LASF406
+	.byte	0x1
+	.byte	0x10
+	.4byte	0x15bb
+	.byte	0
+	.uleb128 0xe
+	.4byte	.LASF407
+	.byte	0x1
+	.byte	0x11
+	.4byte	0x15df
+	.byte	0x8
+	.uleb128 0xe
+	.4byte	.LASF415
+	.byte	0x1
+	.byte	0x12
+	.4byte	0x16cb
+	.byte	0x10
+	.uleb128 0xe
+	.4byte	.LASF416
+	.byte	0x1
+	.byte	0x15
+	.4byte	0x16cb
+	.byte	0x18
+	.byte	0
+	.uleb128 0x7
+	.4byte	0x166f
+	.uleb128 0x2e
+	.4byte	0x16cb
+	.uleb128 0x13
+	.4byte	0x11d8
+	.uleb128 0x13
+	.4byte	0x11d8
+	.uleb128 0x13
+	.4byte	0x3b
+	.uleb128 0x13
+	.4byte	0x54
+	.byte	0
+	.uleb128 0x8
+	.byte	0x8
+	.4byte	0x16b1
+	.uleb128 0x2f
+	.4byte	.LASF417
+	.byte	0x1
+	.2byte	0x2c7
+	.4byte	0x1598
+	.uleb128 0x9
+	.byte	0x3
+	.8byte	rockchip_secure_otp_ops
+	.uleb128 0x2f
+	.4byte	.LASF418
+	.byte	0x1
+	.2byte	0x2dc
+	.4byte	0x16ac
+	.uleb128 0x9
+	.byte	0x3
+	.8byte	rk3562_data
+	.uleb128 0xa
+	.4byte	0x1417
+	.4byte	0x170d
+	.uleb128 0x11
+	.4byte	0xda
+	.byte	0x1
+	.byte	0
+	.uleb128 0x7
+	.4byte	0x16fd
+	.uleb128 0x2f
+	.4byte	.LASF419
+	.byte	0x1
+	.2byte	0x2e3
+	.4byte	0x170d
+	.uleb128 0x9
+	.byte	0x3
+	.8byte	rockchip_otp_ids
+	.uleb128 0x30
+	.4byte	.LASF420
+	.byte	0x1
+	.2byte	0x2eb
+	.4byte	0x11de
+	.uleb128 0x9
+	.byte	0x3
+	.8byte	_u_boot_list_2_driver_2_rockchip_secure_otp
+	.uleb128 0x31
+	.4byte	.LASF421
+	.byte	0x1
+	.2byte	0x2cd
+	.4byte	0x54
+	.8byte	.LFB277
+	.8byte	.LFE277-.LFB277
+	.uleb128 0x1
+	.byte	0x9c
+	.4byte	0x182b
+	.uleb128 0x32
+	.string	"dev"
+	.byte	0x1
+	.2byte	0x2cd
+	.4byte	0x25f
+	.4byte	.LLST14
+	.uleb128 0x33
+	.string	"otp"
+	.byte	0x1
+	.2byte	0x2cf
+	.4byte	0x182b
+	.4byte	.LLST15
+	.uleb128 0x34
+	.8byte	.LVL20
+	.4byte	0x4289
+	.4byte	0x1798
+	.uleb128 0x35
+	.uleb128 0x1
+	.byte	0x50
+	.uleb128 0x2
+	.byte	0x84
+	.sleb128 0
+	.byte	0
+	.uleb128 0x34
+	.8byte	.LVL23
+	.4byte	0x4295
+	.4byte	0x17b0
+	.uleb128 0x35
+	.uleb128 0x1
+	.byte	0x50
+	.uleb128 0x2
+	.byte	0x84
+	.sleb128 0
+	.byte	0
+	.uleb128 0x34
+	.8byte	.LVL24
+	.4byte	0x42a0
+	.4byte	0x17da
+	.uleb128 0x35
+	.uleb128 0x1
+	.byte	0x50
+	.uleb128 0x2
+	.byte	0x84
+	.sleb128 0
+	.uleb128 0x35
+	.uleb128 0x1
+	.byte	0x51
+	.uleb128 0x9
+	.byte	0x3
+	.8byte	.LC0
+	.uleb128 0x35
+	.uleb128 0x1
+	.byte	0x52
+	.uleb128 0x1
+	.byte	0x30
+	.byte	0
+	.uleb128 0x34
+	.8byte	.LVL25
+	.4byte	0x42a0
+	.4byte	0x1804
+	.uleb128 0x35
+	.uleb128 0x1
+	.byte	0x50
+	.uleb128 0x2
+	.byte	0x84
+	.sleb128 0
+	.uleb128 0x35
+	.uleb128 0x1
+	.byte	0x51
+	.uleb128 0x9
+	.byte	0x3
+	.8byte	.LC1
+	.uleb128 0x35
+	.uleb128 0x1
+	.byte	0x52
+	.uleb128 0x1
+	.byte	0x30
+	.byte	0
+	.uleb128 0x36
+	.8byte	.LVL26
+	.4byte	0x42a0
+	.uleb128 0x35
+	.uleb128 0x1
+	.byte	0x50
+	.uleb128 0x2
+	.byte	0x84
+	.sleb128 0
+	.uleb128 0x35
+	.uleb128 0x1
+	.byte	0x51
+	.uleb128 0x9
+	.byte	0x3
+	.8byte	.LC2
+	.uleb128 0x35
+	.uleb128 0x1
+	.byte	0x52
+	.uleb128 0x1
+	.byte	0x30
+	.byte	0
+	.byte	0
+	.uleb128 0x8
+	.byte	0x8
+	.4byte	0x1632
+	.uleb128 0x31
+	.4byte	.LASF422
+	.byte	0x1
+	.2byte	0x2b6
+	.4byte	0x54
+	.8byte	.LFB276
+	.8byte	.LFE276-.LFB276
+	.uleb128 0x1
+	.byte	0x9c
+	.4byte	0x18b2
+	.uleb128 0x32
+	.string	"dev"
+	.byte	0x1
+	.2byte	0x2b6
+	.4byte	0x25f
+	.4byte	.LLST1
+	.uleb128 0x37
+	.4byte	.LASF423
+	.byte	0x1
+	.2byte	0x2b7
+	.4byte	0x3b
+	.uleb128 0x1
+	.byte	0x51
+	.uleb128 0x38
+	.string	"buf"
+	.byte	0x1
+	.2byte	0x2b8
+	.4byte	0x137
+	.uleb128 0x1
+	.byte	0x52
+	.uleb128 0x33
+	.string	"ret"
+	.byte	0x1
+	.2byte	0x2ba
+	.4byte	0x54
+	.4byte	.LLST2
+	.uleb128 0x39
+	.4byte	0x18b2
+	.8byte	.LBB23
+	.8byte	.LBE23-.LBB23
+	.byte	0x1
+	.2byte	0x2be
+	.uleb128 0x3a
+	.4byte	0x18c3
+	.4byte	.LLST3
+	.byte	0
+	.byte	0
+	.uleb128 0x3b
+	.4byte	.LASF431
+	.byte	0x1
+	.2byte	0x2af
+	.4byte	0x54
+	.byte	0x1
+	.4byte	0x18d0
+	.uleb128 0x3c
+	.string	"buf"
+	.byte	0x1
+	.2byte	0x2af
+	.4byte	0x11d8
+	.byte	0
+	.uleb128 0x31
+	.4byte	.LASF424
+	.byte	0x1
+	.2byte	0x2a7
+	.4byte	0x54
+	.8byte	.LFB274
+	.8byte	.LFE274-.LFB274
+	.uleb128 0x1
+	.byte	0x9c
+	.4byte	0x1981
+	.uleb128 0x32
+	.string	"dev"
+	.byte	0x1
+	.2byte	0x2a7
+	.4byte	0x25f
+	.4byte	.LLST4
+	.uleb128 0x3d
+	.4byte	.LASF425
+	.byte	0x1
+	.2byte	0x2a7
+	.4byte	0x54
+	.4byte	.LLST5
+	.uleb128 0x32
+	.string	"buf"
+	.byte	0x1
+	.2byte	0x2a8
+	.4byte	0x265
+	.4byte	.LLST6
+	.uleb128 0x3d
+	.4byte	.LASF51
+	.byte	0x1
+	.2byte	0x2a8
+	.4byte	0x54
+	.4byte	.LLST7
+	.uleb128 0x3e
+	.4byte	.LASF426
+	.byte	0x1
+	.2byte	0x2aa
+	.4byte	0x1981
+	.4byte	.LLST8
+	.uleb128 0x34
+	.8byte	.LVL8
+	.4byte	0x42ab
+	.4byte	0x195a
+	.uleb128 0x35
+	.uleb128 0x1
+	.byte	0x50
+	.uleb128 0x2
+	.byte	0x83
+	.sleb128 0
+	.byte	0
+	.uleb128 0x3f
+	.8byte	.LVL12
+	.uleb128 0x35
+	.uleb128 0x1
+	.byte	0x50
+	.uleb128 0x3
+	.byte	0xf3
+	.uleb128 0x1
+	.byte	0x50
+	.uleb128 0x35
+	.uleb128 0x1
+	.byte	0x51
+	.uleb128 0x3
+	.byte	0xf3
+	.uleb128 0x1
+	.byte	0x51
+	.uleb128 0x35
+	.uleb128 0x1
+	.byte	0x52
+	.uleb128 0x3
+	.byte	0xf3
+	.uleb128 0x1
+	.byte	0x52
+	.uleb128 0x35
+	.uleb128 0x1
+	.byte	0x53
+	.uleb128 0x3
+	.byte	0xf3
+	.uleb128 0x1
+	.byte	0x53
+	.byte	0
+	.byte	0
+	.uleb128 0x8
+	.byte	0x8
+	.4byte	0x166f
+	.uleb128 0x31
+	.4byte	.LASF427
+	.byte	0x1
+	.2byte	0x29f
+	.4byte	0x54
+	.8byte	.LFB273
+	.8byte	.LFE273-.LFB273
+	.uleb128 0x1
+	.byte	0x9c
+	.4byte	0x1a38
+	.uleb128 0x32
+	.string	"dev"
+	.byte	0x1
+	.2byte	0x29f
+	.4byte	0x25f
+	.4byte	.LLST9
+	.uleb128 0x3d
+	.4byte	.LASF425
+	.byte	0x1
+	.2byte	0x29f
+	.4byte	0x54
+	.4byte	.LLST10
+	.uleb128 0x32
+	.string	"buf"
+	.byte	0x1
+	.2byte	0x2a0
+	.4byte	0x137
+	.4byte	.LLST11
+	.uleb128 0x3d
+	.4byte	.LASF51
+	.byte	0x1
+	.2byte	0x2a0
+	.4byte	0x54
+	.4byte	.LLST12
+	.uleb128 0x3e
+	.4byte	.LASF426
+	.byte	0x1
+	.2byte	0x2a2
+	.4byte	0x1981
+	.4byte	.LLST13
+	.uleb128 0x34
+	.8byte	.LVL14
+	.4byte	0x42ab
+	.4byte	0x1a11
+	.uleb128 0x35
+	.uleb128 0x1
+	.byte	0x50
+	.uleb128 0x2
+	.byte	0x83
+	.sleb128 0
+	.byte	0
+	.uleb128 0x3f
+	.8byte	.LVL18
+	.uleb128 0x35
+	.uleb128 0x1
+	.byte	0x50
+	.uleb128 0x3
+	.byte	0xf3
+	.uleb128 0x1
+	.byte	0x50
+	.uleb128 0x35
+	.uleb128 0x1
+	.byte	0x51
+	.uleb128 0x3
+	.byte	0xf3
+	.uleb128 0x1
+	.byte	0x51
+	.uleb128 0x35
+	.uleb128 0x1
+	.byte	0x52
+	.uleb128 0x3
+	.byte	0xf3
+	.uleb128 0x1
+	.byte	0x52
+	.uleb128 0x35
+	.uleb128 0x1
+	.byte	0x53
+	.uleb128 0x3
+	.byte	0xf3
+	.uleb128 0x1
+	.byte	0x53
+	.byte	0
+	.byte	0
+	.uleb128 0x31
+	.4byte	.LASF428
+	.byte	0x1
+	.2byte	0x26c
+	.4byte	0x54
+	.8byte	.LFB272
+	.8byte	.LFE272-.LFB272
+	.uleb128 0x1
+	.byte	0x9c
+	.4byte	0x2564
+	.uleb128 0x32
+	.string	"dev"
+	.byte	0x1
+	.2byte	0x26c
+	.4byte	0x25f
+	.4byte	.LLST69
+	.uleb128 0x3d
+	.4byte	.LASF425
+	.byte	0x1
+	.2byte	0x26c
+	.4byte	0x54
+	.4byte	.LLST70
+	.uleb128 0x32
+	.string	"buf"
+	.byte	0x1
+	.2byte	0x26c
+	.4byte	0x265
+	.4byte	.LLST71
+	.uleb128 0x3d
+	.4byte	.LASF51
+	.byte	0x1
+	.2byte	0x26c
+	.4byte	0x54
+	.4byte	.LLST72
+	.uleb128 0x33
+	.string	"otp"
+	.byte	0x1
+	.2byte	0x26e
+	.4byte	0x182b
+	.4byte	.LLST73
+	.uleb128 0x3e
+	.4byte	.LASF387
+	.byte	0x1
+	.2byte	0x26f
+	.4byte	0x11d2
+	.4byte	.LLST74
+	.uleb128 0x3e
+	.4byte	.LASF429
+	.byte	0x1
+	.2byte	0x270
+	.4byte	0xfa
+	.4byte	.LLST74
+	.uleb128 0x3e
+	.4byte	.LASF430
+	.byte	0x1
+	.2byte	0x271
+	.4byte	0xfa
+	.4byte	.LLST76
+	.uleb128 0x33
+	.string	"i"
+	.byte	0x1
+	.2byte	0x272
+	.4byte	0x54
+	.4byte	.LLST77
+	.uleb128 0x33
+	.string	"ret"
+	.byte	0x1
+	.2byte	0x272
+	.4byte	0x54
+	.4byte	.LLST78
+	.uleb128 0x40
+	.4byte	0x2564
+	.8byte	.LBB244
+	.4byte	.Ldebug_ranges0+0x3f0
+	.byte	0x1
+	.2byte	0x294
+	.4byte	0x2436
+	.uleb128 0x3a
+	.4byte	0x2599
+	.4byte	.LLST79
+	.uleb128 0x3a
+	.4byte	0x258d
+	.4byte	.LLST80
+	.uleb128 0x3a
+	.4byte	0x2581
+	.4byte	.LLST81
+	.uleb128 0x3a
+	.4byte	0x2575
+	.4byte	.LLST82
+	.uleb128 0x41
+	.4byte	.Ldebug_ranges0+0x3f0
+	.uleb128 0x42
+	.4byte	0x25a5
+	.4byte	.LLST83
+	.uleb128 0x42
+	.4byte	0x25b1
+	.4byte	.LLST84
+	.uleb128 0x43
+	.4byte	0x25ca
+	.8byte	.L88
+	.uleb128 0x44
+	.4byte	0x25bd
+	.uleb128 0x45
+	.8byte	.LBB246
+	.8byte	.LBE246-.LBB246
+	.4byte	0x1b7c
+	.uleb128 0x42
+	.4byte	0x25d7
+	.4byte	.LLST85
+	.byte	0
+	.uleb128 0x45
+	.8byte	.LBB247
+	.8byte	.LBE247-.LBB247
+	.4byte	0x1b9b
+	.uleb128 0x42
+	.4byte	0x25e9
+	.4byte	.LLST86
+	.byte	0
+	.uleb128 0x45
+	.8byte	.LBB248
+	.8byte	.LBE248-.LBB248
+	.4byte	0x1bba
+	.uleb128 0x42
+	.4byte	0x25fb
+	.4byte	.LLST87
+	.byte	0
+	.uleb128 0x45
+	.8byte	.LBB249
+	.8byte	.LBE249-.LBB249
+	.4byte	0x1bd9
+	.uleb128 0x42
+	.4byte	0x260d
+	.4byte	.LLST88
+	.byte	0
+	.uleb128 0x45
+	.8byte	.LBB250
+	.8byte	.LBE250-.LBB250
+	.4byte	0x1bf8
+	.uleb128 0x42
+	.4byte	0x261f
+	.4byte	.LLST89
+	.byte	0
+	.uleb128 0x45
+	.8byte	.LBB251
+	.8byte	.LBE251-.LBB251
+	.4byte	0x1c17
+	.uleb128 0x42
+	.4byte	0x2631
+	.4byte	.LLST90
+	.byte	0
+	.uleb128 0x45
+	.8byte	.LBB252
+	.8byte	.LBE252-.LBB252
+	.4byte	0x1c36
+	.uleb128 0x42
+	.4byte	0x2643
+	.4byte	.LLST91
+	.byte	0
+	.uleb128 0x45
+	.8byte	.LBB253
+	.8byte	.LBE253-.LBB253
+	.4byte	0x1c55
+	.uleb128 0x42
+	.4byte	0x2655
+	.4byte	.LLST92
+	.byte	0
+	.uleb128 0x45
+	.8byte	.LBB254
+	.8byte	.LBE254-.LBB254
+	.4byte	0x1c74
+	.uleb128 0x42
+	.4byte	0x2667
+	.4byte	.LLST93
+	.byte	0
+	.uleb128 0x45
+	.8byte	.LBB255
+	.8byte	.LBE255-.LBB255
+	.4byte	0x1c93
+	.uleb128 0x42
+	.4byte	0x2679
+	.4byte	.LLST94
+	.byte	0
+	.uleb128 0x45
+	.8byte	.LBB256
+	.8byte	.LBE256-.LBB256
+	.4byte	0x1cb2
+	.uleb128 0x42
+	.4byte	0x268b
+	.4byte	.LLST95
+	.byte	0
+	.uleb128 0x45
+	.8byte	.LBB257
+	.8byte	.LBE257-.LBB257
+	.4byte	0x1cd1
+	.uleb128 0x42
+	.4byte	0x269d
+	.4byte	.LLST96
+	.byte	0
+	.uleb128 0x45
+	.8byte	.LBB258
+	.8byte	.LBE258-.LBB258
+	.4byte	0x1cf0
+	.uleb128 0x42
+	.4byte	0x26af
+	.4byte	.LLST97
+	.byte	0
+	.uleb128 0x45
+	.8byte	.LBB259
+	.8byte	.LBE259-.LBB259
+	.4byte	0x1d0f
+	.uleb128 0x42
+	.4byte	0x26c1
+	.4byte	.LLST98
+	.byte	0
+	.uleb128 0x45
+	.8byte	.LBB260
+	.8byte	.LBE260-.LBB260
+	.4byte	0x1d2e
+	.uleb128 0x42
+	.4byte	0x26d3
+	.4byte	.LLST99
+	.byte	0
+	.uleb128 0x45
+	.8byte	.LBB261
+	.8byte	.LBE261-.LBB261
+	.4byte	0x1d4d
+	.uleb128 0x42
+	.4byte	0x26e5
+	.4byte	.LLST100
+	.byte	0
+	.uleb128 0x45
+	.8byte	.LBB262
+	.8byte	.LBE262-.LBB262
+	.4byte	0x1d6c
+	.uleb128 0x42
+	.4byte	0x26f7
+	.4byte	.LLST101
+	.byte	0
+	.uleb128 0x45
+	.8byte	.LBB263
+	.8byte	.LBE263-.LBB263
+	.4byte	0x1d8b
+	.uleb128 0x42
+	.4byte	0x2709
+	.4byte	.LLST102
+	.byte	0
+	.uleb128 0x46
+	.4byte	.Ldebug_ranges0+0x450
+	.4byte	0x1d9e
+	.uleb128 0x42
+	.4byte	0x271b
+	.4byte	.LLST103
+	.byte	0
+	.uleb128 0x46
+	.4byte	.Ldebug_ranges0+0x480
+	.4byte	0x1db1
+	.uleb128 0x42
+	.4byte	0x272d
+	.4byte	.LLST104
+	.byte	0
+	.uleb128 0x46
+	.4byte	.Ldebug_ranges0+0x4b0
+	.4byte	0x1dc4
+	.uleb128 0x42
+	.4byte	0x273f
+	.4byte	.LLST105
+	.byte	0
+	.uleb128 0x46
+	.4byte	.Ldebug_ranges0+0x4e0
+	.4byte	0x1dd7
+	.uleb128 0x42
+	.4byte	0x2a2f
+	.4byte	.LLST106
+	.byte	0
+	.uleb128 0x45
+	.8byte	.LBB272
+	.8byte	.LBE272-.LBB272
+	.4byte	0x1df6
+	.uleb128 0x42
+	.4byte	0x2751
+	.4byte	.LLST107
+	.byte	0
+	.uleb128 0x45
+	.8byte	.LBB273
+	.8byte	.LBE273-.LBB273
+	.4byte	0x1e15
+	.uleb128 0x42
+	.4byte	0x2763
+	.4byte	.LLST108
+	.byte	0
+	.uleb128 0x45
+	.8byte	.LBB274
+	.8byte	.LBE274-.LBB274
+	.4byte	0x1e34
+	.uleb128 0x42
+	.4byte	0x2775
+	.4byte	.LLST109
+	.byte	0
+	.uleb128 0x45
+	.8byte	.LBB275
+	.8byte	.LBE275-.LBB275
+	.4byte	0x1e53
+	.uleb128 0x42
+	.4byte	0x2787
+	.4byte	.LLST110
+	.byte	0
+	.uleb128 0x45
+	.8byte	.LBB276
+	.8byte	.LBE276-.LBB276
+	.4byte	0x1e72
+	.uleb128 0x42
+	.4byte	0x2799
+	.4byte	.LLST111
+	.byte	0
+	.uleb128 0x45
+	.8byte	.LBB277
+	.8byte	.LBE277-.LBB277
+	.4byte	0x1e91
+	.uleb128 0x42
+	.4byte	0x27ab
+	.4byte	.LLST112
+	.byte	0
+	.uleb128 0x45
+	.8byte	.LBB278
+	.8byte	.LBE278-.LBB278
+	.4byte	0x1eb0
+	.uleb128 0x42
+	.4byte	0x27bd
+	.4byte	.LLST113
+	.byte	0
+	.uleb128 0x45
+	.8byte	.LBB279
+	.8byte	.LBE279-.LBB279
+	.4byte	0x1ecf
+	.uleb128 0x42
+	.4byte	0x27cf
+	.4byte	.LLST114
+	.byte	0
+	.uleb128 0x45
+	.8byte	.LBB280
+	.8byte	.LBE280-.LBB280
+	.4byte	0x1eee
+	.uleb128 0x42
+	.4byte	0x27e1
+	.4byte	.LLST115
+	.byte	0
+	.uleb128 0x45
+	.8byte	.LBB281
+	.8byte	.LBE281-.LBB281
+	.4byte	0x1f0d
+	.uleb128 0x42
+	.4byte	0x27f3
+	.4byte	.LLST116
+	.byte	0
+	.uleb128 0x45
+	.8byte	.LBB282
+	.8byte	.LBE282-.LBB282
+	.4byte	0x1f2c
+	.uleb128 0x42
+	.4byte	0x2805
+	.4byte	.LLST117
+	.byte	0
+	.uleb128 0x45
+	.8byte	.LBB283
+	.8byte	.LBE283-.LBB283
+	.4byte	0x1f4b
+	.uleb128 0x42
+	.4byte	0x2817
+	.4byte	.LLST118
+	.byte	0
+	.uleb128 0x45
+	.8byte	.LBB284
+	.8byte	.LBE284-.LBB284
+	.4byte	0x1f6a
+	.uleb128 0x42
+	.4byte	0x2829
+	.4byte	.LLST119
+	.byte	0
+	.uleb128 0x45
+	.8byte	.LBB285
+	.8byte	.LBE285-.LBB285
+	.4byte	0x1f89
+	.uleb128 0x42
+	.4byte	0x283b
+	.4byte	.LLST120
+	.byte	0
+	.uleb128 0x45
+	.8byte	.LBB286
+	.8byte	.LBE286-.LBB286
+	.4byte	0x1fa8
+	.uleb128 0x42
+	.4byte	0x284d
+	.4byte	.LLST121
+	.byte	0
+	.uleb128 0x45
+	.8byte	.LBB287
+	.8byte	.LBE287-.LBB287
+	.4byte	0x1fc7
+	.uleb128 0x42
+	.4byte	0x285f
+	.4byte	.LLST122
+	.byte	0
+	.uleb128 0x46
+	.4byte	.Ldebug_ranges0+0x510
+	.4byte	0x1fda
+	.uleb128 0x42
+	.4byte	0x2871
+	.4byte	.LLST123
+	.byte	0
+	.uleb128 0x45
+	.8byte	.LBB290
+	.8byte	.LBE290-.LBB290
+	.4byte	0x1ff9
+	.uleb128 0x42
+	.4byte	0x2883
+	.4byte	.LLST124
+	.byte	0
+	.uleb128 0x45
+	.8byte	.LBB291
+	.8byte	.LBE291-.LBB291
+	.4byte	0x2018
+	.uleb128 0x42
+	.4byte	0x2895
+	.4byte	.LLST125
+	.byte	0
+	.uleb128 0x45
+	.8byte	.LBB292
+	.8byte	.LBE292-.LBB292
+	.4byte	0x2037
+	.uleb128 0x42
+	.4byte	0x28a7
+	.4byte	.LLST126
+	.byte	0
+	.uleb128 0x45
+	.8byte	.LBB293
+	.8byte	.LBE293-.LBB293
+	.4byte	0x2056
+	.uleb128 0x42
+	.4byte	0x28b9
+	.4byte	.LLST127
+	.byte	0
+	.uleb128 0x46
+	.4byte	.Ldebug_ranges0+0x540
+	.4byte	0x2069
+	.uleb128 0x42
+	.4byte	0x28cb
+	.4byte	.LLST128
+	.byte	0
+	.uleb128 0x45
+	.8byte	.LBB296
+	.8byte	.LBE296-.LBB296
+	.4byte	0x2088
+	.uleb128 0x42
+	.4byte	0x28dd
+	.4byte	.LLST129
+	.byte	0
+	.uleb128 0x45
+	.8byte	.LBB297
+	.8byte	.LBE297-.LBB297
+	.4byte	0x20a7
+	.uleb128 0x42
+	.4byte	0x28ef
+	.4byte	.LLST130
+	.byte	0
+	.uleb128 0x46
+	.4byte	.Ldebug_ranges0+0x570
+	.4byte	0x20ba
+	.uleb128 0x42
+	.4byte	0x2901
+	.4byte	.LLST131
+	.byte	0
+	.uleb128 0x46
+	.4byte	.Ldebug_ranges0+0x5a0
+	.4byte	0x20cd
+	.uleb128 0x42
+	.4byte	0x2913
+	.4byte	.LLST132
+	.byte	0
+	.uleb128 0x46
+	.4byte	.Ldebug_ranges0+0x5d0
+	.4byte	0x20e0
+	.uleb128 0x42
+	.4byte	0x2925
+	.4byte	.LLST133
+	.byte	0
+	.uleb128 0x45
+	.8byte	.LBB304
+	.8byte	.LBE304-.LBB304
+	.4byte	0x20ff
+	.uleb128 0x42
+	.4byte	0x2937
+	.4byte	.LLST134
+	.byte	0
+	.uleb128 0x45
+	.8byte	.LBB305
+	.8byte	.LBE305-.LBB305
+	.4byte	0x211e
+	.uleb128 0x42
+	.4byte	0x2949
+	.4byte	.LLST135
+	.byte	0
+	.uleb128 0x45
+	.8byte	.LBB306
+	.8byte	.LBE306-.LBB306
+	.4byte	0x213d
+	.uleb128 0x42
+	.4byte	0x295b
+	.4byte	.LLST136
+	.byte	0
+	.uleb128 0x45
+	.8byte	.LBB307
+	.8byte	.LBE307-.LBB307
+	.4byte	0x215c
+	.uleb128 0x42
+	.4byte	0x296d
+	.4byte	.LLST137
+	.byte	0
+	.uleb128 0x46
+	.4byte	.Ldebug_ranges0+0x600
+	.4byte	0x216f
+	.uleb128 0x42
+	.4byte	0x297f
+	.4byte	.LLST138
+	.byte	0
+	.uleb128 0x45
+	.8byte	.LBB310
+	.8byte	.LBE310-.LBB310
+	.4byte	0x218e
+	.uleb128 0x42
+	.4byte	0x2991
+	.4byte	.LLST139
+	.byte	0
+	.uleb128 0x45
+	.8byte	.LBB311
+	.8byte	.LBE311-.LBB311
+	.4byte	0x21ad
+	.uleb128 0x42
+	.4byte	0x29a3
+	.4byte	.LLST140
+	.byte	0
+	.uleb128 0x45
+	.8byte	.LBB312
+	.8byte	.LBE312-.LBB312
+	.4byte	0x21cc
+	.uleb128 0x42
+	.4byte	0x29b5
+	.4byte	.LLST141
+	.byte	0
+	.uleb128 0x45
+	.8byte	.LBB313
+	.8byte	.LBE313-.LBB313
+	.4byte	0x21eb
+	.uleb128 0x42
+	.4byte	0x29c7
+	.4byte	.LLST142
+	.byte	0
+	.uleb128 0x46
+	.4byte	.Ldebug_ranges0+0x630
+	.4byte	0x21fe
+	.uleb128 0x42
+	.4byte	0x29d9
+	.4byte	.LLST143
+	.byte	0
+	.uleb128 0x45
+	.8byte	.LBB316
+	.8byte	.LBE316-.LBB316
+	.4byte	0x221d
+	.uleb128 0x42
+	.4byte	0x29eb
+	.4byte	.LLST144
+	.byte	0
+	.uleb128 0x45
+	.8byte	.LBB317
+	.8byte	.LBE317-.LBB317
+	.4byte	0x223c
+	.uleb128 0x42
+	.4byte	0x29fd
+	.4byte	.LLST145
+	.byte	0
+	.uleb128 0x45
+	.8byte	.LBB318
+	.8byte	.LBE318-.LBB318
+	.4byte	0x225b
+	.uleb128 0x42
+	.4byte	0x2a0f
+	.4byte	.LLST146
+	.byte	0
+	.uleb128 0x45
+	.8byte	.LBB319
+	.8byte	.LBE319-.LBB319
+	.4byte	0x227a
+	.uleb128 0x42
+	.4byte	0x2a21
+	.4byte	.LLST147
+	.byte	0
+	.uleb128 0x34
+	.8byte	.LVL263
+	.4byte	0x42ab
+	.4byte	0x2292
+	.uleb128 0x35
+	.uleb128 0x1
+	.byte	0x50
+	.uleb128 0x2
+	.byte	0x88
+	.sleb128 0
+	.byte	0
+	.uleb128 0x34
+	.8byte	.LVL266
+	.4byte	0x42b7
+	.4byte	0x22ba
+	.uleb128 0x35
+	.uleb128 0x1
+	.byte	0x50
+	.uleb128 0x9
+	.byte	0x3
+	.8byte	.LC4
+	.uleb128 0x35
+	.uleb128 0x1
+	.byte	0x51
+	.uleb128 0x5
+	.byte	0x85
+	.sleb128 0
+	.byte	0x9
+	.byte	0xfe
+	.byte	0x1a
+	.byte	0
+	.uleb128 0x47
+	.8byte	.LVL289
+	.4byte	0x22ce
+	.uleb128 0x35
+	.uleb128 0x1
+	.byte	0x53
+	.uleb128 0x2
+	.byte	0x89
+	.sleb128 0
+	.byte	0
+	.uleb128 0x34
+	.8byte	.LVL310
+	.4byte	0x401e
+	.4byte	0x22f3
+	.uleb128 0x35
+	.uleb128 0x1
+	.byte	0x50
+	.uleb128 0x2
+	.byte	0x8c
+	.sleb128 0
+	.uleb128 0x35
+	.uleb128 0x1
+	.byte	0x51
+	.uleb128 0x1
+	.byte	0x32
+	.uleb128 0x48
+	.4byte	0x3d7a
+	.uleb128 0x2
+	.byte	0x8c
+	.sleb128 0
+	.byte	0
+	.uleb128 0x49
+	.8byte	.LVL314
+	.4byte	0x42b7
+	.uleb128 0x47
+	.8byte	.LVL315
+	.4byte	0x2314
+	.uleb128 0x35
+	.uleb128 0x1
+	.byte	0x53
+	.uleb128 0x2
+	.byte	0x89
+	.sleb128 0
+	.byte	0
+	.uleb128 0x34
+	.8byte	.LVL336
+	.4byte	0x401e
+	.4byte	0x233a
+	.uleb128 0x35
+	.uleb128 0x1
+	.byte	0x50
+	.uleb128 0x2
+	.byte	0x8c
+	.sleb128 0
+	.uleb128 0x35
+	.uleb128 0x1
+	.byte	0x51
+	.uleb128 0x2
+	.byte	0x85
+	.sleb128 0
+	.uleb128 0x48
+	.4byte	0x3d7a
+	.uleb128 0x2
+	.byte	0x8c
+	.sleb128 0
+	.byte	0
+	.uleb128 0x34
+	.8byte	.LVL345
+	.4byte	0x401e
+	.4byte	0x2360
+	.uleb128 0x35
+	.uleb128 0x1
+	.byte	0x50
+	.uleb128 0x2
+	.byte	0x8c
+	.sleb128 0
+	.uleb128 0x35
+	.uleb128 0x1
+	.byte	0x51
+	.uleb128 0x2
+	.byte	0x85
+	.sleb128 0
+	.uleb128 0x48
+	.4byte	0x3d7a
+	.uleb128 0x2
+	.byte	0x8c
+	.sleb128 0
+	.byte	0
+	.uleb128 0x34
+	.8byte	.LVL355
+	.4byte	0x401e
+	.4byte	0x2386
+	.uleb128 0x35
+	.uleb128 0x1
+	.byte	0x50
+	.uleb128 0x2
+	.byte	0x8c
+	.sleb128 0
+	.uleb128 0x35
+	.uleb128 0x1
+	.byte	0x51
+	.uleb128 0x2
+	.byte	0x85
+	.sleb128 0
+	.uleb128 0x48
+	.4byte	0x3d7a
+	.uleb128 0x2
+	.byte	0x8c
+	.sleb128 0
+	.byte	0
+	.uleb128 0x34
+	.8byte	.LVL364
+	.4byte	0x401e
+	.4byte	0x23ac
+	.uleb128 0x35
+	.uleb128 0x1
+	.byte	0x50
+	.uleb128 0x2
+	.byte	0x8c
+	.sleb128 0
+	.uleb128 0x35
+	.uleb128 0x1
+	.byte	0x51
+	.uleb128 0x2
+	.byte	0x85
+	.sleb128 0
+	.uleb128 0x48
+	.4byte	0x3d7a
+	.uleb128 0x2
+	.byte	0x8c
+	.sleb128 0
+	.byte	0
+	.uleb128 0x34
+	.8byte	.LVL373
+	.4byte	0x401e
+	.4byte	0x23d2
+	.uleb128 0x35
+	.uleb128 0x1
+	.byte	0x50
+	.uleb128 0x2
+	.byte	0x8c
+	.sleb128 0
+	.uleb128 0x35
+	.uleb128 0x1
+	.byte	0x51
+	.uleb128 0x2
+	.byte	0x85
+	.sleb128 0
+	.uleb128 0x48
+	.4byte	0x3d7a
+	.uleb128 0x2
+	.byte	0x8c
+	.sleb128 0
+	.byte	0
+	.uleb128 0x34
+	.8byte	.LVL378
+	.4byte	0x3f49
+	.4byte	0x23f2
+	.uleb128 0x35
+	.uleb128 0x1
+	.byte	0x50
+	.uleb128 0x2
+	.byte	0x8c
+	.sleb128 0
+	.uleb128 0x48
+	.4byte	0x3ce6
+	.uleb128 0x2
+	.byte	0x8c
+	.sleb128 0
+	.byte	0
+	.uleb128 0x34
+	.8byte	.LVL386
+	.4byte	0x401e
+	.4byte	0x2418
+	.uleb128 0x35
+	.uleb128 0x1
+	.byte	0x50
+	.uleb128 0x2
+	.byte	0x8c
+	.sleb128 0
+	.uleb128 0x35
+	.uleb128 0x1
+	.byte	0x51
+	.uleb128 0x2
+	.byte	0x85
+	.sleb128 0
+	.uleb128 0x48
+	.4byte	0x3d7a
+	.uleb128 0x2
+	.byte	0x8c
+	.sleb128 0
+	.byte	0
+	.uleb128 0x36
+	.8byte	.LVL391
+	.4byte	0x3fb3
+	.uleb128 0x35
+	.uleb128 0x1
+	.byte	0x50
+	.uleb128 0x2
+	.byte	0x8c
+	.sleb128 0
+	.uleb128 0x48
+	.4byte	0x3d30
+	.uleb128 0x2
+	.byte	0x8c
+	.sleb128 0
+	.byte	0
+	.byte	0
+	.byte	0
+	.uleb128 0x40
+	.4byte	0x2a52
+	.8byte	.LBB326
+	.4byte	.Ldebug_ranges0+0x660
+	.byte	0x1
+	.2byte	0x28c
+	.4byte	0x24d7
+	.uleb128 0x3a
+	.4byte	0x2a87
+	.4byte	.LLST148
+	.uleb128 0x3a
+	.4byte	0x2a7b
+	.4byte	.LLST149
+	.uleb128 0x3a
+	.4byte	0x2a6f
+	.4byte	.LLST150
+	.uleb128 0x3a
+	.4byte	0x2a63
+	.4byte	.LLST151
+	.uleb128 0x41
+	.4byte	.Ldebug_ranges0+0x660
+	.uleb128 0x42
+	.4byte	0x2a93
+	.4byte	.LLST152
+	.uleb128 0x4a
+	.4byte	0x2a9f
+	.uleb128 0x2
+	.byte	0x91
+	.sleb128 -2
+	.uleb128 0x42
+	.4byte	0x2aab
+	.4byte	.LLST153
+	.uleb128 0x34
+	.8byte	.LVL274
+	.4byte	0x39d5
+	.4byte	0x24bb
+	.uleb128 0x35
+	.uleb128 0x1
+	.byte	0x50
+	.uleb128 0x2
+	.byte	0x88
+	.sleb128 0
+	.uleb128 0x35
+	.uleb128 0x1
+	.byte	0x51
+	.uleb128 0x2
+	.byte	0x86
+	.sleb128 0
+	.uleb128 0x35
+	.uleb128 0x1
+	.byte	0x52
+	.uleb128 0x3
+	.byte	0x8f
+	.sleb128 254
+	.uleb128 0x35
+	.uleb128 0x1
+	.byte	0x53
+	.uleb128 0x1
+	.byte	0x32
+	.byte	0
+	.uleb128 0x36
+	.8byte	.LVL279
+	.4byte	0x2ab8
+	.uleb128 0x35
+	.uleb128 0x1
+	.byte	0x50
+	.uleb128 0x2
+	.byte	0x88
+	.sleb128 0
+	.uleb128 0x35
+	.uleb128 0x1
+	.byte	0x51
+	.uleb128 0x2
+	.byte	0x8c
+	.sleb128 0
+	.byte	0
+	.byte	0
+	.byte	0
+	.uleb128 0x34
+	.8byte	.LVL247
+	.4byte	0x4289
+	.4byte	0x24ef
+	.uleb128 0x35
+	.uleb128 0x1
+	.byte	0x50
+	.uleb128 0x2
+	.byte	0x88
+	.sleb128 0
+	.byte	0
+	.uleb128 0x34
+	.8byte	.LVL250
+	.4byte	0x42c2
+	.4byte	0x250d
+	.uleb128 0x35
+	.uleb128 0x1
+	.byte	0x50
+	.uleb128 0x8
+	.byte	0x85
+	.sleb128 0
+	.byte	0x8
+	.byte	0x20
+	.byte	0x24
+	.byte	0x8
+	.byte	0x20
+	.byte	0x26
+	.byte	0
+	.uleb128 0x34
+	.8byte	.LVL268
+	.4byte	0x39d5
+	.4byte	0x2537
+	.uleb128 0x35
+	.uleb128 0x1
+	.byte	0x50
+	.uleb128 0x2
+	.byte	0x88
+	.sleb128 0
+	.uleb128 0x35
+	.uleb128 0x1
+	.byte	0x51
+	.uleb128 0x2
+	.byte	0x84
+	.sleb128 0
+	.uleb128 0x35
+	.uleb128 0x1
+	.byte	0x52
+	.uleb128 0x2
+	.byte	0x83
+	.sleb128 0
+	.uleb128 0x35
+	.uleb128 0x1
+	.byte	0x53
+	.uleb128 0x2
+	.byte	0x85
+	.sleb128 0
+	.byte	0
+	.uleb128 0x34
+	.8byte	.LVL271
+	.4byte	0x42b7
+	.4byte	0x2556
+	.uleb128 0x35
+	.uleb128 0x1
+	.byte	0x50
+	.uleb128 0x9
+	.byte	0x3
+	.8byte	.LC12
+	.byte	0
+	.uleb128 0x49
+	.8byte	.LVL282
+	.4byte	0x42b7
+	.byte	0
+	.uleb128 0x3b
+	.4byte	.LASF432
+	.byte	0x1
+	.2byte	0x1d6
+	.4byte	0x54
+	.byte	0x1
+	.4byte	0x2a3d
+	.uleb128 0x3c
+	.string	"dev"
+	.byte	0x1
+	.2byte	0x1d6
+	.4byte	0x25f
+	.uleb128 0x3c
+	.string	"otp"
+	.byte	0x1
+	.2byte	0x1d7
+	.4byte	0x182b
+	.uleb128 0x4b
+	.4byte	.LASF425
+	.byte	0x1
+	.2byte	0x1d8
+	.4byte	0x54
+	.uleb128 0x4b
+	.4byte	.LASF387
+	.byte	0x1
+	.2byte	0x1d8
+	.4byte	0xa3
+	.uleb128 0x4c
+	.string	"ret"
+	.byte	0x1
+	.2byte	0x1da
+	.4byte	0x54
+	.uleb128 0x4d
+	.4byte	.LASF426
+	.byte	0x1
+	.2byte	0x1db
+	.4byte	0x1981
+	.uleb128 0x4e
+	.4byte	.LASF433
+	.4byte	0x2a4d
+	.4byte	.LASF432
+	.uleb128 0x4f
+	.4byte	.LASF439
+	.byte	0x1
+	.2byte	0x263
+	.uleb128 0x50
+	.4byte	0x25e4
+	.uleb128 0x4c
+	.string	"__v"
+	.byte	0x1
+	.2byte	0x1ef
+	.4byte	0xae
+	.byte	0
+	.uleb128 0x50
+	.4byte	0x25f6
+	.uleb128 0x4c
+	.string	"__v"
+	.byte	0x1
+	.2byte	0x1f0
+	.4byte	0xae
+	.byte	0
+	.uleb128 0x50
+	.4byte	0x2608
+	.uleb128 0x4c
+	.string	"__v"
+	.byte	0x1
+	.2byte	0x1f1
+	.4byte	0xae
+	.byte	0
+	.uleb128 0x50
+	.4byte	0x261a
+	.uleb128 0x4c
+	.string	"__v"
+	.byte	0x1
+	.2byte	0x1f2
+	.4byte	0xae
+	.byte	0
+	.uleb128 0x50
+	.4byte	0x262c
+	.uleb128 0x4c
+	.string	"__v"
+	.byte	0x1
+	.2byte	0x1f3
+	.4byte	0xae
+	.byte	0
+	.uleb128 0x50
+	.4byte	0x263e
+	.uleb128 0x4c
+	.string	"__v"
+	.byte	0x1
+	.2byte	0x1f4
+	.4byte	0xae
+	.byte	0
+	.uleb128 0x50
+	.4byte	0x2650
+	.uleb128 0x4c
+	.string	"__v"
+	.byte	0x1
+	.2byte	0x1f5
+	.4byte	0xae
+	.byte	0
+	.uleb128 0x50
+	.4byte	0x2662
+	.uleb128 0x4c
+	.string	"__v"
+	.byte	0x1
+	.2byte	0x1f6
+	.4byte	0xae
+	.byte	0
+	.uleb128 0x50
+	.4byte	0x2674
+	.uleb128 0x4c
+	.string	"__v"
+	.byte	0x1
+	.2byte	0x1f7
+	.4byte	0xae
+	.byte	0
+	.uleb128 0x50
+	.4byte	0x2686
+	.uleb128 0x4c
+	.string	"__v"
+	.byte	0x1
+	.2byte	0x1f8
+	.4byte	0xae
+	.byte	0
+	.uleb128 0x50
+	.4byte	0x2698
+	.uleb128 0x4c
+	.string	"__v"
+	.byte	0x1
+	.2byte	0x1f9
+	.4byte	0xae
+	.byte	0
+	.uleb128 0x50
+	.4byte	0x26aa
+	.uleb128 0x4c
+	.string	"__v"
+	.byte	0x1
+	.2byte	0x1fa
+	.4byte	0xae
+	.byte	0
+	.uleb128 0x50
+	.4byte	0x26bc
+	.uleb128 0x4c
+	.string	"__v"
+	.byte	0x1
+	.2byte	0x1fb
+	.4byte	0xae
+	.byte	0
+	.uleb128 0x50
+	.4byte	0x26ce
+	.uleb128 0x4c
+	.string	"__v"
+	.byte	0x1
+	.2byte	0x1fc
+	.4byte	0xae
+	.byte	0
+	.uleb128 0x50
+	.4byte	0x26e0
+	.uleb128 0x4c
+	.string	"__v"
+	.byte	0x1
+	.2byte	0x1fd
+	.4byte	0xae
+	.byte	0
+	.uleb128 0x50
+	.4byte	0x26f2
+	.uleb128 0x4c
+	.string	"__v"
+	.byte	0x1
+	.2byte	0x1fe
+	.4byte	0xae
+	.byte	0
+	.uleb128 0x50
+	.4byte	0x2704
+	.uleb128 0x4c
+	.string	"__v"
+	.byte	0x1
+	.2byte	0x1ff
+	.4byte	0xae
+	.byte	0
+	.uleb128 0x50
+	.4byte	0x2716
+	.uleb128 0x4c
+	.string	"__v"
+	.byte	0x1
+	.2byte	0x200
+	.4byte	0xae
+	.byte	0
+	.uleb128 0x50
+	.4byte	0x2728
+	.uleb128 0x4c
+	.string	"__v"
+	.byte	0x1
+	.2byte	0x201
+	.4byte	0xae
+	.byte	0
+	.uleb128 0x50
+	.4byte	0x273a
+	.uleb128 0x4c
+	.string	"__v"
+	.byte	0x1
+	.2byte	0x202
+	.4byte	0xae
+	.byte	0
+	.uleb128 0x50
+	.4byte	0x274c
+	.uleb128 0x4c
+	.string	"__v"
+	.byte	0x1
+	.2byte	0x203
+	.4byte	0xae
+	.byte	0
+	.uleb128 0x50
+	.4byte	0x275e
+	.uleb128 0x4c
+	.string	"__v"
+	.byte	0x1
+	.2byte	0x20a
+	.4byte	0xae
+	.byte	0
+	.uleb128 0x50
+	.4byte	0x2770
+	.uleb128 0x4c
+	.string	"__v"
+	.byte	0x1
+	.2byte	0x20b
+	.4byte	0xae
+	.byte	0
+	.uleb128 0x50
+	.4byte	0x2782
+	.uleb128 0x4c
+	.string	"__v"
+	.byte	0x1
+	.2byte	0x20c
+	.4byte	0xae
+	.byte	0
+	.uleb128 0x50
+	.4byte	0x2794
+	.uleb128 0x4c
+	.string	"__v"
+	.byte	0x1
+	.2byte	0x20d
+	.4byte	0xae
+	.byte	0
+	.uleb128 0x50
+	.4byte	0x27a6
+	.uleb128 0x4c
+	.string	"__v"
+	.byte	0x1
+	.2byte	0x20e
+	.4byte	0xae
+	.byte	0
+	.uleb128 0x50
+	.4byte	0x27b8
+	.uleb128 0x4c
+	.string	"__v"
+	.byte	0x1
+	.2byte	0x20f
+	.4byte	0xae
+	.byte	0
+	.uleb128 0x50
+	.4byte	0x27ca
+	.uleb128 0x4c
+	.string	"__v"
+	.byte	0x1
+	.2byte	0x210
+	.4byte	0xae
+	.byte	0
+	.uleb128 0x50
+	.4byte	0x27dc
+	.uleb128 0x4c
+	.string	"__v"
+	.byte	0x1
+	.2byte	0x211
+	.4byte	0xae
+	.byte	0
+	.uleb128 0x50
+	.4byte	0x27ee
+	.uleb128 0x4c
+	.string	"__v"
+	.byte	0x1
+	.2byte	0x212
+	.4byte	0xae
+	.byte	0
+	.uleb128 0x50
+	.4byte	0x2800
+	.uleb128 0x4c
+	.string	"__v"
+	.byte	0x1
+	.2byte	0x213
+	.4byte	0xae
+	.byte	0
+	.uleb128 0x50
+	.4byte	0x2812
+	.uleb128 0x4c
+	.string	"__v"
+	.byte	0x1
+	.2byte	0x214
+	.4byte	0xae
+	.byte	0
+	.uleb128 0x50
+	.4byte	0x2824
+	.uleb128 0x4c
+	.string	"__v"
+	.byte	0x1
+	.2byte	0x215
+	.4byte	0xae
+	.byte	0
+	.uleb128 0x50
+	.4byte	0x2836
+	.uleb128 0x4c
+	.string	"__v"
+	.byte	0x1
+	.2byte	0x216
+	.4byte	0xae
+	.byte	0
+	.uleb128 0x50
+	.4byte	0x2848
+	.uleb128 0x4c
+	.string	"__v"
+	.byte	0x1
+	.2byte	0x217
+	.4byte	0xae
+	.byte	0
+	.uleb128 0x50
+	.4byte	0x285a
+	.uleb128 0x4c
+	.string	"__v"
+	.byte	0x1
+	.2byte	0x218
+	.4byte	0xae
+	.byte	0
+	.uleb128 0x50
+	.4byte	0x286c
+	.uleb128 0x4c
+	.string	"__v"
+	.byte	0x1
+	.2byte	0x219
+	.4byte	0xae
+	.byte	0
+	.uleb128 0x50
+	.4byte	0x287e
+	.uleb128 0x4c
+	.string	"__v"
+	.byte	0x1
+	.2byte	0x21a
+	.4byte	0xae
+	.byte	0
+	.uleb128 0x50
+	.4byte	0x2890
+	.uleb128 0x4c
+	.string	"__v"
+	.byte	0x1
+	.2byte	0x221
+	.4byte	0xae
+	.byte	0
+	.uleb128 0x50
+	.4byte	0x28a2
+	.uleb128 0x4c
+	.string	"__v"
+	.byte	0x1
+	.2byte	0x222
+	.4byte	0xae
+	.byte	0
+	.uleb128 0x50
+	.4byte	0x28b4
+	.uleb128 0x4c
+	.string	"__v"
+	.byte	0x1
+	.2byte	0x223
+	.4byte	0xae
+	.byte	0
+	.uleb128 0x50
+	.4byte	0x28c6
+	.uleb128 0x4c
+	.string	"__v"
+	.byte	0x1
+	.2byte	0x224
+	.4byte	0xae
+	.byte	0
+	.uleb128 0x50
+	.4byte	0x28d8
+	.uleb128 0x4c
+	.string	"__v"
+	.byte	0x1
+	.2byte	0x225
+	.4byte	0xae
+	.byte	0
+	.uleb128 0x50
+	.4byte	0x28ea
+	.uleb128 0x4c
+	.string	"__v"
+	.byte	0x1
+	.2byte	0x22c
+	.4byte	0xae
+	.byte	0
+	.uleb128 0x50
+	.4byte	0x28fc
+	.uleb128 0x4c
+	.string	"__v"
+	.byte	0x1
+	.2byte	0x22d
+	.4byte	0xae
+	.byte	0
+	.uleb128 0x50
+	.4byte	0x290e
+	.uleb128 0x4c
+	.string	"__v"
+	.byte	0x1
+	.2byte	0x22e
+	.4byte	0xae
+	.byte	0
+	.uleb128 0x50
+	.4byte	0x2920
+	.uleb128 0x4c
+	.string	"__v"
+	.byte	0x1
+	.2byte	0x22f
+	.4byte	0xae
+	.byte	0
+	.uleb128 0x50
+	.4byte	0x2932
+	.uleb128 0x4c
+	.string	"__v"
+	.byte	0x1
+	.2byte	0x230
+	.4byte	0xae
+	.byte	0
+	.uleb128 0x50
+	.4byte	0x2944
+	.uleb128 0x4c
+	.string	"__v"
+	.byte	0x1
+	.2byte	0x237
+	.4byte	0xae
+	.byte	0
+	.uleb128 0x50
+	.4byte	0x2956
+	.uleb128 0x4c
+	.string	"__v"
+	.byte	0x1
+	.2byte	0x238
+	.4byte	0xae
+	.byte	0
+	.uleb128 0x50
+	.4byte	0x2968
+	.uleb128 0x4c
+	.string	"__v"
+	.byte	0x1
+	.2byte	0x239
+	.4byte	0xae
+	.byte	0
+	.uleb128 0x50
+	.4byte	0x297a
+	.uleb128 0x4c
+	.string	"__v"
+	.byte	0x1
+	.2byte	0x23a
+	.4byte	0xae
+	.byte	0
+	.uleb128 0x50
+	.4byte	0x298c
+	.uleb128 0x4c
+	.string	"__v"
+	.byte	0x1
+	.2byte	0x23b
+	.4byte	0xae
+	.byte	0
+	.uleb128 0x50
+	.4byte	0x299e
+	.uleb128 0x4c
+	.string	"__v"
+	.byte	0x1
+	.2byte	0x242
+	.4byte	0xae
+	.byte	0
+	.uleb128 0x50
+	.4byte	0x29b0
+	.uleb128 0x4c
+	.string	"__v"
+	.byte	0x1
+	.2byte	0x243
+	.4byte	0xae
+	.byte	0
+	.uleb128 0x50
+	.4byte	0x29c2
+	.uleb128 0x4c
+	.string	"__v"
+	.byte	0x1
+	.2byte	0x244
+	.4byte	0xae
+	.byte	0
+	.uleb128 0x50
+	.4byte	0x29d4
+	.uleb128 0x4c
+	.string	"__v"
+	.byte	0x1
+	.2byte	0x245
+	.4byte	0xae
+	.byte	0
+	.uleb128 0x50
+	.4byte	0x29e6
+	.uleb128 0x4c
+	.string	"__v"
+	.byte	0x1
+	.2byte	0x246
+	.4byte	0xae
+	.byte	0
+	.uleb128 0x50
+	.4byte	0x29f8
+	.uleb128 0x4c
+	.string	"__v"
+	.byte	0x1
+	.2byte	0x253
+	.4byte	0xae
+	.byte	0
+	.uleb128 0x50
+	.4byte	0x2a0a
+	.uleb128 0x4c
+	.string	"__v"
+	.byte	0x1
+	.2byte	0x254
+	.4byte	0xae
+	.byte	0
+	.uleb128 0x50
+	.4byte	0x2a1c
+	.uleb128 0x4c
+	.string	"__v"
+	.byte	0x1
+	.2byte	0x255
+	.4byte	0xae
+	.byte	0
+	.uleb128 0x50
+	.4byte	0x2a2e
+	.uleb128 0x4c
+	.string	"__v"
+	.byte	0x1
+	.2byte	0x256
+	.4byte	0xae
+	.byte	0
+	.uleb128 0x51
+	.uleb128 0x4c
+	.string	"__v"
+	.byte	0x1
+	.2byte	0x264
+	.4byte	0xae
+	.byte	0
+	.byte	0
+	.uleb128 0xa
+	.4byte	0xee
+	.4byte	0x2a4d
+	.uleb128 0x11
+	.4byte	0xda
+	.byte	0x1f
+	.byte	0
+	.uleb128 0x7
+	.4byte	0x2a3d
+	.uleb128 0x3b
+	.4byte	.LASF434
+	.byte	0x1
+	.2byte	0x1c0
+	.4byte	0x54
+	.byte	0x1
+	.4byte	0x2ab8
+	.uleb128 0x3c
+	.string	"dev"
+	.byte	0x1
+	.2byte	0x1c0
+	.4byte	0x25f
+	.uleb128 0x3c
+	.string	"otp"
+	.byte	0x1
+	.2byte	0x1c1
+	.4byte	0x182b
+	.uleb128 0x4b
+	.4byte	.LASF425
+	.byte	0x1
+	.2byte	0x1c2
+	.4byte	0x54
+	.uleb128 0x4b
+	.4byte	.LASF387
+	.byte	0x1
+	.2byte	0x1c2
+	.4byte	0x94
+	.uleb128 0x4d
+	.4byte	.LASF435
+	.byte	0x1
+	.2byte	0x1c4
+	.4byte	0xa3
+	.uleb128 0x4d
+	.4byte	.LASF430
+	.byte	0x1
+	.2byte	0x1c4
+	.4byte	0xa3
+	.uleb128 0x4c
+	.string	"ret"
+	.byte	0x1
+	.2byte	0x1c5
+	.4byte	0x54
+	.byte	0
+	.uleb128 0x52
+	.4byte	.LASF436
+	.byte	0x1
+	.byte	0xed
+	.4byte	0x54
+	.8byte	.LFB269
+	.8byte	.LFE269-.LFB269
+	.uleb128 0x1
+	.byte	0x9c
+	.4byte	0x39c0
+	.uleb128 0x53
+	.string	"dev"
+	.byte	0x1
+	.byte	0xed
+	.4byte	0x25f
+	.4byte	.LLST30
+	.uleb128 0x53
+	.string	"otp"
+	.byte	0x1
+	.byte	0xee
+	.4byte	0x182b
+	.4byte	.LLST31
+	.uleb128 0x54
+	.4byte	.LASF425
+	.byte	0x1
+	.byte	0xef
+	.4byte	0x54
+	.4byte	.LLST32
+	.uleb128 0x54
+	.4byte	.LASF387
+	.byte	0x1
+	.byte	0xef
+	.4byte	0xa3
+	.4byte	.LLST33
+	.uleb128 0x55
+	.string	"ret"
+	.byte	0x1
+	.byte	0xf1
+	.4byte	0x54
+	.4byte	.LLST34
+	.uleb128 0x56
+	.4byte	.LASF426
+	.byte	0x1
+	.byte	0xf2
+	.4byte	0x1981
+	.4byte	.LLST35
+	.uleb128 0x57
+	.4byte	.LASF433
+	.4byte	0x39d0
+	.uleb128 0x9
+	.byte	0x3
+	.8byte	__func__.7678
+	.uleb128 0x58
+	.4byte	.LASF439
+	.byte	0x1
+	.2byte	0x1b9
+	.8byte	.L39
+	.uleb128 0x45
+	.8byte	.LBB40
+	.8byte	.LBE40-.LBB40
+	.4byte	0x2b7c
+	.uleb128 0x33
+	.string	"__v"
+	.byte	0x1
+	.2byte	0x106
+	.4byte	0xae
+	.4byte	.LLST36
+	.byte	0
+	.uleb128 0x45
+	.8byte	.LBB41
+	.8byte	.LBE41-.LBB41
+	.4byte	0x2ba2
+	.uleb128 0x33
+	.string	"__v"
+	.byte	0x1
+	.2byte	0x107
+	.4byte	0xae
+	.4byte	.LLST37
+	.byte	0
+	.uleb128 0x45
+	.8byte	.LBB42
+	.8byte	.LBE42-.LBB42
+	.4byte	0x2bc8
+	.uleb128 0x33
+	.string	"__v"
+	.byte	0x1
+	.2byte	0x108
+	.4byte	0xae
+	.4byte	.LLST38
+	.byte	0
+	.uleb128 0x45
+	.8byte	.LBB43
+	.8byte	.LBE43-.LBB43
+	.4byte	0x2bee
+	.uleb128 0x33
+	.string	"__v"
+	.byte	0x1
+	.2byte	0x109
+	.4byte	0xae
+	.4byte	.LLST39
+	.byte	0
+	.uleb128 0x45
+	.8byte	.LBB44
+	.8byte	.LBE44-.LBB44
+	.4byte	0x2c14
+	.uleb128 0x33
+	.string	"__v"
+	.byte	0x1
+	.2byte	0x10a
+	.4byte	0xae
+	.4byte	.LLST40
+	.byte	0
+	.uleb128 0x45
+	.8byte	.LBB45
+	.8byte	.LBE45-.LBB45
+	.4byte	0x2c3a
+	.uleb128 0x33
+	.string	"__v"
+	.byte	0x1
+	.2byte	0x10b
+	.4byte	0xae
+	.4byte	.LLST41
+	.byte	0
+	.uleb128 0x45
+	.8byte	.LBB46
+	.8byte	.LBE46-.LBB46
+	.4byte	0x2c60
+	.uleb128 0x33
+	.string	"__v"
+	.byte	0x1
+	.2byte	0x10c
+	.4byte	0xae
+	.4byte	.LLST42
+	.byte	0
+	.uleb128 0x45
+	.8byte	.LBB47
+	.8byte	.LBE47-.LBB47
+	.4byte	0x2c86
+	.uleb128 0x33
+	.string	"__v"
+	.byte	0x1
+	.2byte	0x10d
+	.4byte	0xae
+	.4byte	.LLST43
+	.byte	0
+	.uleb128 0x46
+	.4byte	.Ldebug_ranges0+0
+	.4byte	0x2ca0
+	.uleb128 0x33
+	.string	"__v"
+	.byte	0x1
+	.2byte	0x10e
+	.4byte	0xae
+	.4byte	.LLST44
+	.byte	0
+	.uleb128 0x45
+	.8byte	.LBB50
+	.8byte	.LBE50-.LBB50
+	.4byte	0x2cc5
+	.uleb128 0x59
+	.string	"__v"
+	.byte	0x1
+	.2byte	0x115
+	.4byte	0xae
+	.sleb128 -65522
+	.byte	0
+	.uleb128 0x45
+	.8byte	.LBB51
+	.8byte	.LBE51-.LBB51
+	.4byte	0x2ce8
+	.uleb128 0x5a
+	.string	"__v"
+	.byte	0x1
+	.2byte	0x116
+	.4byte	0xae
+	.byte	0xf0
+	.byte	0
+	.uleb128 0x45
+	.8byte	.LBB52
+	.8byte	.LBE52-.LBB52
+	.4byte	0x2d0b
+	.uleb128 0x5a
+	.string	"__v"
+	.byte	0x1
+	.2byte	0x117
+	.4byte	0xae
+	.byte	0x1
+	.byte	0
+	.uleb128 0x45
+	.8byte	.LBB53
+	.8byte	.LBE53-.LBB53
+	.4byte	0x2d2e
+	.uleb128 0x5a
+	.string	"__v"
+	.byte	0x1
+	.2byte	0x118
+	.4byte	0xae
+	.byte	0x7a
+	.byte	0
+	.uleb128 0x45
+	.8byte	.LBB54
+	.8byte	.LBE54-.LBB54
+	.4byte	0x2d51
+	.uleb128 0x5a
+	.string	"__v"
+	.byte	0x1
+	.2byte	0x119
+	.4byte	0xae
+	.byte	0x25
+	.byte	0
+	.uleb128 0x45
+	.8byte	.LBB55
+	.8byte	.LBE55-.LBB55
+	.4byte	0x2d74
+	.uleb128 0x5a
+	.string	"__v"
+	.byte	0x1
+	.2byte	0x11a
+	.4byte	0xae
+	.byte	0
+	.byte	0
+	.uleb128 0x45
+	.8byte	.LBB56
+	.8byte	.LBE56-.LBB56
+	.4byte	0x2d97
+	.uleb128 0x5a
+	.string	"__v"
+	.byte	0x1
+	.2byte	0x11b
+	.4byte	0xae
+	.byte	0
+	.byte	0
+	.uleb128 0x45
+	.8byte	.LBB57
+	.8byte	.LBE57-.LBB57
+	.4byte	0x2dba
+	.uleb128 0x5a
+	.string	"__v"
+	.byte	0x1
+	.2byte	0x11c
+	.4byte	0xae
+	.byte	0
+	.byte	0
+	.uleb128 0x45
+	.8byte	.LBB58
+	.8byte	.LBE58-.LBB58
+	.4byte	0x2ddd
+	.uleb128 0x5a
+	.string	"__v"
+	.byte	0x1
+	.2byte	0x11d
+	.4byte	0xae
+	.byte	0x1f
+	.byte	0
+	.uleb128 0x45
+	.8byte	.LBB59
+	.8byte	.LBE59-.LBB59
+	.4byte	0x2e00
+	.uleb128 0x5a
+	.string	"__v"
+	.byte	0x1
+	.2byte	0x11e
+	.4byte	0xae
+	.byte	0xb
+	.byte	0
+	.uleb128 0x45
+	.8byte	.LBB60
+	.8byte	.LBE60-.LBB60
+	.4byte	0x2e23
+	.uleb128 0x5a
+	.string	"__v"
+	.byte	0x1
+	.2byte	0x11f
+	.4byte	0xae
+	.byte	0x8
+	.byte	0
+	.uleb128 0x45
+	.8byte	.LBB61
+	.8byte	.LBE61-.LBB61
+	.4byte	0x2e46
+	.uleb128 0x5a
+	.string	"__v"
+	.byte	0x1
+	.2byte	0x120
+	.4byte	0xae
+	.byte	0
+	.byte	0
+	.uleb128 0x45
+	.8byte	.LBB62
+	.8byte	.LBE62-.LBB62
+	.4byte	0x2e69
+	.uleb128 0x5a
+	.string	"__v"
+	.byte	0x1
+	.2byte	0x121
+	.4byte	0xae
+	.byte	0
+	.byte	0
+	.uleb128 0x45
+	.8byte	.LBB63
+	.8byte	.LBE63-.LBB63
+	.4byte	0x2e8c
+	.uleb128 0x5a
+	.string	"__v"
+	.byte	0x1
+	.2byte	0x122
+	.4byte	0xae
+	.byte	0
+	.byte	0
+	.uleb128 0x46
+	.4byte	.Ldebug_ranges0+0x30
+	.4byte	0x2ea4
+	.uleb128 0x5b
+	.string	"__v"
+	.byte	0x1
+	.2byte	0x123
+	.4byte	0xae
+	.uleb128 0x1
+	.byte	0x50
+	.byte	0
+	.uleb128 0x46
+	.4byte	.Ldebug_ranges0+0x60
+	.4byte	0x2ebe
+	.uleb128 0x33
+	.string	"__v"
+	.byte	0x1
+	.2byte	0x124
+	.4byte	0xae
+	.4byte	.LLST45
+	.byte	0
+	.uleb128 0x46
+	.4byte	.Ldebug_ranges0+0x90
+	.4byte	0x2ed8
+	.uleb128 0x5c
+	.string	"__v"
+	.byte	0x1
+	.2byte	0x125
+	.4byte	0xae
+	.4byte	0x10001
+	.byte	0
+	.uleb128 0x45
+	.8byte	.LBB70
+	.8byte	.LBE70-.LBB70
+	.4byte	0x2efd
+	.uleb128 0x59
+	.string	"__v"
+	.byte	0x1
+	.2byte	0x12c
+	.4byte	0xae
+	.sleb128 -65535
+	.byte	0
+	.uleb128 0x45
+	.8byte	.LBB71
+	.8byte	.LBE71-.LBB71
+	.4byte	0x2f20
+	.uleb128 0x5a
+	.string	"__v"
+	.byte	0x1
+	.2byte	0x12d
+	.4byte	0xae
+	.byte	0xfa
+	.byte	0
+	.uleb128 0x45
+	.8byte	.LBB72
+	.8byte	.LBE72-.LBB72
+	.4byte	0x2f43
+	.uleb128 0x5a
+	.string	"__v"
+	.byte	0x1
+	.2byte	0x12e
+	.4byte	0xae
+	.byte	0x9
+	.byte	0
+	.uleb128 0x46
+	.4byte	.Ldebug_ranges0+0xc0
+	.4byte	0x2f5d
+	.uleb128 0x5c
+	.string	"__v"
+	.byte	0x1
+	.2byte	0x12f
+	.4byte	0xae
+	.4byte	0x10001
+	.byte	0
+	.uleb128 0x45
+	.8byte	.LBB75
+	.8byte	.LBE75-.LBB75
+	.4byte	0x2f83
+	.uleb128 0x59
+	.string	"__v"
+	.byte	0x1
+	.2byte	0x136
+	.4byte	0xae
+	.sleb128 -16762368
+	.byte	0
+	.uleb128 0x45
+	.8byte	.LBB76
+	.8byte	.LBE76-.LBB76
+	.4byte	0x2fa8
+	.uleb128 0x59
+	.string	"__v"
+	.byte	0x1
+	.2byte	0x137
+	.4byte	0xae
+	.sleb128 -65522
+	.byte	0
+	.uleb128 0x45
+	.8byte	.LBB77
+	.8byte	.LBE77-.LBB77
+	.4byte	0x2fcb
+	.uleb128 0x5a
+	.string	"__v"
+	.byte	0x1
+	.2byte	0x138
+	.4byte	0xae
+	.byte	0xf0
+	.byte	0
+	.uleb128 0x45
+	.8byte	.LBB78
+	.8byte	.LBE78-.LBB78
+	.4byte	0x2fee
+	.uleb128 0x5a
+	.string	"__v"
+	.byte	0x1
+	.2byte	0x139
+	.4byte	0xae
+	.byte	0x1
+	.byte	0
+	.uleb128 0x45
+	.8byte	.LBB79
+	.8byte	.LBE79-.LBB79
+	.4byte	0x3011
+	.uleb128 0x5a
+	.string	"__v"
+	.byte	0x1
+	.2byte	0x13a
+	.4byte	0xae
+	.byte	0x7a
+	.byte	0
+	.uleb128 0x45
+	.8byte	.LBB80
+	.8byte	.LBE80-.LBB80
+	.4byte	0x3034
+	.uleb128 0x5a
+	.string	"__v"
+	.byte	0x1
+	.2byte	0x13b
+	.4byte	0xae
+	.byte	0x15
+	.byte	0
+	.uleb128 0x45
+	.8byte	.LBB81
+	.8byte	.LBE81-.LBB81
+	.4byte	0x3057
+	.uleb128 0x5a
+	.string	"__v"
+	.byte	0x1
+	.2byte	0x13c
+	.4byte	0xae
+	.byte	0xdc
+	.byte	0
+	.uleb128 0x45
+	.8byte	.LBB82
+	.8byte	.LBE82-.LBB82
+	.4byte	0x307a
+	.uleb128 0x5a
+	.string	"__v"
+	.byte	0x1
+	.2byte	0x13d
+	.4byte	0xae
+	.byte	0x92
+	.byte	0
+	.uleb128 0x45
+	.8byte	.LBB83
+	.8byte	.LBE83-.LBB83
+	.4byte	0x309d
+	.uleb128 0x5a
+	.string	"__v"
+	.byte	0x1
+	.2byte	0x13e
+	.4byte	0xae
+	.byte	0x79
+	.byte	0
+	.uleb128 0x45
+	.8byte	.LBB84
+	.8byte	.LBE84-.LBB84
+	.4byte	0x30c0
+	.uleb128 0x5a
+	.string	"__v"
+	.byte	0x1
+	.2byte	0x13f
+	.4byte	0xae
+	.byte	0x81
+	.byte	0
+	.uleb128 0x45
+	.8byte	.LBB85
+	.8byte	.LBE85-.LBB85
+	.4byte	0x30e3
+	.uleb128 0x5a
+	.string	"__v"
+	.byte	0x1
+	.2byte	0x140
+	.4byte	0xae
+	.byte	0x7e
+	.byte	0
+	.uleb128 0x45
+	.8byte	.LBB86
+	.8byte	.LBE86-.LBB86
+	.4byte	0x3106
+	.uleb128 0x5a
+	.string	"__v"
+	.byte	0x1
+	.2byte	0x141
+	.4byte	0xae
+	.byte	0x21
+	.byte	0
+	.uleb128 0x45
+	.8byte	.LBB87
+	.8byte	.LBE87-.LBB87
+	.4byte	0x3129
+	.uleb128 0x5a
+	.string	"__v"
+	.byte	0x1
+	.2byte	0x142
+	.4byte	0xae
+	.byte	0x11
+	.byte	0
+	.uleb128 0x45
+	.8byte	.LBB88
+	.8byte	.LBE88-.LBB88
+	.4byte	0x314c
+	.uleb128 0x5a
+	.string	"__v"
+	.byte	0x1
+	.2byte	0x143
+	.4byte	0xae
+	.byte	0x9d
+	.byte	0
+	.uleb128 0x45
+	.8byte	.LBB89
+	.8byte	.LBE89-.LBB89
+	.4byte	0x316f
+	.uleb128 0x5a
+	.string	"__v"
+	.byte	0x1
+	.2byte	0x144
+	.4byte	0xae
+	.byte	0x2
+	.byte	0
+	.uleb128 0x45
+	.8byte	.LBB90
+	.8byte	.LBE90-.LBB90
+	.4byte	0x3192
+	.uleb128 0x5a
+	.string	"__v"
+	.byte	0x1
+	.2byte	0x145
+	.4byte	0xae
+	.byte	0
+	.byte	0
+	.uleb128 0x45
+	.8byte	.LBB91
+	.8byte	.LBE91-.LBB91
+	.4byte	0x31b5
+	.uleb128 0x5a
+	.string	"__v"
+	.byte	0x1
+	.2byte	0x146
+	.4byte	0xae
+	.byte	0x40
+	.byte	0
+	.uleb128 0x46
+	.4byte	.Ldebug_ranges0+0xf0
+	.4byte	0x31cf
+	.uleb128 0x5c
+	.string	"__v"
+	.byte	0x1
+	.2byte	0x147
+	.4byte	0xae
+	.4byte	0x10001
+	.byte	0
+	.uleb128 0x45
+	.8byte	.LBB94
+	.8byte	.LBE94-.LBB94
+	.4byte	0x31f4
+	.uleb128 0x59
+	.string	"__v"
+	.byte	0x1
+	.2byte	0x14e
+	.4byte	0xae
+	.sleb128 -65534
+	.byte	0
+	.uleb128 0x45
+	.8byte	.LBB95
+	.8byte	.LBE95-.LBB95
+	.4byte	0x3217
+	.uleb128 0x5a
+	.string	"__v"
+	.byte	0x1
+	.2byte	0x14f
+	.4byte	0xae
+	.byte	0xfc
+	.byte	0
+	.uleb128 0x45
+	.8byte	.LBB96
+	.8byte	.LBE96-.LBB96
+	.4byte	0x323a
+	.uleb128 0x5a
+	.string	"__v"
+	.byte	0x1
+	.2byte	0x150
+	.4byte	0xae
+	.byte	0xa
+	.byte	0
+	.uleb128 0x45
+	.8byte	.LBB97
+	.8byte	.LBE97-.LBB97
+	.4byte	0x325d
+	.uleb128 0x5a
+	.string	"__v"
+	.byte	0x1
+	.2byte	0x151
+	.4byte	0xae
+	.byte	0x70
+	.byte	0
+	.uleb128 0x46
+	.4byte	.Ldebug_ranges0+0x120
+	.4byte	0x3277
+	.uleb128 0x5c
+	.string	"__v"
+	.byte	0x1
+	.2byte	0x152
+	.4byte	0xae
+	.4byte	0x10001
+	.byte	0
+	.uleb128 0x45
+	.8byte	.LBB100
+	.8byte	.LBE100-.LBB100
+	.4byte	0x329d
+	.uleb128 0x59
+	.string	"__v"
+	.byte	0x1
+	.2byte	0x159
+	.4byte	0xae
+	.sleb128 -16776704
+	.byte	0
+	.uleb128 0x45
+	.8byte	.LBB101
+	.8byte	.LBE101-.LBB101
+	.4byte	0x32c2
+	.uleb128 0x59
+	.string	"__v"
+	.byte	0x1
+	.2byte	0x15a
+	.4byte	0xae
+	.sleb128 -65534
+	.byte	0
+	.uleb128 0x45
+	.8byte	.LBB102
+	.8byte	.LBE102-.LBB102
+	.4byte	0x32e5
+	.uleb128 0x5a
+	.string	"__v"
+	.byte	0x1
+	.2byte	0x15b
+	.4byte	0xae
+	.byte	0xc0
+	.byte	0
+	.uleb128 0x46
+	.4byte	.Ldebug_ranges0+0x150
+	.4byte	0x32ff
+	.uleb128 0x33
+	.string	"__v"
+	.byte	0x1
+	.2byte	0x15c
+	.4byte	0xae
+	.4byte	.LLST46
+	.byte	0
+	.uleb128 0x46
+	.4byte	.Ldebug_ranges0+0x180
+	.4byte	0x3319
+	.uleb128 0x33
+	.string	"__v"
+	.byte	0x1
+	.2byte	0x15d
+	.4byte	0xae
+	.4byte	.LLST47
+	.byte	0
+	.uleb128 0x46
+	.4byte	.Ldebug_ranges0+0x1b0
+	.4byte	0x3333
+	.uleb128 0x5c
+	.string	"__v"
+	.byte	0x1
+	.2byte	0x15e
+	.4byte	0xae
+	.4byte	0x10001
+	.byte	0
+	.uleb128 0x45
+	.8byte	.LBB109
+	.8byte	.LBE109-.LBB109
+	.4byte	0x3358
+	.uleb128 0x59
+	.string	"__v"
+	.byte	0x1
+	.2byte	0x165
+	.4byte	0xae
+	.sleb128 -65535
+	.byte	0
+	.uleb128 0x45
+	.8byte	.LBB110
+	.8byte	.LBE110-.LBB110
+	.4byte	0x337b
+	.uleb128 0x5a
+	.string	"__v"
+	.byte	0x1
+	.2byte	0x166
+	.4byte	0xae
+	.byte	0xe0
+	.byte	0
+	.uleb128 0x45
+	.8byte	.LBB111
+	.8byte	.LBE111-.LBB111
+	.4byte	0x339e
+	.uleb128 0x5a
+	.string	"__v"
+	.byte	0x1
+	.2byte	0x167
+	.4byte	0xae
+	.byte	0
+	.byte	0
+	.uleb128 0x46
+	.4byte	.Ldebug_ranges0+0x1e0
+	.4byte	0x33b8
+	.uleb128 0x5c
+	.string	"__v"
+	.byte	0x1
+	.2byte	0x168
+	.4byte	0xae
+	.4byte	0x10001
+	.byte	0
+	.uleb128 0x45
+	.8byte	.LBB114
+	.8byte	.LBE114-.LBB114
+	.4byte	0x33dd
+	.uleb128 0x59
+	.string	"__v"
+	.byte	0x1
+	.2byte	0x16f
+	.4byte	0xae
+	.sleb128 -65535
+	.byte	0
+	.uleb128 0x45
+	.8byte	.LBB115
+	.8byte	.LBE115-.LBB115
+	.4byte	0x3403
+	.uleb128 0x59
+	.string	"__v"
+	.byte	0x1
+	.2byte	0x170
+	.4byte	0xae
+	.sleb128 -16762368
+	.byte	0
+	.uleb128 0x45
+	.8byte	.LBB116
+	.8byte	.LBE116-.LBB116
+	.4byte	0x3426
+	.uleb128 0x5a
+	.string	"__v"
+	.byte	0x1
+	.2byte	0x171
+	.4byte	0xae
+	.byte	0xff
+	.byte	0
+	.uleb128 0x45
+	.8byte	.LBB117
+	.8byte	.LBE117-.LBB117
+	.4byte	0x3449
+	.uleb128 0x5a
+	.string	"__v"
+	.byte	0x1
+	.2byte	0x172
+	.4byte	0xae
+	.byte	0xa
+	.byte	0
+	.uleb128 0x46
+	.4byte	.Ldebug_ranges0+0x210
+	.4byte	0x3463
+	.uleb128 0x5c
+	.string	"__v"
+	.byte	0x1
+	.2byte	0x173
+	.4byte	0xae
+	.4byte	0x10001
+	.byte	0
+	.uleb128 0x45
+	.8byte	.LBB120
+	.8byte	.LBE120-.LBB120
+	.4byte	0x3488
+	.uleb128 0x59
+	.string	"__v"
+	.byte	0x1
+	.2byte	0x17a
+	.4byte	0xae
+	.sleb128 -65535
+	.byte	0
+	.uleb128 0x45
+	.8byte	.LBB121
+	.8byte	.LBE121-.LBB121
+	.4byte	0x34ab
+	.uleb128 0x5a
+	.string	"__v"
+	.byte	0x1
+	.2byte	0x17b
+	.4byte	0xae
+	.byte	0x1
+	.byte	0
+	.uleb128 0x45
+	.8byte	.LBB122
+	.8byte	.LBE122-.LBB122
+	.4byte	0x34ce
+	.uleb128 0x5a
+	.string	"__v"
+	.byte	0x1
+	.2byte	0x17c
+	.4byte	0xae
+	.byte	0xbf
+	.byte	0
+	.uleb128 0x46
+	.4byte	.Ldebug_ranges0+0x240
+	.4byte	0x34e8
+	.uleb128 0x5c
+	.string	"__v"
+	.byte	0x1
+	.2byte	0x17d
+	.4byte	0xae
+	.4byte	0x10001
+	.byte	0
+	.uleb128 0x45
+	.8byte	.LBB125
+	.8byte	.LBE125-.LBB125
+	.4byte	0x350d
+	.uleb128 0x59
+	.string	"__v"
+	.byte	0x1
+	.2byte	0x18a
+	.4byte	0xae
+	.sleb128 -65535
+	.byte	0
+	.uleb128 0x45
+	.8byte	.LBB126
+	.8byte	.LBE126-.LBB126
+	.4byte	0x3530
+	.uleb128 0x5a
+	.string	"__v"
+	.byte	0x1
+	.2byte	0x18b
+	.4byte	0xae
+	.byte	0x2
+	.byte	0
+	.uleb128 0x45
+	.8byte	.LBB127
+	.8byte	.LBE127-.LBB127
+	.4byte	0x3553
+	.uleb128 0x5a
+	.string	"__v"
+	.byte	0x1
+	.2byte	0x18c
+	.4byte	0xae
+	.byte	0xbf
+	.byte	0
+	.uleb128 0x46
+	.4byte	.Ldebug_ranges0+0x270
+	.4byte	0x356d
+	.uleb128 0x5c
+	.string	"__v"
+	.byte	0x1
+	.2byte	0x18d
+	.4byte	0xae
+	.4byte	0x10001
+	.byte	0
+	.uleb128 0x45
+	.8byte	.LBB130
+	.8byte	.LBE130-.LBB130
+	.4byte	0x3592
+	.uleb128 0x59
+	.string	"__v"
+	.byte	0x1
+	.2byte	0x19a
+	.4byte	0xae
+	.sleb128 -65533
+	.byte	0
+	.uleb128 0x45
+	.8byte	.LBB131
+	.8byte	.LBE131-.LBB131
+	.4byte	0x35b8
+	.uleb128 0x59
+	.string	"__v"
+	.byte	0x1
+	.2byte	0x19b
+	.4byte	0xae
+	.sleb128 -16776704
+	.byte	0
+	.uleb128 0x45
+	.8byte	.LBB132
+	.8byte	.LBE132-.LBB132
+	.4byte	0x35dd
+	.uleb128 0x59
+	.string	"__v"
+	.byte	0x1
+	.2byte	0x19c
+	.4byte	0xae
+	.sleb128 -65535
+	.byte	0
+	.uleb128 0x45
+	.8byte	.LBB133
+	.8byte	.LBE133-.LBB133
+	.4byte	0x3600
+	.uleb128 0x5a
+	.string	"__v"
+	.byte	0x1
+	.2byte	0x19d
+	.4byte	0xae
+	.byte	0x2
+	.byte	0
+	.uleb128 0x45
+	.8byte	.LBB134
+	.8byte	.LBE134-.LBB134
+	.4byte	0x3623
+	.uleb128 0x5a
+	.string	"__v"
+	.byte	0x1
+	.2byte	0x19e
+	.4byte	0xae
+	.byte	0x80
+	.byte	0
+	.uleb128 0x46
+	.4byte	.Ldebug_ranges0+0x2a0
+	.4byte	0x363d
+	.uleb128 0x5c
+	.string	"__v"
+	.byte	0x1
+	.2byte	0x19f
+	.4byte	0xae
+	.4byte	0x10001
+	.byte	0
+	.uleb128 0x45
+	.8byte	.LBB137
+	.8byte	.LBE137-.LBB137
+	.4byte	0x3662
+	.uleb128 0x59
+	.string	"__v"
+	.byte	0x1
+	.2byte	0x1a6
+	.4byte	0xae
+	.sleb128 -65535
+	.byte	0
+	.uleb128 0x45
+	.8byte	.LBB138
+	.8byte	.LBE138-.LBB138
+	.4byte	0x3685
+	.uleb128 0x5a
+	.string	"__v"
+	.byte	0x1
+	.2byte	0x1a7
+	.4byte	0xae
+	.byte	0xa0
+	.byte	0
+	.uleb128 0x45
+	.8byte	.LBB139
+	.8byte	.LBE139-.LBB139
+	.4byte	0x36a8
+	.uleb128 0x5a
+	.string	"__v"
+	.byte	0x1
+	.2byte	0x1a8
+	.4byte	0xae
+	.byte	0
+	.byte	0
+	.uleb128 0x46
+	.4byte	.Ldebug_ranges0+0x2d0
+	.4byte	0x36c2
+	.uleb128 0x5c
+	.string	"__v"
+	.byte	0x1
+	.2byte	0x1a9
+	.4byte	0xae
+	.4byte	0x10001
+	.byte	0
+	.uleb128 0x45
+	.8byte	.LBB142
+	.8byte	.LBE142-.LBB142
+	.4byte	0x36e5
+	.uleb128 0x5a
+	.string	"__v"
+	.byte	0x1
+	.2byte	0x1b0
+	.4byte	0xae
+	.byte	0xfa
+	.byte	0
+	.uleb128 0x45
+	.8byte	.LBB143
+	.8byte	.LBE143-.LBB143
+	.4byte	0x3708
+	.uleb128 0x5a
+	.string	"__v"
+	.byte	0x1
+	.2byte	0x1b1
+	.4byte	0xae
+	.byte	0x9
+	.byte	0
+	.uleb128 0x46
+	.4byte	.Ldebug_ranges0+0x300
+	.4byte	0x3722
+	.uleb128 0x5c
+	.string	"__v"
+	.byte	0x1
+	.2byte	0x1b2
+	.4byte	0xae
+	.4byte	0x10001
+	.byte	0
+	.uleb128 0x34
+	.8byte	.LVL67
+	.4byte	0x42ab
+	.4byte	0x373b
+	.uleb128 0x35
+	.uleb128 0x1
+	.byte	0x50
+	.uleb128 0x3
+	.byte	0xf3
+	.uleb128 0x1
+	.byte	0x50
+	.byte	0
+	.uleb128 0x34
+	.8byte	.LVL69
+	.4byte	0x42b7
+	.4byte	0x3763
+	.uleb128 0x35
+	.uleb128 0x1
+	.byte	0x50
+	.uleb128 0x9
+	.byte	0x3
+	.8byte	.LC4
+	.uleb128 0x35
+	.uleb128 0x1
+	.byte	0x51
+	.uleb128 0x5
+	.byte	0x88
+	.sleb128 0
+	.byte	0x9
+	.byte	0xfe
+	.byte	0x1a
+	.byte	0
+	.uleb128 0x47
+	.8byte	.LVL74
+	.4byte	0x3777
+	.uleb128 0x35
+	.uleb128 0x1
+	.byte	0x53
+	.uleb128 0x2
+	.byte	0x84
+	.sleb128 0
+	.byte	0
+	.uleb128 0x34
+	.8byte	.LVL83
+	.4byte	0x401e
+	.4byte	0x379c
+	.uleb128 0x35
+	.uleb128 0x1
+	.byte	0x50
+	.uleb128 0x2
+	.byte	0x8a
+	.sleb128 0
+	.uleb128 0x35
+	.uleb128 0x1
+	.byte	0x51
+	.uleb128 0x1
+	.byte	0x32
+	.uleb128 0x48
+	.4byte	0x3d7a
+	.uleb128 0x2
+	.byte	0x8a
+	.sleb128 0
+	.byte	0
+	.uleb128 0x49
+	.8byte	.LVL85
+	.4byte	0x42b7
+	.uleb128 0x47
+	.8byte	.LVL86
+	.4byte	0x37bd
+	.uleb128 0x35
+	.uleb128 0x1
+	.byte	0x53
+	.uleb128 0x2
+	.byte	0x84
+	.sleb128 0
+	.byte	0
+	.uleb128 0x34
+	.8byte	.LVL104
+	.4byte	0x401e
+	.4byte	0x37e2
+	.uleb128 0x35
+	.uleb128 0x1
+	.byte	0x50
+	.uleb128 0x2
+	.byte	0x8a
+	.sleb128 0
+	.uleb128 0x35
+	.uleb128 0x1
+	.byte	0x51
+	.uleb128 0x1
+	.byte	0x32
+	.uleb128 0x48
+	.4byte	0x3d7a
+	.uleb128 0x2
+	.byte	0x8a
+	.sleb128 0
+	.byte	0
+	.uleb128 0x34
+	.8byte	.LVL110
+	.4byte	0x401e
+	.4byte	0x3807
+	.uleb128 0x35
+	.uleb128 0x1
+	.byte	0x50
+	.uleb128 0x2
+	.byte	0x8a
+	.sleb128 0
+	.uleb128 0x35
+	.uleb128 0x1
+	.byte	0x51
+	.uleb128 0x1
+	.byte	0x32
+	.uleb128 0x48
+	.4byte	0x3d7a
+	.uleb128 0x2
+	.byte	0x8a
+	.sleb128 0
+	.byte	0
+	.uleb128 0x34
+	.8byte	.LVL130
+	.4byte	0x401e
+	.4byte	0x382d
+	.uleb128 0x35
+	.uleb128 0x1
+	.byte	0x50
+	.uleb128 0x2
+	.byte	0x8a
+	.sleb128 0
+	.uleb128 0x35
+	.uleb128 0x1
+	.byte	0x51
+	.uleb128 0x2
+	.byte	0x89
+	.sleb128 0
+	.uleb128 0x48
+	.4byte	0x3d7a
+	.uleb128 0x2
+	.byte	0x8a
+	.sleb128 0
+	.byte	0
+	.uleb128 0x34
+	.8byte	.LVL137
+	.4byte	0x401e
+	.4byte	0x3853
+	.uleb128 0x35
+	.uleb128 0x1
+	.byte	0x50
+	.uleb128 0x2
+	.byte	0x8a
+	.sleb128 0
+	.uleb128 0x35
+	.uleb128 0x1
+	.byte	0x51
+	.uleb128 0x2
+	.byte	0x89
+	.sleb128 0
+	.uleb128 0x48
+	.4byte	0x3d7a
+	.uleb128 0x2
+	.byte	0x8a
+	.sleb128 0
+	.byte	0
+	.uleb128 0x34
+	.8byte	.LVL146
+	.4byte	0x401e
+	.4byte	0x3879
+	.uleb128 0x35
+	.uleb128 0x1
+	.byte	0x50
+	.uleb128 0x2
+	.byte	0x8a
+	.sleb128 0
+	.uleb128 0x35
+	.uleb128 0x1
+	.byte	0x51
+	.uleb128 0x2
+	.byte	0x89
+	.sleb128 0
+	.uleb128 0x48
+	.4byte	0x3d7a
+	.uleb128 0x2
+	.byte	0x8a
+	.sleb128 0
+	.byte	0
+	.uleb128 0x34
+	.8byte	.LVL152
+	.4byte	0x401e
+	.4byte	0x389f
+	.uleb128 0x35
+	.uleb128 0x1
+	.byte	0x50
+	.uleb128 0x2
+	.byte	0x8a
+	.sleb128 0
+	.uleb128 0x35
+	.uleb128 0x1
+	.byte	0x51
+	.uleb128 0x2
+	.byte	0x89
+	.sleb128 0
+	.uleb128 0x48
+	.4byte	0x3d7a
+	.uleb128 0x2
+	.byte	0x8a
+	.sleb128 0
+	.byte	0
+	.uleb128 0x34
+	.8byte	.LVL160
+	.4byte	0x401e
+	.4byte	0x38c5
+	.uleb128 0x35
+	.uleb128 0x1
+	.byte	0x50
+	.uleb128 0x2
+	.byte	0x8a
+	.sleb128 0
+	.uleb128 0x35
+	.uleb128 0x1
+	.byte	0x51
+	.uleb128 0x2
+	.byte	0x89
+	.sleb128 0
+	.uleb128 0x48
+	.4byte	0x3d7a
+	.uleb128 0x2
+	.byte	0x8a
+	.sleb128 0
+	.byte	0
+	.uleb128 0x34
+	.8byte	.LVL167
+	.4byte	0x401e
+	.4byte	0x38eb
+	.uleb128 0x35
+	.uleb128 0x1
+	.byte	0x50
+	.uleb128 0x2
+	.byte	0x8a
+	.sleb128 0
+	.uleb128 0x35
+	.uleb128 0x1
+	.byte	0x51
+	.uleb128 0x2
+	.byte	0x89
+	.sleb128 0
+	.uleb128 0x48
+	.4byte	0x3d7a
+	.uleb128 0x2
+	.byte	0x8a
+	.sleb128 0
+	.byte	0
+	.uleb128 0x34
+	.8byte	.LVL169
+	.4byte	0x3f49
+	.4byte	0x390b
+	.uleb128 0x35
+	.uleb128 0x1
+	.byte	0x50
+	.uleb128 0x2
+	.byte	0x8a
+	.sleb128 0
+	.uleb128 0x48
+	.4byte	0x3ce6
+	.uleb128 0x2
+	.byte	0x8a
+	.sleb128 0
+	.byte	0
+	.uleb128 0x34
+	.8byte	.LVL176
+	.4byte	0x401e
+	.4byte	0x3931
+	.uleb128 0x35
+	.uleb128 0x1
+	.byte	0x50
+	.uleb128 0x2
+	.byte	0x8a
+	.sleb128 0
+	.uleb128 0x35
+	.uleb128 0x1
+	.byte	0x51
+	.uleb128 0x2
+	.byte	0x89
+	.sleb128 0
+	.uleb128 0x48
+	.4byte	0x3d7a
+	.uleb128 0x2
+	.byte	0x8a
+	.sleb128 0
+	.byte	0
+	.uleb128 0x34
+	.8byte	.LVL178
+	.4byte	0x3fb3
+	.4byte	0x3951
+	.uleb128 0x35
+	.uleb128 0x1
+	.byte	0x50
+	.uleb128 0x2
+	.byte	0x8a
+	.sleb128 0
+	.uleb128 0x48
+	.4byte	0x3d30
+	.uleb128 0x2
+	.byte	0x8a
+	.sleb128 0
+	.byte	0
+	.uleb128 0x34
+	.8byte	.LVL187
+	.4byte	0x401e
+	.4byte	0x3977
+	.uleb128 0x35
+	.uleb128 0x1
+	.byte	0x50
+	.uleb128 0x2
+	.byte	0x8a
+	.sleb128 0
+	.uleb128 0x35
+	.uleb128 0x1
+	.byte	0x51
+	.uleb128 0x2
+	.byte	0x89
+	.sleb128 0
+	.uleb128 0x48
+	.4byte	0x3d7a
+	.uleb128 0x2
+	.byte	0x8a
+	.sleb128 0
+	.byte	0
+	.uleb128 0x34
+	.8byte	.LVL193
+	.4byte	0x401e
+	.4byte	0x399d
+	.uleb128 0x35
+	.uleb128 0x1
+	.byte	0x50
+	.uleb128 0x2
+	.byte	0x8a
+	.sleb128 0
+	.uleb128 0x35
+	.uleb128 0x1
+	.byte	0x51
+	.uleb128 0x2
+	.byte	0x89
+	.sleb128 0
+	.uleb128 0x48
+	.4byte	0x3d7a
+	.uleb128 0x2
+	.byte	0x8a
+	.sleb128 0
+	.byte	0
+	.uleb128 0x36
+	.8byte	.LVL198
+	.4byte	0x401e
+	.uleb128 0x35
+	.uleb128 0x1
+	.byte	0x50
+	.uleb128 0x2
+	.byte	0x8a
+	.sleb128 0
+	.uleb128 0x35
+	.uleb128 0x1
+	.byte	0x51
+	.uleb128 0x2
+	.byte	0x89
+	.sleb128 0
+	.uleb128 0x48
+	.4byte	0x3d7a
+	.uleb128 0x2
+	.byte	0x8a
+	.sleb128 0
+	.byte	0
+	.byte	0
+	.uleb128 0xa
+	.4byte	0xee
+	.4byte	0x39d0
+	.uleb128 0x11
+	.4byte	0xda
+	.byte	0x25
+	.byte	0
+	.uleb128 0x7
+	.4byte	0x39c0
+	.uleb128 0x52
+	.4byte	.LASF437
+	.byte	0x1
+	.byte	0xae
+	.4byte	0x54
+	.8byte	.LFB268
+	.8byte	.LFE268-.LFB268
+	.uleb128 0x1
+	.byte	0x9c
+	.4byte	0x3c0b
+	.uleb128 0x53
+	.string	"dev"
+	.byte	0x1
+	.byte	0xae
+	.4byte	0x25f
+	.4byte	.LLST55
+	.uleb128 0x54
+	.4byte	.LASF425
+	.byte	0x1
+	.byte	0xae
+	.4byte	0x54
+	.4byte	.LLST56
+	.uleb128 0x53
+	.string	"buf"
+	.byte	0x1
+	.byte	0xaf
+	.4byte	0x137
+	.4byte	.LLST57
+	.uleb128 0x54
+	.4byte	.LASF51
+	.byte	0x1
+	.byte	0xaf
+	.4byte	0x54
+	.4byte	.LLST58
+	.uleb128 0x55
+	.string	"otp"
+	.byte	0x1
+	.byte	0xb1
+	.4byte	0x182b
+	.4byte	.LLST59
+	.uleb128 0x56
+	.4byte	.LASF387
+	.byte	0x1
+	.byte	0xb2
+	.4byte	0x1981
+	.4byte	.LLST60
+	.uleb128 0x56
+	.4byte	.LASF438
+	.byte	0x1
+	.byte	0xb3
+	.4byte	0x11cc
+	.4byte	.LLST61
+	.uleb128 0x56
+	.4byte	.LASF430
+	.byte	0x1
+	.byte	0xb4
+	.4byte	0xa3
+	.4byte	.LLST62
+	.uleb128 0x55
+	.string	"ret"
+	.byte	0x1
+	.byte	0xb5
+	.4byte	0x54
+	.4byte	.LLST63
+	.uleb128 0x57
+	.4byte	.LASF433
+	.4byte	0x3c1b
+	.uleb128 0x9
+	.byte	0x3
+	.8byte	__func__.7643
+	.uleb128 0x5d
+	.4byte	.LASF440
+	.byte	0x1
+	.byte	0xe3
+	.8byte	.L60
+	.uleb128 0x46
+	.4byte	.Ldebug_ranges0+0x330
+	.4byte	0x3ab8
+	.uleb128 0x55
+	.string	"__v"
+	.byte	0x1
+	.byte	0xc0
+	.4byte	0xae
+	.4byte	.LLST64
+	.byte	0
+	.uleb128 0x46
+	.4byte	.Ldebug_ranges0+0x360
+	.4byte	0x3ad1
+	.uleb128 0x55
+	.string	"__v"
+	.byte	0x1
+	.byte	0xd0
+	.4byte	0xae
+	.4byte	.LLST65
+	.byte	0
+	.uleb128 0x46
+	.4byte	.Ldebug_ranges0+0x390
+	.4byte	0x3aea
+	.uleb128 0x55
+	.string	"__v"
+	.byte	0x1
+	.byte	0xd2
+	.4byte	0xae
+	.4byte	.LLST66
+	.byte	0
+	.uleb128 0x45
+	.8byte	.LBB176
+	.8byte	.LBE176-.LBB176
+	.4byte	0x3b0f
+	.uleb128 0x55
+	.string	"__v"
+	.byte	0x1
+	.byte	0xda
+	.4byte	0xa3
+	.4byte	.LLST68
+	.byte	0
+	.uleb128 0x46
+	.4byte	.Ldebug_ranges0+0x3c0
+	.4byte	0x3b28
+	.uleb128 0x55
+	.string	"__v"
+	.byte	0x1
+	.byte	0xe4
+	.4byte	0xae
+	.4byte	.LLST67
+	.byte	0
+	.uleb128 0x34
+	.8byte	.LVL213
+	.4byte	0x4289
+	.4byte	0x3b40
+	.uleb128 0x35
+	.uleb128 0x1
+	.byte	0x50
+	.uleb128 0x2
+	.byte	0x86
+	.sleb128 0
+	.byte	0
+	.uleb128 0x34
+	.8byte	.LVL216
+	.4byte	0x42ab
+	.4byte	0x3b58
+	.uleb128 0x35
+	.uleb128 0x1
+	.byte	0x50
+	.uleb128 0x2
+	.byte	0x86
+	.sleb128 0
+	.byte	0
+	.uleb128 0x47
+	.8byte	.LVL219
+	.4byte	0x3b6c
+	.uleb128 0x35
+	.uleb128 0x1
+	.byte	0x53
+	.uleb128 0x2
+	.byte	0x83
+	.sleb128 0
+	.byte	0
+	.uleb128 0x34
+	.8byte	.LVL220
+	.4byte	0x3c20
+	.4byte	0x3b84
+	.uleb128 0x35
+	.uleb128 0x1
+	.byte	0x50
+	.uleb128 0x2
+	.byte	0x84
+	.sleb128 0
+	.byte	0
+	.uleb128 0x34
+	.8byte	.LVL222
+	.4byte	0x42ce
+	.4byte	0x3b9c
+	.uleb128 0x35
+	.uleb128 0x1
+	.byte	0x50
+	.uleb128 0x2
+	.byte	0x8
+	.byte	0x32
+	.byte	0
+	.uleb128 0x49
+	.8byte	.LVL224
+	.4byte	0x42b7
+	.uleb128 0x34
+	.8byte	.LVL233
+	.4byte	0x401e
+	.4byte	0x3bce
+	.uleb128 0x35
+	.uleb128 0x1
+	.byte	0x50
+	.uleb128 0x2
+	.byte	0x84
+	.sleb128 0
+	.uleb128 0x35
+	.uleb128 0x1
+	.byte	0x51
+	.uleb128 0x1
+	.byte	0x34
+	.uleb128 0x48
+	.4byte	0x3d7a
+	.uleb128 0x2
+	.byte	0x84
+	.sleb128 0
+	.byte	0
+	.uleb128 0x34
+	.8byte	.LVL236
+	.4byte	0x42b7
+	.4byte	0x3bfa
+	.uleb128 0x35
+	.uleb128 0x1
+	.byte	0x50
+	.uleb128 0x9
+	.byte	0x3
+	.8byte	.LC11
+	.uleb128 0x35
+	.uleb128 0x1
+	.byte	0x51
+	.uleb128 0x9
+	.byte	0x3
+	.8byte	.LANCHOR3
+	.byte	0
+	.uleb128 0x5e
+	.8byte	.LVL237
+	.uleb128 0x35
+	.uleb128 0x1
+	.byte	0x53
+	.uleb128 0x2
+	.byte	0x83
+	.sleb128 0
+	.byte	0
+	.byte	0
+	.uleb128 0xa
+	.4byte	0xee
+	.4byte	0x3c1b
+	.uleb128 0x11
+	.4byte	0xda
+	.byte	0x16
+	.byte	0
+	.uleb128 0x7
+	.4byte	0x3c0b
+	.uleb128 0x5f
+	.4byte	.LASF441
+	.byte	0x1
+	.byte	0x98
+	.4byte	0x54
+	.byte	0x1
+	.4byte	0x3cc1
+	.uleb128 0x60
+	.string	"otp"
+	.byte	0x1
+	.byte	0x98
+	.4byte	0x182b
+	.uleb128 0x61
+	.4byte	.LASF269
+	.byte	0x1
+	.byte	0x99
+	.4byte	0x144
+	.uleb128 0x62
+	.string	"ret"
+	.byte	0x1
+	.byte	0x9b
+	.4byte	0x54
+	.uleb128 0x4e
+	.4byte	.LASF433
+	.4byte	0x3cd1
+	.4byte	.LASF441
+	.uleb128 0x50
+	.4byte	0x3c6f
+	.uleb128 0x62
+	.string	"__v"
+	.byte	0x1
+	.byte	0x9d
+	.4byte	0xae
+	.byte	0
+	.uleb128 0x50
+	.4byte	0x3c80
+	.uleb128 0x62
+	.string	"__v"
+	.byte	0x1
+	.byte	0x9e
+	.4byte	0xae
+	.byte	0
+	.uleb128 0x50
+	.4byte	0x3c91
+	.uleb128 0x62
+	.string	"__v"
+	.byte	0x1
+	.byte	0x9f
+	.4byte	0xae
+	.byte	0
+	.uleb128 0x50
+	.4byte	0x3ca2
+	.uleb128 0x62
+	.string	"__v"
+	.byte	0x1
+	.byte	0xa1
+	.4byte	0xae
+	.byte	0
+	.uleb128 0x50
+	.4byte	0x3cb3
+	.uleb128 0x62
+	.string	"__v"
+	.byte	0x1
+	.byte	0xa3
+	.4byte	0xae
+	.byte	0
+	.uleb128 0x51
+	.uleb128 0x62
+	.string	"__v"
+	.byte	0x1
+	.byte	0xa5
+	.4byte	0xae
+	.byte	0
+	.byte	0
+	.uleb128 0xa
+	.4byte	0xee
+	.4byte	0x3cd1
+	.uleb128 0x11
+	.4byte	0xda
+	.byte	0x1e
+	.byte	0
+	.uleb128 0x7
+	.4byte	0x3cc1
+	.uleb128 0x5f
+	.4byte	.LASF442
+	.byte	0x1
+	.byte	0x81
+	.4byte	0x54
+	.byte	0x1
+	.4byte	0x3d20
+	.uleb128 0x60
+	.string	"otp"
+	.byte	0x1
+	.byte	0x81
+	.4byte	0x182b
+	.uleb128 0x63
+	.4byte	.LASF443
+	.byte	0x1
+	.byte	0x83
+	.4byte	0x54
+	.uleb128 0x63
+	.4byte	.LASF430
+	.byte	0x1
+	.byte	0x84
+	.4byte	0x54
+	.uleb128 0x62
+	.string	"ret"
+	.byte	0x1
+	.byte	0x85
+	.4byte	0x54
+	.uleb128 0x51
+	.uleb128 0x62
+	.string	"__v"
+	.byte	0x1
+	.byte	0x88
+	.4byte	0xae
+	.byte	0
+	.byte	0
+	.uleb128 0x5f
+	.4byte	.LASF444
+	.byte	0x1
+	.byte	0x6a
+	.4byte	0x54
+	.byte	0x1
+	.4byte	0x3d6a
+	.uleb128 0x60
+	.string	"otp"
+	.byte	0x1
+	.byte	0x6a
+	.4byte	0x182b
+	.uleb128 0x63
+	.4byte	.LASF443
+	.byte	0x1
+	.byte	0x6c
+	.4byte	0x54
+	.uleb128 0x63
+	.4byte	.LASF430
+	.byte	0x1
+	.byte	0x6d
+	.4byte	0x54
+	.uleb128 0x62
+	.string	"ret"
+	.byte	0x1
+	.byte	0x6e
+	.4byte	0x54
+	.uleb128 0x51
+	.uleb128 0x62
+	.string	"__v"
+	.byte	0x1
+	.byte	0x71
+	.4byte	0xae
+	.byte	0
+	.byte	0
+	.uleb128 0x5f
+	.4byte	.LASF445
+	.byte	0x1
+	.byte	0x56
+	.4byte	0x54
+	.byte	0x1
+	.4byte	0x3dc7
+	.uleb128 0x60
+	.string	"otp"
+	.byte	0x1
+	.byte	0x56
+	.4byte	0x182b
+	.uleb128 0x61
+	.4byte	.LASF446
+	.byte	0x1
+	.byte	0x57
+	.4byte	0xae
+	.uleb128 0x63
+	.4byte	.LASF443
+	.byte	0x1
+	.byte	0x59
+	.4byte	0x54
+	.uleb128 0x4e
+	.4byte	.LASF433
+	.4byte	0x2a4d
+	.4byte	.LASF445
+	.uleb128 0x50
+	.4byte	0x3db9
+	.uleb128 0x62
+	.string	"__v"
+	.byte	0x1
+	.byte	0x5b
+	.4byte	0xae
+	.byte	0
+	.uleb128 0x51
+	.uleb128 0x62
+	.string	"__v"
+	.byte	0x1
+	.byte	0x65
+	.4byte	0xae
+	.byte	0
+	.byte	0
+	.uleb128 0x64
+	.4byte	.LASF450
+	.byte	0x1
+	.byte	0x4e
+	.8byte	.LFB263
+	.8byte	.LFE263-.LFB263
+	.uleb128 0x1
+	.byte	0x9c
+	.4byte	0x3e3c
+	.uleb128 0x65
+	.4byte	.LASF447
+	.byte	0x1
+	.byte	0x4e
+	.4byte	0x11d8
+	.uleb128 0x1
+	.byte	0x50
+	.uleb128 0x54
+	.4byte	.LASF448
+	.byte	0x1
+	.byte	0x4f
+	.4byte	0x11d8
+	.4byte	.LLST0
+	.uleb128 0x65
+	.4byte	.LASF449
+	.byte	0x1
+	.byte	0x50
+	.4byte	0x3b
+	.uleb128 0x1
+	.byte	0x52
+	.uleb128 0x65
+	.4byte	.LASF425
+	.byte	0x1
+	.byte	0x50
+	.4byte	0x54
+	.uleb128 0x1
+	.byte	0x53
+	.uleb128 0x66
+	.8byte	.LBB22
+	.8byte	.LBE22-.LBB22
+	.uleb128 0x67
+	.string	"__v"
+	.byte	0x1
+	.byte	0x52
+	.4byte	0xae
+	.4byte	0x80000
+	.byte	0
+	.byte	0
+	.uleb128 0x64
+	.4byte	.LASF451
+	.byte	0x1
+	.byte	0x42
+	.8byte	.LFB262
+	.8byte	.LFE262-.LFB262
+	.uleb128 0x1
+	.byte	0x9c
+	.4byte	0x3f2f
+	.uleb128 0x54
+	.4byte	.LASF447
+	.byte	0x1
+	.byte	0x42
+	.4byte	0x11d8
+	.4byte	.LLST16
+	.uleb128 0x54
+	.4byte	.LASF448
+	.byte	0x1
+	.byte	0x43
+	.4byte	0x11d8
+	.4byte	.LLST17
+	.uleb128 0x54
+	.4byte	.LASF449
+	.byte	0x1
+	.byte	0x44
+	.4byte	0x3b
+	.4byte	.LLST18
+	.uleb128 0x54
+	.4byte	.LASF425
+	.byte	0x1
+	.byte	0x44
+	.4byte	0x54
+	.4byte	.LLST19
+	.uleb128 0x45
+	.8byte	.LBB25
+	.8byte	.LBE25-.LBB25
+	.4byte	0x3eba
+	.uleb128 0x67
+	.string	"__v"
+	.byte	0x1
+	.byte	0x47
+	.4byte	0xae
+	.4byte	0x80008
+	.byte	0
+	.uleb128 0x45
+	.8byte	.LBB26
+	.8byte	.LBE26-.LBB26
+	.4byte	0x3edf
+	.uleb128 0x67
+	.string	"__v"
+	.byte	0x1
+	.byte	0x48
+	.4byte	0xae
+	.4byte	0x100010
+	.byte	0
+	.uleb128 0x45
+	.8byte	.LBB27
+	.8byte	.LBE27-.LBB27
+	.4byte	0x3f04
+	.uleb128 0x67
+	.string	"__v"
+	.byte	0x1
+	.byte	0x4a
+	.4byte	0xae
+	.4byte	0x100000
+	.byte	0
+	.uleb128 0x34
+	.8byte	.LVL32
+	.4byte	0x42ce
+	.4byte	0x3f1b
+	.uleb128 0x35
+	.uleb128 0x1
+	.byte	0x50
+	.uleb128 0x1
+	.byte	0x32
+	.byte	0
+	.uleb128 0x68
+	.8byte	.LVL34
+	.4byte	0x42ce
+	.uleb128 0x35
+	.uleb128 0x1
+	.byte	0x50
+	.uleb128 0x1
+	.byte	0x31
+	.byte	0
+	.byte	0
+	.uleb128 0x69
+	.4byte	.LASF463
+	.byte	0x1a
+	.2byte	0x36f
+	.byte	0x3
+	.4byte	0x3f49
+	.uleb128 0x3c
+	.string	"ptr"
+	.byte	0x1a
+	.2byte	0x36f
+	.4byte	0x137
+	.byte	0
+	.uleb128 0x6a
+	.4byte	0x3cd6
+	.8byte	.LFB278
+	.8byte	.LFE278-.LFB278
+	.uleb128 0x1
+	.byte	0x9c
+	.4byte	0x3fb3
+	.uleb128 0x6b
+	.4byte	0x3ce6
+	.uleb128 0x42
+	.4byte	0x3cf1
+	.4byte	.LLST20
+	.uleb128 0x42
+	.4byte	0x3cfc
+	.4byte	.LLST21
+	.uleb128 0x44
+	.4byte	0x3d07
+	.uleb128 0x45
+	.8byte	.LBB28
+	.8byte	.LBE28-.LBB28
+	.4byte	0x3f9f
+	.uleb128 0x42
+	.4byte	0x3d13
+	.4byte	.LLST22
+	.byte	0
+	.uleb128 0x36
+	.8byte	.LVL40
+	.4byte	0x42ce
+	.uleb128 0x35
+	.uleb128 0x1
+	.byte	0x50
+	.uleb128 0x1
+	.byte	0x31
+	.byte	0
+	.byte	0
+	.uleb128 0x6a
+	.4byte	0x3d20
+	.8byte	.LFB279
+	.8byte	.LFE279-.LFB279
+	.uleb128 0x1
+	.byte	0x9c
+	.4byte	0x401e
+	.uleb128 0x6b
+	.4byte	0x3d30
+	.uleb128 0x42
+	.4byte	0x3d3b
+	.4byte	.LLST23
+	.uleb128 0x42
+	.4byte	0x3d46
+	.4byte	.LLST24
+	.uleb128 0x6c
+	.4byte	0x3d51
+	.sleb128 -1
+	.uleb128 0x45
+	.8byte	.LBB29
+	.8byte	.LBE29-.LBB29
+	.4byte	0x400a
+	.uleb128 0x42
+	.4byte	0x3d5d
+	.4byte	.LLST25
+	.byte	0
+	.uleb128 0x36
+	.8byte	.LVL48
+	.4byte	0x42ce
+	.uleb128 0x35
+	.uleb128 0x1
+	.byte	0x50
+	.uleb128 0x1
+	.byte	0x31
+	.byte	0
+	.byte	0
+	.uleb128 0x6a
+	.4byte	0x3d6a
+	.8byte	.LFB280
+	.8byte	.LFE280-.LFB280
+	.uleb128 0x1
+	.byte	0x9c
+	.4byte	0x410b
+	.uleb128 0x3a
+	.4byte	0x3d85
+	.4byte	.LLST26
+	.uleb128 0x6b
+	.4byte	0x3d7a
+	.uleb128 0x42
+	.4byte	0x3d90
+	.4byte	.LLST27
+	.uleb128 0x44
+	.4byte	0x3d9b
+	.uleb128 0x45
+	.8byte	.LBB36
+	.8byte	.LBE36-.LBB36
+	.4byte	0x4074
+	.uleb128 0x42
+	.4byte	0x3dad
+	.4byte	.LLST28
+	.byte	0
+	.uleb128 0x45
+	.8byte	.LBB37
+	.8byte	.LBE37-.LBB37
+	.4byte	0x4093
+	.uleb128 0x42
+	.4byte	0x3dba
+	.4byte	.LLST29
+	.byte	0
+	.uleb128 0x45
+	.8byte	.LBB38
+	.8byte	.LBE38-.LBB38
+	.4byte	0x40f7
+	.uleb128 0x6b
+	.4byte	0x3d85
+	.uleb128 0x6b
+	.4byte	0x3d7a
+	.uleb128 0x66
+	.8byte	.LBB39
+	.8byte	.LBE39-.LBB39
+	.uleb128 0x44
+	.4byte	0x3d90
+	.uleb128 0x44
+	.4byte	0x3d9b
+	.uleb128 0x36
+	.8byte	.LVL63
+	.4byte	0x42b7
+	.uleb128 0x35
+	.uleb128 0x1
+	.byte	0x50
+	.uleb128 0x9
+	.byte	0x3
+	.8byte	.LC3
+	.uleb128 0x35
+	.uleb128 0x1
+	.byte	0x51
+	.uleb128 0x9
+	.byte	0x3
+	.8byte	.LANCHOR0
+	.byte	0
+	.byte	0
+	.byte	0
+	.uleb128 0x36
+	.8byte	.LVL60
+	.4byte	0x42ce
+	.uleb128 0x35
+	.uleb128 0x1
+	.byte	0x50
+	.uleb128 0x1
+	.byte	0x31
+	.byte	0
+	.byte	0
+	.uleb128 0x6a
+	.4byte	0x3c20
+	.8byte	.LFB267
+	.8byte	.LFE267-.LFB267
+	.uleb128 0x1
+	.byte	0x9c
+	.4byte	0x4289
+	.uleb128 0x3a
+	.4byte	0x3c30
+	.4byte	.LLST48
+	.uleb128 0x3a
+	.4byte	0x3c3b
+	.4byte	.LLST49
+	.uleb128 0x42
+	.4byte	0x3c46
+	.4byte	.LLST50
+	.uleb128 0x44
+	.4byte	0x3c51
+	.uleb128 0x45
+	.8byte	.LBB160
+	.8byte	.LBE160-.LBB160
+	.4byte	0x4165
+	.uleb128 0x6c
+	.4byte	0x3c63
+	.sleb128 -16776704
+	.byte	0
+	.uleb128 0x45
+	.8byte	.LBB161
+	.8byte	.LBE161-.LBB161
+	.4byte	0x4183
+	.uleb128 0x6c
+	.4byte	0x3c74
+	.sleb128 -65535
+	.byte	0
+	.uleb128 0x45
+	.8byte	.LBB162
+	.8byte	.LBE162-.LBB162
+	.4byte	0x419f
+	.uleb128 0x6d
+	.4byte	0x3c85
+	.byte	0xfa
+	.byte	0
+	.uleb128 0x45
+	.8byte	.LBB163
+	.8byte	.LBE163-.LBB163
+	.4byte	0x41be
+	.uleb128 0x42
+	.4byte	0x3c96
+	.4byte	.LLST51
+	.byte	0
+	.uleb128 0x45
+	.8byte	.LBB164
+	.8byte	.LBE164-.LBB164
+	.4byte	0x41dd
+	.uleb128 0x42
+	.4byte	0x3cb4
+	.4byte	.LLST52
+	.byte	0
+	.uleb128 0x45
+	.8byte	.LBB165
+	.8byte	.LBE165-.LBB165
+	.4byte	0x4249
+	.uleb128 0x3a
+	.4byte	0x3c30
+	.4byte	.LLST53
+	.uleb128 0x3a
+	.4byte	0x3c3b
+	.4byte	.LLST54
+	.uleb128 0x66
+	.8byte	.LBB166
+	.8byte	.LBE166-.LBB166
+	.uleb128 0x44
+	.4byte	0x4138
+	.uleb128 0x44
+	.4byte	0x4141
+	.uleb128 0x36
+	.8byte	.LVL209
+	.4byte	0x42b7
+	.uleb128 0x35
+	.uleb128 0x1
+	.byte	0x50
+	.uleb128 0x9
+	.byte	0x3
+	.8byte	.LC8
+	.uleb128 0x35
+	.uleb128 0x1
+	.byte	0x51
+	.uleb128 0x9
+	.byte	0x3
+	.8byte	.LANCHOR2
+	.byte	0
+	.byte	0
+	.byte	0
+	.uleb128 0x45
+	.8byte	.LBB167
+	.8byte	.LBE167-.LBB167
+	.4byte	0x4265
+	.uleb128 0x6d
+	.4byte	0x3ca7
+	.byte	0x9
+	.byte	0
+	.uleb128 0x36
+	.8byte	.LVL205
+	.4byte	0x401e
+	.uleb128 0x35
+	.uleb128 0x1
+	.byte	0x50
+	.uleb128 0x3
+	.byte	0xf3
+	.uleb128 0x1
+	.byte	0x50
+	.uleb128 0x35
+	.uleb128 0x1
+	.byte	0x51
+	.uleb128 0x1
+	.byte	0x32
+	.uleb128 0x48
+	.4byte	0x3d7a
+	.uleb128 0x3
+	.byte	0xf3
+	.uleb128 0x1
+	.byte	0x50
+	.byte	0
+	.byte	0
+	.uleb128 0x6e
+	.4byte	.LASF452
+	.4byte	.LASF452
+	.byte	0x8
+	.2byte	0x115
+	.uleb128 0x6f
+	.4byte	.LASF453
+	.4byte	.LASF453
+	.byte	0x20
+	.byte	0x85
+	.uleb128 0x6f
+	.4byte	.LASF454
+	.4byte	.LASF454
+	.byte	0x20
+	.byte	0x38
+	.uleb128 0x6e
+	.4byte	.LASF455
+	.4byte	.LASF455
+	.byte	0x8
+	.2byte	0x16e
+	.uleb128 0x6f
+	.4byte	.LASF456
+	.4byte	.LASF456
+	.byte	0x21
+	.byte	0x13
+	.uleb128 0x6e
+	.4byte	.LASF457
+	.4byte	.LASF457
+	.byte	0x1a
+	.2byte	0x393
+	.uleb128 0x6f
+	.4byte	.LASF458
+	.4byte	.LASF458
+	.byte	0x22
+	.byte	0xb
+	.byte	0
+	.section	.debug_abbrev,"",@progbits
+.Ldebug_abbrev0:
+	.uleb128 0x1
+	.uleb128 0x11
+	.byte	0x1
+	.uleb128 0x25
+	.uleb128 0xe
+	.uleb128 0x13
+	.uleb128 0xb
+	.uleb128 0x3
+	.uleb128 0xe
+	.uleb128 0x1b
+	.uleb128 0xe
+	.uleb128 0x55
+	.uleb128 0x17
+	.uleb128 0x11
+	.uleb128 0x1
+	.uleb128 0x10
+	.uleb128 0x17
+	.byte	0
+	.byte	0
+	.uleb128 0x2
+	.uleb128 0x16
+	.byte	0
+	.uleb128 0x3
+	.uleb128 0xe
+	.uleb128 0x3a
+	.uleb128 0xb
+	.uleb128 0x3b
+	.uleb128 0xb
+	.uleb128 0x49
+	.uleb128 0x13
+	.byte	0
+	.byte	0
+	.uleb128 0x3
+	.uleb128 0x24
+	.byte	0
+	.uleb128 0xb
+	.uleb128 0xb
+	.uleb128 0x3e
+	.uleb128 0xb
+	.uleb128 0x3
+	.uleb128 0xe
+	.byte	0
+	.byte	0
+	.uleb128 0x4
+	.uleb128 0x34
+	.byte	0
+	.uleb128 0x3
+	.uleb128 0xe
+	.uleb128 0x3a
+	.uleb128 0xb
+	.uleb128 0x3b
+	.uleb128 0xb
+	.uleb128 0x49
+	.uleb128 0x13
+	.uleb128 0x3f
+	.uleb128 0x19
+	.uleb128 0x3c
+	.uleb128 0x19
+	.byte	0
+	.byte	0
+	.uleb128 0x5
+	.uleb128 0x24
+	.byte	0
+	.uleb128 0xb
+	.uleb128 0xb
+	.uleb128 0x3e
+	.uleb128 0xb
+	.uleb128 0x3
+	.uleb128 0x8
+	.byte	0
+	.byte	0
+	.uleb128 0x6
+	.uleb128 0x16
+	.byte	0
+	.uleb128 0x3
+	.uleb128 0x8
+	.uleb128 0x3a
+	.uleb128 0xb
+	.uleb128 0x3b
+	.uleb128 0xb
+	.uleb128 0x49
+	.uleb128 0x13
+	.byte	0
+	.byte	0
+	.uleb128 0x7
+	.uleb128 0x26
+	.byte	0
+	.uleb128 0x49
+	.uleb128 0x13
+	.byte	0
+	.byte	0
+	.uleb128 0x8
+	.uleb128 0xf
+	.byte	0
+	.uleb128 0xb
+	.uleb128 0xb
+	.uleb128 0x49
+	.uleb128 0x13
+	.byte	0
+	.byte	0
+	.uleb128 0x9
+	.uleb128 0xf
+	.byte	0
+	.uleb128 0xb
+	.uleb128 0xb
+	.byte	0
+	.byte	0
+	.uleb128 0xa
+	.uleb128 0x1
+	.byte	0x1
+	.uleb128 0x49
+	.uleb128 0x13
+	.uleb128 0x1
+	.uleb128 0x13
+	.byte	0
+	.byte	0
+	.uleb128 0xb
+	.uleb128 0x21
+	.byte	0
+	.byte	0
+	.byte	0
+	.uleb128 0xc
+	.uleb128 0x34
+	.byte	0
+	.uleb128 0x3
+	.uleb128 0xe
+	.uleb128 0x3a
+	.uleb128 0xb
+	.uleb128 0x3b
+	.uleb128 0x5
+	.uleb128 0x49
+	.uleb128 0x13
+	.uleb128 0x3f
+	.uleb128 0x19
+	.uleb128 0x3c
+	.uleb128 0x19
+	.byte	0
+	.byte	0
+	.uleb128 0xd
+	.uleb128 0x13
+	.byte	0x1
+	.uleb128 0x3
+	.uleb128 0xe
+	.uleb128 0xb
+	.uleb128 0xb
+	.uleb128 0x3a
+	.uleb128 0xb
+	.uleb128 0x3b
+	.uleb128 0xb
+	.uleb128 0x1
+	.uleb128 0x13
+	.byte	0
+	.byte	0
+	.uleb128 0xe
+	.uleb128 0xd
+	.byte	0
+	.uleb128 0x3
+	.uleb128 0xe
+	.uleb128 0x3a
+	.uleb128 0xb
+	.uleb128 0x3b
+	.uleb128 0xb
+	.uleb128 0x49
+	.uleb128 0x13
+	.uleb128 0x38
+	.uleb128 0xb
+	.byte	0
+	.byte	0
+	.uleb128 0xf
+	.uleb128 0xd
+	.byte	0
+	.uleb128 0x3
+	.uleb128 0x8
+	.uleb128 0x3a
+	.uleb128 0xb
+	.uleb128 0x3b
+	.uleb128 0xb
+	.uleb128 0x49
+	.uleb128 0x13
+	.uleb128 0x38
+	.uleb128 0xb
+	.byte	0
+	.byte	0
+	.uleb128 0x10
+	.uleb128 0x26
+	.byte	0
+	.byte	0
+	.byte	0
+	.uleb128 0x11
+	.uleb128 0x21
+	.byte	0
+	.uleb128 0x49
+	.uleb128 0x13
+	.uleb128 0x2f
+	.uleb128 0xb
+	.byte	0
+	.byte	0
+	.uleb128 0x12
+	.uleb128 0x15
+	.byte	0x1
+	.uleb128 0x27
+	.uleb128 0x19
+	.uleb128 0x49
+	.uleb128 0x13
+	.uleb128 0x1
+	.uleb128 0x13
+	.byte	0
+	.byte	0
+	.uleb128 0x13
+	.uleb128 0x5
+	.byte	0
+	.uleb128 0x49
+	.uleb128 0x13
+	.byte	0
+	.byte	0
+	.uleb128 0x14
+	.uleb128 0x13
+	.byte	0x1
+	.uleb128 0xb
+	.uleb128 0x5
+	.uleb128 0x3a
+	.uleb128 0xb
+	.uleb128 0x3b
+	.uleb128 0xb
+	.uleb128 0x1
+	.uleb128 0x13
+	.byte	0
+	.byte	0
+	.uleb128 0x15
+	.uleb128 0xd
+	.byte	0
+	.uleb128 0x3
+	.uleb128 0xe
+	.uleb128 0x3a
+	.uleb128 0xb
+	.uleb128 0x3b
+	.uleb128 0xb
+	.uleb128 0x49
+	.uleb128 0x13
+	.uleb128 0x38
+	.uleb128 0x5
+	.byte	0
+	.byte	0
+	.uleb128 0x16
+	.uleb128 0xd
+	.byte	0
+	.uleb128 0x3
+	.uleb128 0x8
+	.uleb128 0x3a
+	.uleb128 0xb
+	.uleb128 0x3b
+	.uleb128 0xb
+	.uleb128 0x49
+	.uleb128 0x13
+	.uleb128 0x38
+	.uleb128 0x5
+	.byte	0
+	.byte	0
+	.uleb128 0x17
+	.uleb128 0x21
+	.byte	0
+	.uleb128 0x49
+	.uleb128 0x13
+	.uleb128 0x2f
+	.uleb128 0x5
+	.byte	0
+	.byte	0
+	.uleb128 0x18
+	.uleb128 0x13
+	.byte	0
+	.uleb128 0x3
+	.uleb128 0xe
+	.uleb128 0x3c
+	.uleb128 0x19
+	.byte	0
+	.byte	0
+	.uleb128 0x19
+	.uleb128 0x13
+	.byte	0x1
+	.uleb128 0x3
+	.uleb128 0xe
+	.uleb128 0xb
+	.uleb128 0x5
+	.uleb128 0x3a
+	.uleb128 0xb
+	.uleb128 0x3b
+	.uleb128 0xb
+	.uleb128 0x1
+	.uleb128 0x13
+	.byte	0
+	.byte	0
+	.uleb128 0x1a
+	.uleb128 0x13
+	.byte	0x1
+	.uleb128 0x3
+	.uleb128 0x8
+	.uleb128 0xb
+	.uleb128 0x5
+	.uleb128 0x3a
+	.uleb128 0xb
+	.uleb128 0x3b
+	.uleb128 0xb
+	.uleb128 0x1
+	.uleb128 0x13
+	.byte	0
+	.byte	0
+	.uleb128 0x1b
+	.uleb128 0x34
+	.byte	0
+	.uleb128 0x3
+	.uleb128 0x8
+	.uleb128 0x3a
+	.uleb128 0xb
+	.uleb128 0x3b
+	.uleb128 0xb
+	.uleb128 0x49
+	.uleb128 0x13
+	.uleb128 0x3f
+	.uleb128 0x19
+	.uleb128 0x3c
+	.uleb128 0x19
+	.byte	0
+	.byte	0
+	.uleb128 0x1c
+	.uleb128 0x13
+	.byte	0x1
+	.uleb128 0xb
+	.uleb128 0xb
+	.uleb128 0x3a
+	.uleb128 0xb
+	.uleb128 0x3b
+	.uleb128 0xb
+	.uleb128 0x1
+	.uleb128 0x13
+	.byte	0
+	.byte	0
+	.uleb128 0x1d
+	.uleb128 0x13
+	.byte	0x1
+	.uleb128 0x3
+	.uleb128 0xe
+	.uleb128 0xb
+	.uleb128 0xb
+	.uleb128 0x3a
+	.uleb128 0xb
+	.uleb128 0x3b
+	.uleb128 0x5
+	.uleb128 0x1
+	.uleb128 0x13
+	.byte	0
+	.byte	0
+	.uleb128 0x1e
+	.uleb128 0xd
+	.byte	0
+	.uleb128 0x3
+	.uleb128 0xe
+	.uleb128 0x3a
+	.uleb128 0xb
+	.uleb128 0x3b
+	.uleb128 0x5
+	.uleb128 0x49
+	.uleb128 0x13
+	.uleb128 0x38
+	.uleb128 0xb
+	.byte	0
+	.byte	0
+	.uleb128 0x1f
+	.uleb128 0x16
+	.byte	0
+	.uleb128 0x3
+	.uleb128 0xe
+	.uleb128 0x3a
+	.uleb128 0xb
+	.uleb128 0x3b
+	.uleb128 0x5
+	.uleb128 0x49
+	.uleb128 0x13
+	.byte	0
+	.byte	0
+	.uleb128 0x20
+	.uleb128 0xd
+	.byte	0
+	.uleb128 0x3
+	.uleb128 0x8
+	.uleb128 0x3a
+	.uleb128 0xb
+	.uleb128 0x3b
+	.uleb128 0x5
+	.uleb128 0x49
+	.uleb128 0x13
+	.uleb128 0x38
+	.uleb128 0xb
+	.byte	0
+	.byte	0
+	.uleb128 0x21
+	.uleb128 0x13
+	.byte	0x1
+	.uleb128 0x3
+	.uleb128 0xe
+	.uleb128 0xb
+	.uleb128 0x5
+	.uleb128 0x3a
+	.uleb128 0xb
+	.uleb128 0x3b
+	.uleb128 0x5
+	.uleb128 0x1
+	.uleb128 0x13
+	.byte	0
+	.byte	0
+	.uleb128 0x22
+	.uleb128 0xd
+	.byte	0
+	.uleb128 0x3
+	.uleb128 0xe
+	.uleb128 0x3a
+	.uleb128 0xb
+	.uleb128 0x3b
+	.uleb128 0x5
+	.uleb128 0x49
+	.uleb128 0x13
+	.uleb128 0x38
+	.uleb128 0x5
+	.byte	0
+	.byte	0
+	.uleb128 0x23
+	.uleb128 0xd
+	.byte	0
+	.uleb128 0x3
+	.uleb128 0x8
+	.uleb128 0x3a
+	.uleb128 0xb
+	.uleb128 0x3b
+	.uleb128 0x5
+	.uleb128 0x49
+	.uleb128 0x13
+	.uleb128 0x38
+	.uleb128 0x5
+	.byte	0
+	.byte	0
+	.uleb128 0x24
+	.uleb128 0x4
+	.byte	0x1
+	.uleb128 0x3
+	.uleb128 0xe
+	.uleb128 0xb
+	.uleb128 0xb
+	.uleb128 0x49
+	.uleb128 0x13
+	.uleb128 0x3a
+	.uleb128 0xb
+	.uleb128 0x3b
+	.uleb128 0xb
+	.uleb128 0x1
+	.uleb128 0x13
+	.byte	0
+	.byte	0
+	.uleb128 0x25
+	.uleb128 0x28
+	.byte	0
+	.uleb128 0x3
+	.uleb128 0xe
+	.uleb128 0x1c
+	.uleb128 0xb
+	.byte	0
+	.byte	0
+	.uleb128 0x26
+	.uleb128 0x28
+	.byte	0
+	.uleb128 0x3
+	.uleb128 0xe
+	.uleb128 0x1c
+	.uleb128 0xd
+	.byte	0
+	.byte	0
+	.uleb128 0x27
+	.uleb128 0x4
+	.byte	0x1
+	.uleb128 0xb
+	.uleb128 0xb
+	.uleb128 0x49
+	.uleb128 0x13
+	.uleb128 0x3a
+	.uleb128 0xb
+	.uleb128 0x3b
+	.uleb128 0xb
+	.uleb128 0x1
+	.uleb128 0x13
+	.byte	0
+	.byte	0
+	.uleb128 0x28
+	.uleb128 0x35
+	.byte	0
+	.uleb128 0x49
+	.uleb128 0x13
+	.byte	0
+	.byte	0
+	.uleb128 0x29
+	.uleb128 0x4
+	.byte	0x1
+	.uleb128 0x3
+	.uleb128 0xe
+	.uleb128 0xb
+	.uleb128 0xb
+	.uleb128 0x49
+	.uleb128 0x13
+	.uleb128 0x3a
+	.uleb128 0xb
+	.uleb128 0x3b
+	.uleb128 0x5
+	.uleb128 0x1
+	.uleb128 0x13
+	.byte	0
+	.byte	0
+	.uleb128 0x2a
+	.uleb128 0x34
+	.byte	0
+	.uleb128 0x3
+	.uleb128 0x8
+	.uleb128 0x3a
+	.uleb128 0xb
+	.uleb128 0x3b
+	.uleb128 0xb
+	.uleb128 0x49
+	.uleb128 0x13
+	.uleb128 0x3f
+	.uleb128 0x19
+	.byte	0
+	.byte	0
+	.uleb128 0x2b
+	.uleb128 0x17
+	.byte	0x1
+	.uleb128 0x3
+	.uleb128 0xe
+	.uleb128 0xb
+	.uleb128 0xb
+	.uleb128 0x3a
+	.uleb128 0xb
+	.uleb128 0x3b
+	.uleb128 0xb
+	.uleb128 0x1
+	.uleb128 0x13
+	.byte	0
+	.byte	0
+	.uleb128 0x2c
+	.uleb128 0xd
+	.byte	0
+	.uleb128 0x3
+	.uleb128 0x8
+	.uleb128 0x3a
+	.uleb128 0xb
+	.uleb128 0x3b
+	.uleb128 0xb
+	.uleb128 0x49
+	.uleb128 0x13
+	.byte	0
+	.byte	0
+	.uleb128 0x2d
+	.uleb128 0xd
+	.byte	0
+	.uleb128 0x3
+	.uleb128 0xe
+	.uleb128 0x3a
+	.uleb128 0xb
+	.uleb128 0x3b
+	.uleb128 0xb
+	.uleb128 0x49
+	.uleb128 0x13
+	.byte	0
+	.byte	0
+	.uleb128 0x2e
+	.uleb128 0x15
+	.byte	0x1
+	.uleb128 0x27
+	.uleb128 0x19
+	.uleb128 0x1
+	.uleb128 0x13
+	.byte	0
+	.byte	0
+	.uleb128 0x2f
+	.uleb128 0x34
+	.byte	0
+	.uleb128 0x3
+	.uleb128 0xe
+	.uleb128 0x3a
+	.uleb128 0xb
+	.uleb128 0x3b
+	.uleb128 0x5
+	.uleb128 0x49
+	.uleb128 0x13
+	.uleb128 0x2
+	.uleb128 0x18
+	.byte	0
+	.byte	0
+	.uleb128 0x30
+	.uleb128 0x34
+	.byte	0
+	.uleb128 0x3
+	.uleb128 0xe
+	.uleb128 0x3a
+	.uleb128 0xb
+	.uleb128 0x3b
+	.uleb128 0x5
+	.uleb128 0x49
+	.uleb128 0x13
+	.uleb128 0x3f
+	.uleb128 0x19
+	.uleb128 0x2
+	.uleb128 0x18
+	.byte	0
+	.byte	0
+	.uleb128 0x31
+	.uleb128 0x2e
+	.byte	0x1
+	.uleb128 0x3
+	.uleb128 0xe
+	.uleb128 0x3a
+	.uleb128 0xb
+	.uleb128 0x3b
+	.uleb128 0x5
+	.uleb128 0x27
+	.uleb128 0x19
+	.uleb128 0x49
+	.uleb128 0x13
+	.uleb128 0x11
+	.uleb128 0x1
+	.uleb128 0x12
+	.uleb128 0x7
+	.uleb128 0x40
+	.uleb128 0x18
+	.uleb128 0x2117
+	.uleb128 0x19
+	.uleb128 0x1
+	.uleb128 0x13
+	.byte	0
+	.byte	0
+	.uleb128 0x32
+	.uleb128 0x5
+	.byte	0
+	.uleb128 0x3
+	.uleb128 0x8
+	.uleb128 0x3a
+	.uleb128 0xb
+	.uleb128 0x3b
+	.uleb128 0x5
+	.uleb128 0x49
+	.uleb128 0x13
+	.uleb128 0x2
+	.uleb128 0x17
+	.byte	0
+	.byte	0
+	.uleb128 0x33
+	.uleb128 0x34
+	.byte	0
+	.uleb128 0x3
+	.uleb128 0x8
+	.uleb128 0x3a
+	.uleb128 0xb
+	.uleb128 0x3b
+	.uleb128 0x5
+	.uleb128 0x49
+	.uleb128 0x13
+	.uleb128 0x2
+	.uleb128 0x17
+	.byte	0
+	.byte	0
+	.uleb128 0x34
+	.uleb128 0x4109
+	.byte	0x1
+	.uleb128 0x11
+	.uleb128 0x1
+	.uleb128 0x31
+	.uleb128 0x13
+	.uleb128 0x1
+	.uleb128 0x13
+	.byte	0
+	.byte	0
+	.uleb128 0x35
+	.uleb128 0x410a
+	.byte	0
+	.uleb128 0x2
+	.uleb128 0x18
+	.uleb128 0x2111
+	.uleb128 0x18
+	.byte	0
+	.byte	0
+	.uleb128 0x36
+	.uleb128 0x4109
+	.byte	0x1
+	.uleb128 0x11
+	.uleb128 0x1
+	.uleb128 0x31
+	.uleb128 0x13
+	.byte	0
+	.byte	0
+	.uleb128 0x37
+	.uleb128 0x5
+	.byte	0
+	.uleb128 0x3
+	.uleb128 0xe
+	.uleb128 0x3a
+	.uleb128 0xb
+	.uleb128 0x3b
+	.uleb128 0x5
+	.uleb128 0x49
+	.uleb128 0x13
+	.uleb128 0x2
+	.uleb128 0x18
+	.byte	0
+	.byte	0
+	.uleb128 0x38
+	.uleb128 0x5
+	.byte	0
+	.uleb128 0x3
+	.uleb128 0x8
+	.uleb128 0x3a
+	.uleb128 0xb
+	.uleb128 0x3b
+	.uleb128 0x5
+	.uleb128 0x49
+	.uleb128 0x13
+	.uleb128 0x2
+	.uleb128 0x18
+	.byte	0
+	.byte	0
+	.uleb128 0x39
+	.uleb128 0x1d
+	.byte	0x1
+	.uleb128 0x31
+	.uleb128 0x13
+	.uleb128 0x11
+	.uleb128 0x1
+	.uleb128 0x12
+	.uleb128 0x7
+	.uleb128 0x58
+	.uleb128 0xb
+	.uleb128 0x59
+	.uleb128 0x5
+	.byte	0
+	.byte	0
+	.uleb128 0x3a
+	.uleb128 0x5
+	.byte	0
+	.uleb128 0x31
+	.uleb128 0x13
+	.uleb128 0x2
+	.uleb128 0x17
+	.byte	0
+	.byte	0
+	.uleb128 0x3b
+	.uleb128 0x2e
+	.byte	0x1
+	.uleb128 0x3
+	.uleb128 0xe
+	.uleb128 0x3a
+	.uleb128 0xb
+	.uleb128 0x3b
+	.uleb128 0x5
+	.uleb128 0x27
+	.uleb128 0x19
+	.uleb128 0x49
+	.uleb128 0x13
+	.uleb128 0x20
+	.uleb128 0xb
+	.uleb128 0x1
+	.uleb128 0x13
+	.byte	0
+	.byte	0
+	.uleb128 0x3c
+	.uleb128 0x5
+	.byte	0
+	.uleb128 0x3
+	.uleb128 0x8
+	.uleb128 0x3a
+	.uleb128 0xb
+	.uleb128 0x3b
+	.uleb128 0x5
+	.uleb128 0x49
+	.uleb128 0x13
+	.byte	0
+	.byte	0
+	.uleb128 0x3d
+	.uleb128 0x5
+	.byte	0
+	.uleb128 0x3
+	.uleb128 0xe
+	.uleb128 0x3a
+	.uleb128 0xb
+	.uleb128 0x3b
+	.uleb128 0x5
+	.uleb128 0x49
+	.uleb128 0x13
+	.uleb128 0x2
+	.uleb128 0x17
+	.byte	0
+	.byte	0
+	.uleb128 0x3e
+	.uleb128 0x34
+	.byte	0
+	.uleb128 0x3
+	.uleb128 0xe
+	.uleb128 0x3a
+	.uleb128 0xb
+	.uleb128 0x3b
+	.uleb128 0x5
+	.uleb128 0x49
+	.uleb128 0x13
+	.uleb128 0x2
+	.uleb128 0x17
+	.byte	0
+	.byte	0
+	.uleb128 0x3f
+	.uleb128 0x4109
+	.byte	0x1
+	.uleb128 0x11
+	.uleb128 0x1
+	.uleb128 0x2115
+	.uleb128 0x19
+	.byte	0
+	.byte	0
+	.uleb128 0x40
+	.uleb128 0x1d
+	.byte	0x1
+	.uleb128 0x31
+	.uleb128 0x13
+	.uleb128 0x52
+	.uleb128 0x1
+	.uleb128 0x55
+	.uleb128 0x17
+	.uleb128 0x58
+	.uleb128 0xb
+	.uleb128 0x59
+	.uleb128 0x5
+	.uleb128 0x1
+	.uleb128 0x13
+	.byte	0
+	.byte	0
+	.uleb128 0x41
+	.uleb128 0xb
+	.byte	0x1
+	.uleb128 0x55
+	.uleb128 0x17
+	.byte	0
+	.byte	0
+	.uleb128 0x42
+	.uleb128 0x34
+	.byte	0
+	.uleb128 0x31
+	.uleb128 0x13
+	.uleb128 0x2
+	.uleb128 0x17
+	.byte	0
+	.byte	0
+	.uleb128 0x43
+	.uleb128 0xa
+	.byte	0
+	.uleb128 0x31
+	.uleb128 0x13
+	.uleb128 0x11
+	.uleb128 0x1
+	.byte	0
+	.byte	0
+	.uleb128 0x44
+	.uleb128 0x34
+	.byte	0
+	.uleb128 0x31
+	.uleb128 0x13
+	.byte	0
+	.byte	0
+	.uleb128 0x45
+	.uleb128 0xb
+	.byte	0x1
+	.uleb128 0x11
+	.uleb128 0x1
+	.uleb128 0x12
+	.uleb128 0x7
+	.uleb128 0x1
+	.uleb128 0x13
+	.byte	0
+	.byte	0
+	.uleb128 0x46
+	.uleb128 0xb
+	.byte	0x1
+	.uleb128 0x55
+	.uleb128 0x17
+	.uleb128 0x1
+	.uleb128 0x13
+	.byte	0
+	.byte	0
+	.uleb128 0x47
+	.uleb128 0x4109
+	.byte	0x1
+	.uleb128 0x11
+	.uleb128 0x1
+	.uleb128 0x1
+	.uleb128 0x13
+	.byte	0
+	.byte	0
+	.uleb128 0x48
+	.uleb128 0x410a
+	.byte	0
+	.uleb128 0x31
+	.uleb128 0x13
+	.uleb128 0x2111
+	.uleb128 0x18
+	.byte	0
+	.byte	0
+	.uleb128 0x49
+	.uleb128 0x4109
+	.byte	0
+	.uleb128 0x11
+	.uleb128 0x1
+	.uleb128 0x31
+	.uleb128 0x13
+	.byte	0
+	.byte	0
+	.uleb128 0x4a
+	.uleb128 0x34
+	.byte	0
+	.uleb128 0x31
+	.uleb128 0x13
+	.uleb128 0x2
+	.uleb128 0x18
+	.byte	0
+	.byte	0
+	.uleb128 0x4b
+	.uleb128 0x5
+	.byte	0
+	.uleb128 0x3
+	.uleb128 0xe
+	.uleb128 0x3a
+	.uleb128 0xb
+	.uleb128 0x3b
+	.uleb128 0x5
+	.uleb128 0x49
+	.uleb128 0x13
+	.byte	0
+	.byte	0
+	.uleb128 0x4c
+	.uleb128 0x34
+	.byte	0
+	.uleb128 0x3
+	.uleb128 0x8
+	.uleb128 0x3a
+	.uleb128 0xb
+	.uleb128 0x3b
+	.uleb128 0x5
+	.uleb128 0x49
+	.uleb128 0x13
+	.byte	0
+	.byte	0
+	.uleb128 0x4d
+	.uleb128 0x34
+	.byte	0
+	.uleb128 0x3
+	.uleb128 0xe
+	.uleb128 0x3a
+	.uleb128 0xb
+	.uleb128 0x3b
+	.uleb128 0x5
+	.uleb128 0x49
+	.uleb128 0x13
+	.byte	0
+	.byte	0
+	.uleb128 0x4e
+	.uleb128 0x34
+	.byte	0
+	.uleb128 0x3
+	.uleb128 0xe
+	.uleb128 0x49
+	.uleb128 0x13
+	.uleb128 0x34
+	.uleb128 0x19
+	.uleb128 0x1c
+	.uleb128 0xe
+	.byte	0
+	.byte	0
+	.uleb128 0x4f
+	.uleb128 0xa
+	.byte	0
+	.uleb128 0x3
+	.uleb128 0xe
+	.uleb128 0x3a
+	.uleb128 0xb
+	.uleb128 0x3b
+	.uleb128 0x5
+	.byte	0
+	.byte	0
+	.uleb128 0x50
+	.uleb128 0xb
+	.byte	0x1
+	.uleb128 0x1
+	.uleb128 0x13
+	.byte	0
+	.byte	0
+	.uleb128 0x51
+	.uleb128 0xb
+	.byte	0x1
+	.byte	0
+	.byte	0
+	.uleb128 0x52
+	.uleb128 0x2e
+	.byte	0x1
+	.uleb128 0x3
+	.uleb128 0xe
+	.uleb128 0x3a
+	.uleb128 0xb
+	.uleb128 0x3b
+	.uleb128 0xb
+	.uleb128 0x27
+	.uleb128 0x19
+	.uleb128 0x49
+	.uleb128 0x13
+	.uleb128 0x11
+	.uleb128 0x1
+	.uleb128 0x12
+	.uleb128 0x7
+	.uleb128 0x40
+	.uleb128 0x18
+	.uleb128 0x2117
+	.uleb128 0x19
+	.uleb128 0x1
+	.uleb128 0x13
+	.byte	0
+	.byte	0
+	.uleb128 0x53
+	.uleb128 0x5
+	.byte	0
+	.uleb128 0x3
+	.uleb128 0x8
+	.uleb128 0x3a
+	.uleb128 0xb
+	.uleb128 0x3b
+	.uleb128 0xb
+	.uleb128 0x49
+	.uleb128 0x13
+	.uleb128 0x2
+	.uleb128 0x17
+	.byte	0
+	.byte	0
+	.uleb128 0x54
+	.uleb128 0x5
+	.byte	0
+	.uleb128 0x3
+	.uleb128 0xe
+	.uleb128 0x3a
+	.uleb128 0xb
+	.uleb128 0x3b
+	.uleb128 0xb
+	.uleb128 0x49
+	.uleb128 0x13
+	.uleb128 0x2
+	.uleb128 0x17
+	.byte	0
+	.byte	0
+	.uleb128 0x55
+	.uleb128 0x34
+	.byte	0
+	.uleb128 0x3
+	.uleb128 0x8
+	.uleb128 0x3a
+	.uleb128 0xb
+	.uleb128 0x3b
+	.uleb128 0xb
+	.uleb128 0x49
+	.uleb128 0x13
+	.uleb128 0x2
+	.uleb128 0x17
+	.byte	0
+	.byte	0
+	.uleb128 0x56
+	.uleb128 0x34
+	.byte	0
+	.uleb128 0x3
+	.uleb128 0xe
+	.uleb128 0x3a
+	.uleb128 0xb
+	.uleb128 0x3b
+	.uleb128 0xb
+	.uleb128 0x49
+	.uleb128 0x13
+	.uleb128 0x2
+	.uleb128 0x17
+	.byte	0
+	.byte	0
+	.uleb128 0x57
+	.uleb128 0x34
+	.byte	0
+	.uleb128 0x3
+	.uleb128 0xe
+	.uleb128 0x49
+	.uleb128 0x13
+	.uleb128 0x34
+	.uleb128 0x19
+	.uleb128 0x2
+	.uleb128 0x18
+	.byte	0
+	.byte	0
+	.uleb128 0x58
+	.uleb128 0xa
+	.byte	0
+	.uleb128 0x3
+	.uleb128 0xe
+	.uleb128 0x3a
+	.uleb128 0xb
+	.uleb128 0x3b
+	.uleb128 0x5
+	.uleb128 0x11
+	.uleb128 0x1
+	.byte	0
+	.byte	0
+	.uleb128 0x59
+	.uleb128 0x34
+	.byte	0
+	.uleb128 0x3
+	.uleb128 0x8
+	.uleb128 0x3a
+	.uleb128 0xb
+	.uleb128 0x3b
+	.uleb128 0x5
+	.uleb128 0x49
+	.uleb128 0x13
+	.uleb128 0x1c
+	.uleb128 0xd
+	.byte	0
+	.byte	0
+	.uleb128 0x5a
+	.uleb128 0x34
+	.byte	0
+	.uleb128 0x3
+	.uleb128 0x8
+	.uleb128 0x3a
+	.uleb128 0xb
+	.uleb128 0x3b
+	.uleb128 0x5
+	.uleb128 0x49
+	.uleb128 0x13
+	.uleb128 0x1c
+	.uleb128 0xb
+	.byte	0
+	.byte	0
+	.uleb128 0x5b
+	.uleb128 0x34
+	.byte	0
+	.uleb128 0x3
+	.uleb128 0x8
+	.uleb128 0x3a
+	.uleb128 0xb
+	.uleb128 0x3b
+	.uleb128 0x5
+	.uleb128 0x49
+	.uleb128 0x13
+	.uleb128 0x2
+	.uleb128 0x18
+	.byte	0
+	.byte	0
+	.uleb128 0x5c
+	.uleb128 0x34
+	.byte	0
+	.uleb128 0x3
+	.uleb128 0x8
+	.uleb128 0x3a
+	.uleb128 0xb
+	.uleb128 0x3b
+	.uleb128 0x5
+	.uleb128 0x49
+	.uleb128 0x13
+	.uleb128 0x1c
+	.uleb128 0x6
+	.byte	0
+	.byte	0
+	.uleb128 0x5d
+	.uleb128 0xa
+	.byte	0
+	.uleb128 0x3
+	.uleb128 0xe
+	.uleb128 0x3a
+	.uleb128 0xb
+	.uleb128 0x3b
+	.uleb128 0xb
+	.uleb128 0x11
+	.uleb128 0x1
+	.byte	0
+	.byte	0
+	.uleb128 0x5e
+	.uleb128 0x4109
+	.byte	0x1
+	.uleb128 0x11
+	.uleb128 0x1
+	.byte	0
+	.byte	0
+	.uleb128 0x5f
+	.uleb128 0x2e
+	.byte	0x1
+	.uleb128 0x3
+	.uleb128 0xe
+	.uleb128 0x3a
+	.uleb128 0xb
+	.uleb128 0x3b
+	.uleb128 0xb
+	.uleb128 0x27
+	.uleb128 0x19
+	.uleb128 0x49
+	.uleb128 0x13
+	.uleb128 0x20
+	.uleb128 0xb
+	.uleb128 0x1
+	.uleb128 0x13
+	.byte	0
+	.byte	0
+	.uleb128 0x60
+	.uleb128 0x5
+	.byte	0
+	.uleb128 0x3
+	.uleb128 0x8
+	.uleb128 0x3a
+	.uleb128 0xb
+	.uleb128 0x3b
+	.uleb128 0xb
+	.uleb128 0x49
+	.uleb128 0x13
+	.byte	0
+	.byte	0
+	.uleb128 0x61
+	.uleb128 0x5
+	.byte	0
+	.uleb128 0x3
+	.uleb128 0xe
+	.uleb128 0x3a
+	.uleb128 0xb
+	.uleb128 0x3b
+	.uleb128 0xb
+	.uleb128 0x49
+	.uleb128 0x13
+	.byte	0
+	.byte	0
+	.uleb128 0x62
+	.uleb128 0x34
+	.byte	0
+	.uleb128 0x3
+	.uleb128 0x8
+	.uleb128 0x3a
+	.uleb128 0xb
+	.uleb128 0x3b
+	.uleb128 0xb
+	.uleb128 0x49
+	.uleb128 0x13
+	.byte	0
+	.byte	0
+	.uleb128 0x63
+	.uleb128 0x34
+	.byte	0
+	.uleb128 0x3
+	.uleb128 0xe
+	.uleb128 0x3a
+	.uleb128 0xb
+	.uleb128 0x3b
+	.uleb128 0xb
+	.uleb128 0x49
+	.uleb128 0x13
+	.byte	0
+	.byte	0
+	.uleb128 0x64
+	.uleb128 0x2e
+	.byte	0x1
+	.uleb128 0x3
+	.uleb128 0xe
+	.uleb128 0x3a
+	.uleb128 0xb
+	.uleb128 0x3b
+	.uleb128 0xb
+	.uleb128 0x27
+	.uleb128 0x19
+	.uleb128 0x11
+	.uleb128 0x1
+	.uleb128 0x12
+	.uleb128 0x7
+	.uleb128 0x40
+	.uleb128 0x18
+	.uleb128 0x2117
+	.uleb128 0x19
+	.uleb128 0x1
+	.uleb128 0x13
+	.byte	0
+	.byte	0
+	.uleb128 0x65
+	.uleb128 0x5
+	.byte	0
+	.uleb128 0x3
+	.uleb128 0xe
+	.uleb128 0x3a
+	.uleb128 0xb
+	.uleb128 0x3b
+	.uleb128 0xb
+	.uleb128 0x49
+	.uleb128 0x13
+	.uleb128 0x2
+	.uleb128 0x18
+	.byte	0
+	.byte	0
+	.uleb128 0x66
+	.uleb128 0xb
+	.byte	0x1
+	.uleb128 0x11
+	.uleb128 0x1
+	.uleb128 0x12
+	.uleb128 0x7
+	.byte	0
+	.byte	0
+	.uleb128 0x67
+	.uleb128 0x34
+	.byte	0
+	.uleb128 0x3
+	.uleb128 0x8
+	.uleb128 0x3a
+	.uleb128 0xb
+	.uleb128 0x3b
+	.uleb128 0xb
+	.uleb128 0x49
+	.uleb128 0x13
+	.uleb128 0x1c
+	.uleb128 0x6
+	.byte	0
+	.byte	0
+	.uleb128 0x68
+	.uleb128 0x4109
+	.byte	0x1
+	.uleb128 0x11
+	.uleb128 0x1
+	.uleb128 0x2115
+	.uleb128 0x19
+	.uleb128 0x31
+	.uleb128 0x13
+	.byte	0
+	.byte	0
+	.uleb128 0x69
+	.uleb128 0x2e
+	.byte	0x1
+	.uleb128 0x3
+	.uleb128 0xe
+	.uleb128 0x3a
+	.uleb128 0xb
+	.uleb128 0x3b
+	.uleb128 0x5
+	.uleb128 0x27
+	.uleb128 0x19
+	.uleb128 0x20
+	.uleb128 0xb
+	.uleb128 0x1
+	.uleb128 0x13
+	.byte	0
+	.byte	0
+	.uleb128 0x6a
+	.uleb128 0x2e
+	.byte	0x1
+	.uleb128 0x31
+	.uleb128 0x13
+	.uleb128 0x11
+	.uleb128 0x1
+	.uleb128 0x12
+	.uleb128 0x7
+	.uleb128 0x40
+	.uleb128 0x18
+	.uleb128 0x2117
+	.uleb128 0x19
+	.uleb128 0x1
+	.uleb128 0x13
+	.byte	0
+	.byte	0
+	.uleb128 0x6b
+	.uleb128 0x5
+	.byte	0
+	.uleb128 0x31
+	.uleb128 0x13
+	.byte	0
+	.byte	0
+	.uleb128 0x6c
+	.uleb128 0x34
+	.byte	0
+	.uleb128 0x31
+	.uleb128 0x13
+	.uleb128 0x1c
+	.uleb128 0xd
+	.byte	0
+	.byte	0
+	.uleb128 0x6d
+	.uleb128 0x34
+	.byte	0
+	.uleb128 0x31
+	.uleb128 0x13
+	.uleb128 0x1c
+	.uleb128 0xb
+	.byte	0
+	.byte	0
+	.uleb128 0x6e
+	.uleb128 0x2e
+	.byte	0
+	.uleb128 0x3f
+	.uleb128 0x19
+	.uleb128 0x3c
+	.uleb128 0x19
+	.uleb128 0x6e
+	.uleb128 0xe
+	.uleb128 0x3
+	.uleb128 0xe
+	.uleb128 0x3a
+	.uleb128 0xb
+	.uleb128 0x3b
+	.uleb128 0x5
+	.byte	0
+	.byte	0
+	.uleb128 0x6f
+	.uleb128 0x2e
+	.byte	0
+	.uleb128 0x3f
+	.uleb128 0x19
+	.uleb128 0x3c
+	.uleb128 0x19
+	.uleb128 0x6e
+	.uleb128 0xe
+	.uleb128 0x3
+	.uleb128 0xe
+	.uleb128 0x3a
+	.uleb128 0xb
+	.uleb128 0x3b
+	.uleb128 0xb
+	.byte	0
+	.byte	0
+	.byte	0
+	.section	.debug_loc,"",@progbits
+.Ldebug_loc0:
+.LLST14:
+	.8byte	.LVL19
+	.8byte	.LVL20-1
+	.2byte	0x1
+	.byte	0x50
+	.8byte	.LVL20-1
+	.8byte	.LVL27
+	.2byte	0x1
+	.byte	0x64
+	.8byte	.LVL27
+	.8byte	.LFE277
+	.2byte	0x4
+	.byte	0xf3
+	.uleb128 0x1
+	.byte	0x50
+	.byte	0x9f
+	.8byte	0
+	.8byte	0
+.LLST15:
+	.8byte	.LVL21
+	.8byte	.LVL22
+	.2byte	0x1
+	.byte	0x50
+	.8byte	.LVL22
+	.8byte	.LVL27
+	.2byte	0x1
+	.byte	0x63
+	.8byte	0
+	.8byte	0
+.LLST1:
+	.8byte	.LVL2
+	.8byte	.LVL3
+	.2byte	0x1
+	.byte	0x50
+	.8byte	.LVL3
+	.8byte	.LFE276
+	.2byte	0x4
+	.byte	0xf3
+	.uleb128 0x1
+	.byte	0x50
+	.byte	0x9f
+	.8byte	0
+	.8byte	0
+.LLST2:
+	.8byte	.LVL2
+	.8byte	.LVL5
+	.2byte	0x3
+	.byte	0x9
+	.byte	0xea
+	.byte	0x9f
+	.8byte	.LVL6
+	.8byte	.LFE276
+	.2byte	0x3
+	.byte	0x9
+	.byte	0xea
+	.byte	0x9f
+	.8byte	0
+	.8byte	0
+.LLST3:
+	.8byte	.LVL4
+	.8byte	.LVL5
+	.2byte	0x1
+	.byte	0x52
+	.8byte	0
+	.8byte	0
+.LLST4:
+	.8byte	.LVL7
+	.8byte	.LVL8-1
+	.2byte	0x1
+	.byte	0x50
+	.8byte	.LVL8-1
+	.8byte	.LVL11
+	.2byte	0x1
+	.byte	0x63
+	.8byte	.LVL11
+	.8byte	.LVL12-1
+	.2byte	0x1
+	.byte	0x50
+	.8byte	.LVL12-1
+	.8byte	.LFE274
+	.2byte	0x4
+	.byte	0xf3
+	.uleb128 0x1
+	.byte	0x50
+	.byte	0x9f
+	.8byte	0
+	.8byte	0
+.LLST5:
+	.8byte	.LVL7
+	.8byte	.LVL8-1
+	.2byte	0x1
+	.byte	0x51
+	.8byte	.LVL8-1
+	.8byte	.LVL11
+	.2byte	0x1
+	.byte	0x64
+	.8byte	.LVL11
+	.8byte	.LVL12-1
+	.2byte	0x1
+	.byte	0x51
+	.8byte	.LVL12-1
+	.8byte	.LFE274
+	.2byte	0x4
+	.byte	0xf3
+	.uleb128 0x1
+	.byte	0x51
+	.byte	0x9f
+	.8byte	0
+	.8byte	0
+.LLST6:
+	.8byte	.LVL7
+	.8byte	.LVL8-1
+	.2byte	0x1
+	.byte	0x52
+	.8byte	.LVL8-1
+	.8byte	.LVL10
+	.2byte	0x1
+	.byte	0x65
+	.8byte	.LVL10
+	.8byte	.LVL12-1
+	.2byte	0x1
+	.byte	0x52
+	.8byte	.LVL12-1
+	.8byte	.LFE274
+	.2byte	0x4
+	.byte	0xf3
+	.uleb128 0x1
+	.byte	0x52
+	.byte	0x9f
+	.8byte	0
+	.8byte	0
+.LLST7:
+	.8byte	.LVL7
+	.8byte	.LVL8-1
+	.2byte	0x1
+	.byte	0x53
+	.8byte	.LVL8-1
+	.8byte	.LVL10
+	.2byte	0x1
+	.byte	0x66
+	.8byte	.LVL10
+	.8byte	.LVL12-1
+	.2byte	0x1
+	.byte	0x53
+	.8byte	.LVL12-1
+	.8byte	.LFE274
+	.2byte	0x4
+	.byte	0xf3
+	.uleb128 0x1
+	.byte	0x53
+	.byte	0x9f
+	.8byte	0
+	.8byte	0
+.LLST8:
+	.8byte	.LVL8
+	.8byte	.LVL9
+	.2byte	0x1
+	.byte	0x50
+	.8byte	0
+	.8byte	0
+.LLST9:
+	.8byte	.LVL13
+	.8byte	.LVL14-1
+	.2byte	0x1
+	.byte	0x50
+	.8byte	.LVL14-1
+	.8byte	.LVL17
+	.2byte	0x1
+	.byte	0x63
+	.8byte	.LVL17
+	.8byte	.LVL18-1
+	.2byte	0x1
+	.byte	0x50
+	.8byte	.LVL18-1
+	.8byte	.LFE273
+	.2byte	0x4
+	.byte	0xf3
+	.uleb128 0x1
+	.byte	0x50
+	.byte	0x9f
+	.8byte	0
+	.8byte	0
+.LLST10:
+	.8byte	.LVL13
+	.8byte	.LVL14-1
+	.2byte	0x1
+	.byte	0x51
+	.8byte	.LVL14-1
+	.8byte	.LVL17
+	.2byte	0x1
+	.byte	0x64
+	.8byte	.LVL17
+	.8byte	.LVL18-1
+	.2byte	0x1
+	.byte	0x51
+	.8byte	.LVL18-1
+	.8byte	.LFE273
+	.2byte	0x4
+	.byte	0xf3
+	.uleb128 0x1
+	.byte	0x51
+	.byte	0x9f
+	.8byte	0
+	.8byte	0
+.LLST11:
+	.8byte	.LVL13
+	.8byte	.LVL14-1
+	.2byte	0x1
+	.byte	0x52
+	.8byte	.LVL14-1
+	.8byte	.LVL16
+	.2byte	0x1
+	.byte	0x65
+	.8byte	.LVL16
+	.8byte	.LVL18-1
+	.2byte	0x1
+	.byte	0x52
+	.8byte	.LVL18-1
+	.8byte	.LFE273
+	.2byte	0x4
+	.byte	0xf3
+	.uleb128 0x1
+	.byte	0x52
+	.byte	0x9f
+	.8byte	0
+	.8byte	0
+.LLST12:
+	.8byte	.LVL13
+	.8byte	.LVL14-1
+	.2byte	0x1
+	.byte	0x53
+	.8byte	.LVL14-1
+	.8byte	.LVL16
+	.2byte	0x1
+	.byte	0x66
+	.8byte	.LVL16
+	.8byte	.LVL18-1
+	.2byte	0x1
+	.byte	0x53
+	.8byte	.LVL18-1
+	.8byte	.LFE273
+	.2byte	0x4
+	.byte	0xf3
+	.uleb128 0x1
+	.byte	0x53
+	.byte	0x9f
+	.8byte	0
+	.8byte	0
+.LLST13:
+	.8byte	.LVL14
+	.8byte	.LVL15
+	.2byte	0x1
+	.byte	0x50
+	.8byte	0
+	.8byte	0
+.LLST69:
+	.8byte	.LVL246
+	.8byte	.LVL247-1
+	.2byte	0x1
+	.byte	0x50
+	.8byte	.LVL247-1
+	.8byte	.LVL254
+	.2byte	0x1
+	.byte	0x68
+	.8byte	.LVL254
+	.8byte	.LVL257
+	.2byte	0x4
+	.byte	0xf3
+	.uleb128 0x1
+	.byte	0x50
+	.byte	0x9f
+	.8byte	.LVL257
+	.8byte	.LFE272
+	.2byte	0x1
+	.byte	0x68
+	.8byte	0
+	.8byte	0
+.LLST70:
+	.8byte	.LVL246
+	.8byte	.LVL247-1
+	.2byte	0x1
+	.byte	0x51
+	.8byte	.LVL247-1
+	.8byte	.LVL253
+	.2byte	0x1
+	.byte	0x64
+	.8byte	.LVL253
+	.8byte	.LVL257
+	.2byte	0x4
+	.byte	0xf3
+	.uleb128 0x1
+	.byte	0x51
+	.byte	0x9f
+	.8byte	.LVL257
+	.8byte	.LFE272
+	.2byte	0x1
+	.byte	0x64
+	.8byte	0
+	.8byte	0
+.LLST71:
+	.8byte	.LVL246
+	.8byte	.LVL247-1
+	.2byte	0x1
+	.byte	0x52
+	.8byte	.LVL247-1
+	.8byte	.LVL256
+	.2byte	0x3
+	.byte	0x8f
+	.sleb128 224
+	.8byte	.LVL256
+	.8byte	.LVL257
+	.2byte	0x3
+	.byte	0x8f
+	.sleb128 80
+	.8byte	.LVL257
+	.8byte	.LFE272
+	.2byte	0x3
+	.byte	0x8f
+	.sleb128 224
+	.8byte	0
+	.8byte	0
+.LLST72:
+	.8byte	.LVL246
+	.8byte	.LVL247-1
+	.2byte	0x1
+	.byte	0x53
+	.8byte	.LVL247-1
+	.8byte	.LVL252
+	.2byte	0x1
+	.byte	0x65
+	.8byte	.LVL252
+	.8byte	.LVL257
+	.2byte	0x4
+	.byte	0xf3
+	.uleb128 0x1
+	.byte	0x53
+	.byte	0x9f
+	.8byte	.LVL257
+	.8byte	.LVL261
+	.2byte	0x1
+	.byte	0x65
+	.8byte	.LVL261
+	.8byte	.LVL267
+	.2byte	0x4
+	.byte	0xf3
+	.uleb128 0x1
+	.byte	0x53
+	.byte	0x9f
+	.8byte	.LVL267
+	.8byte	.LVL281
+	.2byte	0x1
+	.byte	0x65
+	.8byte	.LVL281
+	.8byte	.LVL283
+	.2byte	0x4
+	.byte	0xf3
+	.uleb128 0x1
+	.byte	0x53
+	.byte	0x9f
+	.8byte	.LVL283
+	.8byte	.LVL287
+	.2byte	0x1
+	.byte	0x65
+	.8byte	.LVL287
+	.8byte	.LVL396
+	.2byte	0x4
+	.byte	0xf3
+	.uleb128 0x1
+	.byte	0x53
+	.byte	0x9f
+	.8byte	.LVL396
+	.8byte	.LFE272
+	.2byte	0x1
+	.byte	0x65
+	.8byte	0
+	.8byte	0
+.LLST73:
+	.8byte	.LVL248
+	.8byte	.LVL249
+	.2byte	0x1
+	.byte	0x50
+	.8byte	.LVL249
+	.8byte	.LVL255
+	.2byte	0x1
+	.byte	0x6c
+	.8byte	.LVL257
+	.8byte	.LFE272
+	.2byte	0x1
+	.byte	0x6c
+	.8byte	0
+	.8byte	0
+.LLST74:
+	.8byte	.LVL248
+	.8byte	.LVL256
+	.2byte	0x3
+	.byte	0x8f
+	.sleb128 224
+	.8byte	.LVL256
+	.8byte	.LVL257
+	.2byte	0x3
+	.byte	0x8f
+	.sleb128 80
+	.8byte	.LVL257
+	.8byte	.LFE272
+	.2byte	0x3
+	.byte	0x8f
+	.sleb128 224
+	.8byte	0
+	.8byte	0
+.LLST76:
+	.8byte	.LVL250
+	.8byte	.LVL251
+	.2byte	0x1
+	.byte	0x50
+	.8byte	.LVL257
+	.8byte	.LVL258
+	.2byte	0x1
+	.byte	0x50
+	.8byte	.LVL258
+	.8byte	.LVL260
+	.2byte	0x1
+	.byte	0x63
+	.8byte	.LVL267
+	.8byte	.LVL272
+	.2byte	0x1
+	.byte	0x63
+	.8byte	.LVL285
+	.8byte	.LVL286
+	.2byte	0x1
+	.byte	0x63
+	.8byte	0
+	.8byte	0
+.LLST77:
+	.8byte	.LVL261
+	.8byte	.LVL267
+	.2byte	0x1
+	.byte	0x67
+	.8byte	.LVL269
+	.8byte	.LVL270
+	.2byte	0x1
+	.byte	0x50
+	.8byte	.LVL272
+	.8byte	.LVL278
+	.2byte	0x1
+	.byte	0x63
+	.8byte	.LVL283
+	.8byte	.LVL285
+	.2byte	0x1
+	.byte	0x63
+	.8byte	.LVL286
+	.8byte	.LVL287
+	.2byte	0x1
+	.byte	0x63
+	.8byte	.LVL288
+	.8byte	.LVL394
+	.2byte	0x1
+	.byte	0x67
+	.8byte	.LVL394
+	.8byte	.LVL395
+	.2byte	0x3
+	.byte	0x87
+	.sleb128 1
+	.byte	0x9f
+	.8byte	.LVL396
+	.8byte	.LFE272
+	.2byte	0x1
+	.byte	0x63
+	.8byte	0
+	.8byte	0
+.LLST78:
+	.8byte	.LVL250
+	.8byte	.LVL251
+	.2byte	0x2
+	.byte	0x30
+	.byte	0x9f
+	.8byte	.LVL257
+	.8byte	.LVL268
+	.2byte	0x2
+	.byte	0x30
+	.byte	0x9f
+	.8byte	.LVL268
+	.8byte	.LVL269
+	.2byte	0x1
+	.byte	0x50
+	.8byte	.LVL272
+	.8byte	.LVL280
+	.2byte	0x2
+	.byte	0x30
+	.byte	0x9f
+	.8byte	.LVL283
+	.8byte	.LVL315
+	.2byte	0x2
+	.byte	0x30
+	.byte	0x9f
+	.8byte	.LVL317
+	.8byte	.LVL394
+	.2byte	0x2
+	.byte	0x30
+	.byte	0x9f
+	.8byte	0
+	.8byte	0
+.LLST79:
+	.8byte	.LVL262
+	.8byte	.LVL267
+	.2byte	0x1
+	.byte	0x6a
+	.8byte	.LVL288
+	.8byte	.LVL313
+	.2byte	0x1
+	.byte	0x6a
+	.8byte	.LVL317
+	.8byte	.LVL352
+	.2byte	0x1
+	.byte	0x6a
+	.8byte	0
+	.8byte	0
+.LLST80:
+	.8byte	.LVL262
+	.8byte	.LVL264
+	.2byte	0x1
+	.byte	0x65
+	.8byte	.LVL264
+	.8byte	.LVL267
+	.2byte	0x1
+	.byte	0x69
+	.8byte	.LVL288
+	.8byte	.LVL315
+	.2byte	0x1
+	.byte	0x69
+	.8byte	.LVL317
+	.8byte	.LVL394
+	.2byte	0x1
+	.byte	0x69
+	.8byte	0
+	.8byte	0
+.LLST81:
+	.8byte	.LVL262
+	.8byte	.LVL267
+	.2byte	0x1
+	.byte	0x6c
+	.8byte	.LVL288
+	.8byte	.LVL315
+	.2byte	0x1
+	.byte	0x6c
+	.8byte	.LVL317
+	.8byte	.LVL394
+	.2byte	0x1
+	.byte	0x6c
+	.8byte	0
+	.8byte	0
+.LLST82:
+	.8byte	.LVL262
+	.8byte	.LVL267
+	.2byte	0x1
+	.byte	0x68
+	.8byte	.LVL288
+	.8byte	.LVL315
+	.2byte	0x1
+	.byte	0x68
+	.8byte	.LVL317
+	.8byte	.LVL394
+	.2byte	0x1
+	.byte	0x68
+	.8byte	0
+	.8byte	0
+.LLST83:
+	.8byte	.LVL262
+	.8byte	.LVL267
+	.2byte	0x2
+	.byte	0x30
+	.byte	0x9f
+	.8byte	.LVL288
+	.8byte	.LVL311
+	.2byte	0x2
+	.byte	0x30
+	.byte	0x9f
+	.8byte	.LVL311
+	.8byte	.LVL312
+	.2byte	0x1
+	.byte	0x50
+	.8byte	.LVL312
+	.8byte	.LVL315
+	.2byte	0x1
+	.byte	0x6b
+	.8byte	.LVL317
+	.8byte	.LVL318
+	.2byte	0x1
+	.byte	0x50
+	.8byte	.LVL318
+	.8byte	.LVL337
+	.2byte	0x1
+	.byte	0x6b
+	.8byte	.LVL337
+	.8byte	.LVL338
+	.2byte	0x1
+	.byte	0x50
+	.8byte	.LVL338
+	.8byte	.LVL339
+	.2byte	0x1
+	.byte	0x6b
+	.8byte	.LVL339
+	.8byte	.LVL340
+	.2byte	0x1
+	.byte	0x50
+	.8byte	.LVL340
+	.8byte	.LVL346
+	.2byte	0x1
+	.byte	0x6b
+	.8byte	.LVL346
+	.8byte	.LVL347
+	.2byte	0x1
+	.byte	0x50
+	.8byte	.LVL347
+	.8byte	.LVL348
+	.2byte	0x1
+	.byte	0x6b
+	.8byte	.LVL348
+	.8byte	.LVL349
+	.2byte	0x1
+	.byte	0x50
+	.8byte	.LVL349
+	.8byte	.LVL356
+	.2byte	0x1
+	.byte	0x6b
+	.8byte	.LVL356
+	.8byte	.LVL357
+	.2byte	0x1
+	.byte	0x50
+	.8byte	.LVL357
+	.8byte	.LVL358
+	.2byte	0x1
+	.byte	0x6b
+	.8byte	.LVL358
+	.8byte	.LVL359
+	.2byte	0x1
+	.byte	0x50
+	.8byte	.LVL359
+	.8byte	.LVL365
+	.2byte	0x1
+	.byte	0x6b
+	.8byte	.LVL365
+	.8byte	.LVL366
+	.2byte	0x1
+	.byte	0x50
+	.8byte	.LVL366
+	.8byte	.LVL367
+	.2byte	0x1
+	.byte	0x6b
+	.8byte	.LVL367
+	.8byte	.LVL368
+	.2byte	0x1
+	.byte	0x50
+	.8byte	.LVL368
+	.8byte	.LVL374
+	.2byte	0x1
+	.byte	0x6b
+	.8byte	.LVL374
+	.8byte	.LVL375
+	.2byte	0x1
+	.byte	0x50
+	.8byte	.LVL375
+	.8byte	.LVL376
+	.2byte	0x1
+	.byte	0x6b
+	.8byte	.LVL376
+	.8byte	.LVL377
+	.2byte	0x1
+	.byte	0x50
+	.8byte	.LVL377
+	.8byte	.LVL379
+	.2byte	0x1
+	.byte	0x6b
+	.8byte	.LVL379
+	.8byte	.LVL380
+	.2byte	0x1
+	.byte	0x50
+	.8byte	.LVL380
+	.8byte	.LVL381
+	.2byte	0x1
+	.byte	0x6b
+	.8byte	.LVL381
+	.8byte	.LVL382
+	.2byte	0x1
+	.byte	0x50
+	.8byte	.LVL382
+	.8byte	.LVL387
+	.2byte	0x1
+	.byte	0x6b
+	.8byte	.LVL387
+	.8byte	.LVL388
+	.2byte	0x1
+	.byte	0x50
+	.8byte	.LVL388
+	.8byte	.LVL389
+	.2byte	0x1
+	.byte	0x6b
+	.8byte	.LVL389
+	.8byte	.LVL390
+	.2byte	0x1
+	.byte	0x50
+	.8byte	.LVL390
+	.8byte	.LVL392
+	.2byte	0x1
+	.byte	0x6b
+	.8byte	.LVL392
+	.8byte	.LVL393
+	.2byte	0x1
+	.byte	0x50
+	.8byte	.LVL393
+	.8byte	.LVL394
+	.2byte	0x1
+	.byte	0x6b
+	.8byte	0
+	.8byte	0
+.LLST84:
+	.8byte	.LVL264
+	.8byte	.LVL265
+	.2byte	0x1
+	.byte	0x50
+	.8byte	.LVL265
+	.8byte	.LVL267
+	.2byte	0x3
+	.byte	0x8f
+	.sleb128 232
+	.8byte	.LVL288
+	.8byte	.LVL315
+	.2byte	0x3
+	.byte	0x8f
+	.sleb128 232
+	.8byte	.LVL317
+	.8byte	.LVL394
+	.2byte	0x3
+	.byte	0x8f
+	.sleb128 232
+	.8byte	0
+	.8byte	0
+.LLST85:
+	.8byte	.LVL289
+	.8byte	.LVL316
+	.2byte	0x4
+	.byte	0x40
+	.byte	0x3c
+	.byte	0x24
+	.byte	0x9f
+	.8byte	.LVL317
+	.8byte	.LVL394
+	.2byte	0x4
+	.byte	0x40
+	.byte	0x3c
+	.byte	0x24
+	.byte	0x9f
+	.8byte	0
+	.8byte	0
+.LLST86:
+	.8byte	.LVL290
+	.8byte	.LVL316
+	.2byte	0x6
+	.byte	0xc
+	.4byte	0x40004
+	.byte	0x9f
+	.8byte	.LVL317
+	.8byte	.LVL394
+	.2byte	0x6
+	.byte	0xc
+	.4byte	0x40004
+	.byte	0x9f
+	.8byte	0
+	.8byte	0
+.LLST87:
+	.8byte	.LVL291
+	.8byte	.LVL316
+	.2byte	0x5
+	.byte	0x11
+	.sleb128 -65536
+	.byte	0x9f
+	.8byte	.LVL317
+	.8byte	.LVL394
+	.2byte	0x5
+	.byte	0x11
+	.sleb128 -65536
+	.byte	0x9f
+	.8byte	0
+	.8byte	0
+.LLST88:
+	.8byte	.LVL292
+	.8byte	.LVL316
+	.2byte	0x6
+	.byte	0x11
+	.sleb128 -16776704
+	.byte	0x9f
+	.8byte	.LVL317
+	.8byte	.LVL394
+	.2byte	0x6
+	.byte	0x11
+	.sleb128 -16776704
+	.byte	0x9f
+	.8byte	0
+	.8byte	0
+.LLST89:
+	.8byte	.LVL293
+	.8byte	.LVL316
+	.2byte	0x5
+	.byte	0x11
+	.sleb128 -65522
+	.byte	0x9f
+	.8byte	.LVL317
+	.8byte	.LVL394
+	.2byte	0x5
+	.byte	0x11
+	.sleb128 -65522
+	.byte	0x9f
+	.8byte	0
+	.8byte	0
+.LLST90:
+	.8byte	.LVL294
+	.8byte	.LVL316
+	.2byte	0x3
+	.byte	0x8
+	.byte	0xf0
+	.byte	0x9f
+	.8byte	.LVL317
+	.8byte	.LVL394
+	.2byte	0x3
+	.byte	0x8
+	.byte	0xf0
+	.byte	0x9f
+	.8byte	0
+	.8byte	0
+.LLST91:
+	.8byte	.LVL295
+	.8byte	.LVL316
+	.2byte	0x2
+	.byte	0x31
+	.byte	0x9f
+	.8byte	.LVL317
+	.8byte	.LVL394
+	.2byte	0x2
+	.byte	0x31
+	.byte	0x9f
+	.8byte	0
+	.8byte	0
+.LLST92:
+	.8byte	.LVL296
+	.8byte	.LVL316
+	.2byte	0x3
+	.byte	0x8
+	.byte	0x7a
+	.byte	0x9f
+	.8byte	.LVL317
+	.8byte	.LVL394
+	.2byte	0x3
+	.byte	0x8
+	.byte	0x7a
+	.byte	0x9f
+	.8byte	0
+	.8byte	0
+.LLST93:
+	.8byte	.LVL297
+	.8byte	.LVL316
+	.2byte	0x3
+	.byte	0x8
+	.byte	0x25
+	.byte	0x9f
+	.8byte	.LVL317
+	.8byte	.LVL394
+	.2byte	0x3
+	.byte	0x8
+	.byte	0x25
+	.byte	0x9f
+	.8byte	0
+	.8byte	0
+.LLST94:
+	.8byte	.LVL298
+	.8byte	.LVL316
+	.2byte	0x2
+	.byte	0x30
+	.byte	0x9f
+	.8byte	.LVL317
+	.8byte	.LVL394
+	.2byte	0x2
+	.byte	0x30
+	.byte	0x9f
+	.8byte	0
+	.8byte	0
+.LLST95:
+	.8byte	.LVL299
+	.8byte	.LVL316
+	.2byte	0x2
+	.byte	0x30
+	.byte	0x9f
+	.8byte	.LVL317
+	.8byte	.LVL394
+	.2byte	0x2
+	.byte	0x30
+	.byte	0x9f
+	.8byte	0
+	.8byte	0
+.LLST96:
+	.8byte	.LVL300
+	.8byte	.LVL316
+	.2byte	0x2
+	.byte	0x30
+	.byte	0x9f
+	.8byte	.LVL317
+	.8byte	.LVL394
+	.2byte	0x2
+	.byte	0x30
+	.byte	0x9f
+	.8byte	0
+	.8byte	0
+.LLST97:
+	.8byte	.LVL301
+	.8byte	.LVL316
+	.2byte	0x2
+	.byte	0x4f
+	.byte	0x9f
+	.8byte	.LVL317
+	.8byte	.LVL394
+	.2byte	0x2
+	.byte	0x4f
+	.byte	0x9f
+	.8byte	0
+	.8byte	0
+.LLST98:
+	.8byte	.LVL302
+	.8byte	.LVL316
+	.2byte	0x2
+	.byte	0x3b
+	.byte	0x9f
+	.8byte	.LVL317
+	.8byte	.LVL394
+	.2byte	0x2
+	.byte	0x3b
+	.byte	0x9f
+	.8byte	0
+	.8byte	0
+.LLST99:
+	.8byte	.LVL303
+	.8byte	.LVL316
+	.2byte	0x2
+	.byte	0x38
+	.byte	0x9f
+	.8byte	.LVL317
+	.8byte	.LVL394
+	.2byte	0x2
+	.byte	0x38
+	.byte	0x9f
+	.8byte	0
+	.8byte	0
+.LLST100:
+	.8byte	.LVL304
+	.8byte	.LVL316
+	.2byte	0x2
+	.byte	0x30
+	.byte	0x9f
+	.8byte	.LVL317
+	.8byte	.LVL394
+	.2byte	0x2
+	.byte	0x30
+	.byte	0x9f
+	.8byte	0
+	.8byte	0
+.LLST101:
+	.8byte	.LVL305
+	.8byte	.LVL316
+	.2byte	0x2
+	.byte	0x30
+	.byte	0x9f
+	.8byte	.LVL317
+	.8byte	.LVL394
+	.2byte	0x2
+	.byte	0x30
+	.byte	0x9f
+	.8byte	0
+	.8byte	0
+.LLST102:
+	.8byte	.LVL306
+	.8byte	.LVL316
+	.2byte	0x2
+	.byte	0x30
+	.byte	0x9f
+	.8byte	.LVL317
+	.8byte	.LVL394
+	.2byte	0x2
+	.byte	0x30
+	.byte	0x9f
+	.8byte	0
+	.8byte	0
+.LLST103:
+	.8byte	.LVL307
+	.8byte	.LVL315
+	.2byte	0x1
+	.byte	0x69
+	.8byte	.LVL317
+	.8byte	.LVL394
+	.2byte	0x1
+	.byte	0x69
+	.8byte	0
+	.8byte	0
+.LLST104:
+	.8byte	.LVL308
+	.8byte	.LVL313
+	.2byte	0x1
+	.byte	0x65
+	.8byte	.LVL317
+	.8byte	.LVL332
+	.2byte	0x1
+	.byte	0x65
+	.8byte	0
+	.8byte	0
+.LLST105:
+	.8byte	.LVL309
+	.8byte	.LVL316
+	.2byte	0x6
+	.byte	0xc
+	.4byte	0x10001
+	.byte	0x9f
+	.8byte	.LVL317
+	.8byte	.LVL394
+	.2byte	0x6
+	.byte	0xc
+	.4byte	0x10001
+	.byte	0x9f
+	.8byte	0
+	.8byte	0
+.LLST106:
+	.8byte	.LVL314
+	.8byte	.LVL316
+	.2byte	0x5
+	.byte	0x11
+	.sleb128 -65533
+	.byte	0x9f
+	.8byte	0
+	.8byte	0
+.LLST107:
+	.8byte	.LVL317
+	.8byte	.LVL394
+	.2byte	0x6
+	.byte	0x11
+	.sleb128 -16762368
+	.byte	0x9f
+	.8byte	0
+	.8byte	0
+.LLST108:
+	.8byte	.LVL319
+	.8byte	.LVL394
+	.2byte	0x3
+	.byte	0x8
+	.byte	0xf0
+	.byte	0x9f
+	.8byte	0
+	.8byte	0
+.LLST109:
+	.8byte	.LVL320
+	.8byte	.LVL394
+	.2byte	0x2
+	.byte	0x31
+	.byte	0x9f
+	.8byte	0
+	.8byte	0
+.LLST110:
+	.8byte	.LVL321
+	.8byte	.LVL394
+	.2byte	0x3
+	.byte	0x8
+	.byte	0x7a
+	.byte	0x9f
+	.8byte	0
+	.8byte	0
+.LLST111:
+	.8byte	.LVL322
+	.8byte	.LVL394
+	.2byte	0x2
+	.byte	0x45
+	.byte	0x9f
+	.8byte	0
+	.8byte	0
+.LLST112:
+	.8byte	.LVL323
+	.8byte	.LVL394
+	.2byte	0x3
+	.byte	0x8
+	.byte	0xdc
+	.byte	0x9f
+	.8byte	0
+	.8byte	0
+.LLST113:
+	.8byte	.LVL324
+	.8byte	.LVL394
+	.2byte	0x3
+	.byte	0x8
+	.byte	0x92
+	.byte	0x9f
+	.8byte	0
+	.8byte	0
+.LLST114:
+	.8byte	.LVL325
+	.8byte	.LVL394
+	.2byte	0x3
+	.byte	0x8
+	.byte	0x79
+	.byte	0x9f
+	.8byte	0
+	.8byte	0
+.LLST115:
+	.8byte	.LVL326
+	.8byte	.LVL394
+	.2byte	0x3
+	.byte	0x8
+	.byte	0x81
+	.byte	0x9f
+	.8byte	0
+	.8byte	0
+.LLST116:
+	.8byte	.LVL327
+	.8byte	.LVL394
+	.2byte	0x3
+	.byte	0x8
+	.byte	0x7e
+	.byte	0x9f
+	.8byte	0
+	.8byte	0
+.LLST117:
+	.8byte	.LVL328
+	.8byte	.LVL394
+	.2byte	0x3
+	.byte	0x8
+	.byte	0x21
+	.byte	0x9f
+	.8byte	0
+	.8byte	0
+.LLST118:
+	.8byte	.LVL329
+	.8byte	.LVL394
+	.2byte	0x2
+	.byte	0x41
+	.byte	0x9f
+	.8byte	0
+	.8byte	0
+.LLST119:
+	.8byte	.LVL330
+	.8byte	.LVL394
+	.2byte	0x3
+	.byte	0x8
+	.byte	0x9d
+	.byte	0x9f
+	.8byte	0
+	.8byte	0
+.LLST120:
+	.8byte	.LVL331
+	.8byte	.LVL394
+	.2byte	0x2
+	.byte	0x32
+	.byte	0x9f
+	.8byte	0
+	.8byte	0
+.LLST121:
+	.8byte	.LVL333
+	.8byte	.LVL394
+	.2byte	0x2
+	.byte	0x30
+	.byte	0x9f
+	.8byte	0
+	.8byte	0
+.LLST122:
+	.8byte	.LVL334
+	.8byte	.LVL394
+	.2byte	0x2
+	.byte	0x30
+	.byte	0x9f
+	.8byte	0
+	.8byte	0
+.LLST123:
+	.8byte	.LVL335
+	.8byte	.LVL394
+	.2byte	0x6
+	.byte	0xc
+	.4byte	0x10001
+	.byte	0x9f
+	.8byte	0
+	.8byte	0
+.LLST124:
+	.8byte	.LVL339
+	.8byte	.LVL394
+	.2byte	0x6
+	.byte	0x11
+	.sleb128 -16776704
+	.byte	0x9f
+	.8byte	0
+	.8byte	0
+.LLST125:
+	.8byte	.LVL341
+	.8byte	.LVL394
+	.2byte	0x5
+	.byte	0x11
+	.sleb128 -65535
+	.byte	0x9f
+	.8byte	0
+	.8byte	0
+.LLST126:
+	.8byte	.LVL342
+	.8byte	.LVL394
+	.2byte	0x3
+	.byte	0x8
+	.byte	0xfb
+	.byte	0x9f
+	.8byte	0
+	.8byte	0
+.LLST127:
+	.8byte	.LVL343
+	.8byte	.LVL394
+	.2byte	0x2
+	.byte	0x30
+	.byte	0x9f
+	.8byte	0
+	.8byte	0
+.LLST128:
+	.8byte	.LVL344
+	.8byte	.LVL394
+	.2byte	0x6
+	.byte	0xc
+	.4byte	0x10001
+	.byte	0x9f
+	.8byte	0
+	.8byte	0
+.LLST129:
+	.8byte	.LVL348
+	.8byte	.LVL394
+	.2byte	0x5
+	.byte	0x11
+	.sleb128 -65534
+	.byte	0x9f
+	.8byte	0
+	.8byte	0
+.LLST130:
+	.8byte	.LVL350
+	.8byte	.LVL394
+	.2byte	0x3
+	.byte	0x8
+	.byte	0xc0
+	.byte	0x9f
+	.8byte	0
+	.8byte	0
+.LLST131:
+	.8byte	.LVL351
+	.8byte	.LVL354
+	.2byte	0x1
+	.byte	0x51
+	.8byte	0
+	.8byte	0
+.LLST132:
+	.8byte	.LVL352
+	.8byte	.LVL394
+	.2byte	0x1
+	.byte	0x6a
+	.8byte	0
+	.8byte	0
+.LLST133:
+	.8byte	.LVL353
+	.8byte	.LVL394
+	.2byte	0x6
+	.byte	0xc
+	.4byte	0x10001
+	.byte	0x9f
+	.8byte	0
+	.8byte	0
+.LLST134:
+	.8byte	.LVL358
+	.8byte	.LVL394
+	.2byte	0x6
+	.byte	0x11
+	.sleb128 -16762368
+	.byte	0x9f
+	.8byte	0
+	.8byte	0
+.LLST135:
+	.8byte	.LVL360
+	.8byte	.LVL394
+	.2byte	0x5
+	.byte	0x11
+	.sleb128 -65535
+	.byte	0x9f
+	.8byte	0
+	.8byte	0
+.LLST136:
+	.8byte	.LVL361
+	.8byte	.LVL394
+	.2byte	0x3
+	.byte	0x8
+	.byte	0xff
+	.byte	0x9f
+	.8byte	0
+	.8byte	0
+.LLST137:
+	.8byte	.LVL362
+	.8byte	.LVL394
+	.2byte	0x2
+	.byte	0x3a
+	.byte	0x9f
+	.8byte	0
+	.8byte	0
+.LLST138:
+	.8byte	.LVL363
+	.8byte	.LVL394
+	.2byte	0x6
+	.byte	0xc
+	.4byte	0x10001
+	.byte	0x9f
+	.8byte	0
+	.8byte	0
+.LLST139:
+	.8byte	.LVL367
+	.8byte	.LVL394
+	.2byte	0x5
+	.byte	0x11
+	.sleb128 -65534
+	.byte	0x9f
+	.8byte	0
+	.8byte	0
+.LLST140:
+	.8byte	.LVL369
+	.8byte	.LVL394
+	.2byte	0x2
+	.byte	0x31
+	.byte	0x9f
+	.8byte	0
+	.8byte	0
+.LLST141:
+	.8byte	.LVL370
+	.8byte	.LVL394
+	.2byte	0x3
+	.byte	0x8
+	.byte	0xbf
+	.byte	0x9f
+	.8byte	0
+	.8byte	0
+.LLST142:
+	.8byte	.LVL371
+	.8byte	.LVL394
+	.2byte	0x2
+	.byte	0x30
+	.byte	0x9f
+	.8byte	0
+	.8byte	0
+.LLST143:
+	.8byte	.LVL372
+	.8byte	.LVL394
+	.2byte	0x6
+	.byte	0xc
+	.4byte	0x10001
+	.byte	0x9f
+	.8byte	0
+	.8byte	0
+.LLST144:
+	.8byte	.LVL381
+	.8byte	.LVL394
+	.2byte	0x5
+	.byte	0x11
+	.sleb128 -65535
+	.byte	0x9f
+	.8byte	0
+	.8byte	0
+.LLST145:
+	.8byte	.LVL383
+	.8byte	.LVL394
+	.2byte	0x2
+	.byte	0x32
+	.byte	0x9f
+	.8byte	0
+	.8byte	0
+.LLST146:
+	.8byte	.LVL384
+	.8byte	.LVL394
+	.2byte	0x3
+	.byte	0x8
+	.byte	0xbf
+	.byte	0x9f
+	.8byte	0
+	.8byte	0
+.LLST147:
+	.8byte	.LVL385
+	.8byte	.LVL394
+	.2byte	0x6
+	.byte	0xc
+	.4byte	0x10001
+	.byte	0x9f
+	.8byte	0
+	.8byte	0
+.LLST148:
+	.8byte	.LVL273
+	.8byte	.LVL276
+	.2byte	0x1
+	.byte	0x67
+	.8byte	.LVL283
+	.8byte	.LVL284
+	.2byte	0x1
+	.byte	0x67
+	.8byte	0
+	.8byte	0
+.LLST149:
+	.8byte	.LVL273
+	.8byte	.LVL280
+	.2byte	0x1
+	.byte	0x69
+	.8byte	.LVL283
+	.8byte	.LVL285
+	.2byte	0x1
+	.byte	0x69
+	.8byte	0
+	.8byte	0
+.LLST150:
+	.8byte	.LVL273
+	.8byte	.LVL280
+	.2byte	0x1
+	.byte	0x6c
+	.8byte	.LVL283
+	.8byte	.LVL285
+	.2byte	0x1
+	.byte	0x6c
+	.8byte	0
+	.8byte	0
+.LLST151:
+	.8byte	.LVL273
+	.8byte	.LVL280
+	.2byte	0x1
+	.byte	0x68
+	.8byte	.LVL283
+	.8byte	.LVL285
+	.2byte	0x1
+	.byte	0x68
+	.8byte	0
+	.8byte	0
+.LLST152:
+	.8byte	.LVL275
+	.8byte	.LVL276
+	.2byte	0xd
+	.byte	0x8f
+	.sleb128 254
+	.byte	0x94
+	.byte	0x2
+	.byte	0x20
+	.byte	0x87
+	.sleb128 0
+	.byte	0x8
+	.byte	0xff
+	.byte	0x1a
+	.byte	0x1a
+	.byte	0x9f
+	.8byte	.LVL283
+	.8byte	.LVL284
+	.2byte	0xf
+	.byte	0x8f
+	.sleb128 254
+	.byte	0x94
+	.byte	0x2
+	.byte	0x20
+	.byte	0x87
+	.sleb128 0
+	.byte	0x8
+	.byte	0xff
+	.byte	0x1a
+	.byte	0x38
+	.byte	0x24
+	.byte	0x1a
+	.byte	0x9f
+	.8byte	0
+	.8byte	0
+.LLST153:
+	.8byte	.LVL274
+	.8byte	.LVL277
+	.2byte	0x1
+	.byte	0x50
+	.8byte	.LVL283
+	.8byte	.LVL285
+	.2byte	0x1
+	.byte	0x50
+	.8byte	0
+	.8byte	0
+.LLST30:
+	.8byte	.LVL66
+	.8byte	.LVL67-1
+	.2byte	0x1
+	.byte	0x50
+	.8byte	.LVL67-1
+	.8byte	.LFE269
+	.2byte	0x4
+	.byte	0xf3
+	.uleb128 0x1
+	.byte	0x50
+	.byte	0x9f
+	.8byte	0
+	.8byte	0
+.LLST31:
+	.8byte	.LVL66
+	.8byte	.LVL67-1
+	.2byte	0x1
+	.byte	0x51
+	.8byte	.LVL67-1
+	.8byte	.LVL72
+	.2byte	0x1
+	.byte	0x6a
+	.8byte	.LVL72
+	.8byte	.LVL73
+	.2byte	0x4
+	.byte	0xf3
+	.uleb128 0x1
+	.byte	0x51
+	.byte	0x9f
+	.8byte	.LVL73
+	.8byte	.LFE269
+	.2byte	0x1
+	.byte	0x6a
+	.8byte	0
+	.8byte	0
+.LLST32:
+	.8byte	.LVL66
+	.8byte	.LVL67-1
+	.2byte	0x1
+	.byte	0x52
+	.8byte	.LVL67-1
+	.8byte	.LVL67
+	.2byte	0x1
+	.byte	0x68
+	.8byte	.LVL67
+	.8byte	.LVL71
+	.2byte	0x1
+	.byte	0x64
+	.8byte	.LVL71
+	.8byte	.LVL73
+	.2byte	0x6
+	.byte	0xf3
+	.uleb128 0x1
+	.byte	0x52
+	.byte	0x31
+	.byte	0x26
+	.byte	0x9f
+	.8byte	.LVL73
+	.8byte	.LFE269
+	.2byte	0x1
+	.byte	0x64
+	.8byte	0
+	.8byte	0
+.LLST33:
+	.8byte	.LVL66
+	.8byte	.LVL67-1
+	.2byte	0x1
+	.byte	0x53
+	.8byte	.LVL67-1
+	.8byte	.LVL70
+	.2byte	0x1
+	.byte	0x65
+	.8byte	.LVL70
+	.8byte	.LFE269
+	.2byte	0x4
+	.byte	0xf3
+	.uleb128 0x1
+	.byte	0x53
+	.byte	0x9f
+	.8byte	0
+	.8byte	0
+.LLST34:
+	.8byte	.LVL66
+	.8byte	.LVL70
+	.2byte	0x2
+	.byte	0x30
+	.byte	0x9f
+	.8byte	.LVL73
+	.8byte	.LVL83
+	.2byte	0x2
+	.byte	0x30
+	.byte	0x9f
+	.8byte	.LVL83
+	.8byte	.LVL84
+	.2byte	0x1
+	.byte	0x50
+	.8byte	.LVL87
+	.8byte	.LVL88
+	.2byte	0x1
+	.byte	0x50
+	.8byte	.LVL104
+	.8byte	.LVL106
+	.2byte	0x1
+	.byte	0x50
+	.8byte	.LVL110
+	.8byte	.LVL112
+	.2byte	0x1
+	.byte	0x50
+	.8byte	.LVL130
+	.8byte	.LVL132
+	.2byte	0x1
+	.byte	0x50
+	.8byte	.LVL137
+	.8byte	.LVL139
+	.2byte	0x1
+	.byte	0x50
+	.8byte	.LVL146
+	.8byte	.LVL148
+	.2byte	0x1
+	.byte	0x50
+	.8byte	.LVL152
+	.8byte	.LVL154
+	.2byte	0x1
+	.byte	0x50
+	.8byte	.LVL160
+	.8byte	.LVL162
+	.2byte	0x1
+	.byte	0x50
+	.8byte	.LVL167
+	.8byte	.LVL168
+	.2byte	0x1
+	.byte	0x50
+	.8byte	.LVL169
+	.8byte	.LVL170
+	.2byte	0x1
+	.byte	0x50
+	.8byte	.LVL171
+	.8byte	.LVL172
+	.2byte	0x1
+	.byte	0x50
+	.8byte	.LVL176
+	.8byte	.LVL177
+	.2byte	0x1
+	.byte	0x50
+	.8byte	.LVL178
+	.8byte	.LVL179
+	.2byte	0x1
+	.byte	0x50
+	.8byte	.LVL180
+	.8byte	.LVL181
+	.2byte	0x1
+	.byte	0x50
+	.8byte	.LVL187
+	.8byte	.LVL189
+	.2byte	0x1
+	.byte	0x50
+	.8byte	.LVL193
+	.8byte	.LVL195
+	.2byte	0x1
+	.byte	0x50
+	.8byte	.LVL198
+	.8byte	.LFE269
+	.2byte	0x1
+	.byte	0x50
+	.8byte	0
+	.8byte	0
+.LLST35:
+	.8byte	.LVL67
+	.8byte	.LVL68
+	.2byte	0x1
+	.byte	0x50
+	.8byte	.LVL68
+	.8byte	.LVL69
+	.2byte	0x1
+	.byte	0x67
+	.8byte	.LVL73
+	.8byte	.LFE269
+	.2byte	0x1
+	.byte	0x67
+	.8byte	0
+	.8byte	0
+.LLST36:
+	.8byte	.LVL74
+	.8byte	.LVL86
+	.2byte	0x4
+	.byte	0x40
+	.byte	0x3c
+	.byte	0x24
+	.byte	0x9f
+	.8byte	.LVL87
+	.8byte	.LFE269
+	.2byte	0x4
+	.byte	0x40
+	.byte	0x3c
+	.byte	0x24
+	.byte	0x9f
+	.8byte	0
+	.8byte	0
+.LLST37:
+	.8byte	.LVL75
+	.8byte	.LVL86
+	.2byte	0x6
+	.byte	0xc
+	.4byte	0x40004
+	.byte	0x9f
+	.8byte	.LVL87
+	.8byte	.LFE269
+	.2byte	0x6
+	.byte	0xc
+	.4byte	0x40004
+	.byte	0x9f
+	.8byte	0
+	.8byte	0
+.LLST38:
+	.8byte	.LVL76
+	.8byte	.LVL86
+	.2byte	0x5
+	.byte	0x11
+	.sleb128 -65536
+	.byte	0x9f
+	.8byte	.LVL87
+	.8byte	.LFE269
+	.2byte	0x5
+	.byte	0x11
+	.sleb128 -65536
+	.byte	0x9f
+	.8byte	0
+	.8byte	0
+.LLST39:
+	.8byte	.LVL77
+	.8byte	.LVL86
+	.2byte	0x6
+	.byte	0x11
+	.sleb128 -16776704
+	.byte	0x9f
+	.8byte	.LVL87
+	.8byte	.LFE269
+	.2byte	0x6
+	.byte	0x11
+	.sleb128 -16776704
+	.byte	0x9f
+	.8byte	0
+	.8byte	0
+.LLST40:
+	.8byte	.LVL78
+	.8byte	.LVL86
+	.2byte	0x5
+	.byte	0x11
+	.sleb128 -65534
+	.byte	0x9f
+	.8byte	.LVL87
+	.8byte	.LFE269
+	.2byte	0x5
+	.byte	0x11
+	.sleb128 -65534
+	.byte	0x9f
+	.8byte	0
+	.8byte	0
+.LLST41:
+	.8byte	.LVL79
+	.8byte	.LVL86
+	.2byte	0x3
+	.byte	0x8
+	.byte	0xfc
+	.byte	0x9f
+	.8byte	.LVL87
+	.8byte	.LFE269
+	.2byte	0x3
+	.byte	0x8
+	.byte	0xfc
+	.byte	0x9f
+	.8byte	0
+	.8byte	0
+.LLST42:
+	.8byte	.LVL80
+	.8byte	.LVL86
+	.2byte	0x2
+	.byte	0x30
+	.byte	0x9f
+	.8byte	.LVL87
+	.8byte	.LFE269
+	.2byte	0x2
+	.byte	0x30
+	.byte	0x9f
+	.8byte	0
+	.8byte	0
+.LLST43:
+	.8byte	.LVL81
+	.8byte	.LVL86
+	.2byte	0x2
+	.byte	0x30
+	.byte	0x9f
+	.8byte	.LVL87
+	.8byte	.LFE269
+	.2byte	0x2
+	.byte	0x30
+	.byte	0x9f
+	.8byte	0
+	.8byte	0
+.LLST44:
+	.8byte	.LVL82
+	.8byte	.LVL86
+	.2byte	0x6
+	.byte	0xc
+	.4byte	0x10001
+	.byte	0x9f
+	.8byte	.LVL87
+	.8byte	.LFE269
+	.2byte	0x6
+	.byte	0xc
+	.4byte	0x10001
+	.byte	0x9f
+	.8byte	0
+	.8byte	0
+.LLST45:
+	.8byte	.LVL102
+	.8byte	.LVL104-1
+	.2byte	0x1
+	.byte	0x55
+	.8byte	.LVL104-1
+	.8byte	.LVL165
+	.2byte	0x6
+	.byte	0x88
+	.sleb128 0
+	.byte	0x9
+	.byte	0xf7
+	.byte	0x24
+	.byte	0x9f
+	.8byte	0
+	.8byte	0
+.LLST46:
+	.8byte	.LVL142
+	.8byte	.LVL145
+	.2byte	0x1
+	.byte	0x51
+	.8byte	0
+	.8byte	0
+.LLST47:
+	.8byte	.LVL143
+	.8byte	.LVL159
+	.2byte	0x1
+	.byte	0x65
+	.8byte	.LVL159
+	.8byte	.LFE269
+	.2byte	0xa
+	.byte	0xf3
+	.uleb128 0x1
+	.byte	0x53
+	.byte	0xa
+	.2byte	0xffff
+	.byte	0x1a
+	.byte	0x38
+	.byte	0x25
+	.byte	0x9f
+	.8byte	0
+	.8byte	0
+.LLST55:
+	.8byte	.LVL212
+	.8byte	.LVL213-1
+	.2byte	0x1
+	.byte	0x50
+	.8byte	.LVL213-1
+	.8byte	.LVL221
+	.2byte	0x1
+	.byte	0x66
+	.8byte	.LVL221
+	.8byte	.LVL227
+	.2byte	0x4
+	.byte	0xf3
+	.uleb128 0x1
+	.byte	0x50
+	.byte	0x9f
+	.8byte	.LVL227
+	.8byte	.LVL228
+	.2byte	0x1
+	.byte	0x66
+	.8byte	.LVL228
+	.8byte	.LFE268
+	.2byte	0x4
+	.byte	0xf3
+	.uleb128 0x1
+	.byte	0x50
+	.byte	0x9f
+	.8byte	0
+	.8byte	0
+.LLST56:
+	.8byte	.LVL212
+	.8byte	.LVL213-1
+	.2byte	0x1
+	.byte	0x51
+	.8byte	.LVL213-1
+	.8byte	.LVL217
+	.2byte	0x4
+	.byte	0xf3
+	.uleb128 0x1
+	.byte	0x51
+	.byte	0x9f
+	.8byte	.LVL217
+	.8byte	.LVL225
+	.2byte	0x1
+	.byte	0x63
+	.8byte	.LVL227
+	.8byte	.LFE268
+	.2byte	0x1
+	.byte	0x63
+	.8byte	0
+	.8byte	0
+.LLST57:
+	.8byte	.LVL212
+	.8byte	.LVL213-1
+	.2byte	0x1
+	.byte	0x52
+	.8byte	.LVL213-1
+	.8byte	.LVL222
+	.2byte	0x1
+	.byte	0x65
+	.8byte	.LVL222
+	.8byte	.LVL227
+	.2byte	0x4
+	.byte	0xf3
+	.uleb128 0x1
+	.byte	0x52
+	.byte	0x9f
+	.8byte	.LVL227
+	.8byte	.LVL228
+	.2byte	0x1
+	.byte	0x65
+	.8byte	.LVL228
+	.8byte	.LFE268
+	.2byte	0x4
+	.byte	0xf3
+	.uleb128 0x1
+	.byte	0x52
+	.byte	0x9f
+	.8byte	0
+	.8byte	0
+.LLST58:
+	.8byte	.LVL212
+	.8byte	.LVL213-1
+	.2byte	0x1
+	.byte	0x53
+	.8byte	.LVL213-1
+	.8byte	.LVL222
+	.2byte	0x1
+	.byte	0x67
+	.8byte	.LVL222
+	.8byte	.LVL226
+	.2byte	0x3
+	.byte	0x87
+	.sleb128 -1
+	.byte	0x9f
+	.8byte	.LVL227
+	.8byte	.LVL228
+	.2byte	0x1
+	.byte	0x67
+	.8byte	.LVL228
+	.8byte	.LVL244
+	.2byte	0x3
+	.byte	0x87
+	.sleb128 -1
+	.byte	0x9f
+	.8byte	.LVL244
+	.8byte	.LFE268
+	.2byte	0x1
+	.byte	0x67
+	.8byte	0
+	.8byte	0
+.LLST59:
+	.8byte	.LVL214
+	.8byte	.LVL215
+	.2byte	0x1
+	.byte	0x50
+	.8byte	.LVL215
+	.8byte	.LVL225
+	.2byte	0x1
+	.byte	0x64
+	.8byte	.LVL227
+	.8byte	.LFE268
+	.2byte	0x1
+	.byte	0x64
+	.8byte	0
+	.8byte	0
+.LLST60:
+	.8byte	.LVL217
+	.8byte	.LVL218
+	.2byte	0x1
+	.byte	0x50
+	.8byte	.LVL218
+	.8byte	.LVL226
+	.2byte	0x1
+	.byte	0x68
+	.8byte	.LVL227
+	.8byte	.LFE268
+	.2byte	0x1
+	.byte	0x68
+	.8byte	0
+	.8byte	0
+.LLST61:
+	.8byte	.LVL217
+	.8byte	.LVL224
+	.2byte	0x1
+	.byte	0x65
+	.8byte	.LVL227
+	.8byte	.LVL236
+	.2byte	0x1
+	.byte	0x65
+	.8byte	.LVL238
+	.8byte	.LVL241
+	.2byte	0x1
+	.byte	0x65
+	.8byte	.LVL241
+	.8byte	.LVL242
+	.2byte	0x3
+	.byte	0x85
+	.sleb128 1
+	.byte	0x9f
+	.8byte	.LVL242
+	.8byte	.LVL245
+	.2byte	0x3
+	.byte	0x85
+	.sleb128 2
+	.byte	0x9f
+	.8byte	.LVL245
+	.8byte	.LFE268
+	.2byte	0x1
+	.byte	0x65
+	.8byte	0
+	.8byte	0
+.LLST62:
+	.8byte	.LVL241
+	.8byte	.LVL243
+	.2byte	0x1
+	.byte	0x50
+	.8byte	0
+	.8byte	0
+.LLST63:
+	.8byte	.LVL217
+	.8byte	.LVL222
+	.2byte	0x2
+	.byte	0x30
+	.byte	0x9f
+	.8byte	.LVL222
+	.8byte	.LVL223
+	.2byte	0x1
+	.byte	0x66
+	.8byte	.LVL227
+	.8byte	.LVL228
+	.2byte	0x2
+	.byte	0x30
+	.byte	0x9f
+	.8byte	.LVL228
+	.8byte	.LVL234
+	.2byte	0x1
+	.byte	0x66
+	.8byte	.LVL234
+	.8byte	.LVL235
+	.2byte	0x1
+	.byte	0x50
+	.8byte	.LVL235
+	.8byte	.LVL238
+	.2byte	0x1
+	.byte	0x66
+	.8byte	.LVL238
+	.8byte	.LVL239
+	.2byte	0x1
+	.byte	0x50
+	.8byte	.LVL239
+	.8byte	.LFE268
+	.2byte	0x1
+	.byte	0x66
+	.8byte	0
+	.8byte	0
+.LLST64:
+	.8byte	.LVL220
+	.8byte	.LVL227
+	.2byte	0x6
+	.byte	0xc
+	.4byte	0x10001
+	.byte	0x9f
+	.8byte	.LVL228
+	.8byte	.LFE268
+	.2byte	0x6
+	.byte	0xc
+	.4byte	0x10001
+	.byte	0x9f
+	.8byte	0
+	.8byte	0
+.LLST65:
+	.8byte	.LVL229
+	.8byte	.LVL231
+	.2byte	0x1
+	.byte	0x51
+	.8byte	.LVL231
+	.8byte	.LVL232
+	.2byte	0x6
+	.byte	0x84
+	.sleb128 0
+	.byte	0x6
+	.byte	0x23
+	.uleb128 0x104
+	.8byte	.LVL232
+	.8byte	.LVL236
+	.2byte	0x8
+	.byte	0x83
+	.sleb128 -1
+	.byte	0x11
+	.sleb128 -65536
+	.byte	0x21
+	.byte	0x9f
+	.8byte	.LVL238
+	.8byte	.LFE268
+	.2byte	0x8
+	.byte	0x83
+	.sleb128 -1
+	.byte	0x11
+	.sleb128 -65536
+	.byte	0x21
+	.byte	0x9f
+	.8byte	0
+	.8byte	0
+.LLST66:
+	.8byte	.LVL230
+	.8byte	.LVL236
+	.2byte	0x6
+	.byte	0xc
+	.4byte	0x10001
+	.byte	0x9f
+	.8byte	.LVL238
+	.8byte	.LFE268
+	.2byte	0x6
+	.byte	0xc
+	.4byte	0x10001
+	.byte	0x9f
+	.8byte	0
+	.8byte	0
+.LLST68:
+	.8byte	.LVL240
+	.8byte	.LVL243
+	.2byte	0x1
+	.byte	0x50
+	.8byte	0
+	.8byte	0
+.LLST67:
+	.8byte	.LVL236
+	.8byte	.LVL238
+	.2byte	0x4
+	.byte	0x40
+	.byte	0x3c
+	.byte	0x24
+	.byte	0x9f
+	.8byte	0
+	.8byte	0
+.LLST0:
+	.8byte	.LVL0
+	.8byte	.LVL1
+	.2byte	0x1
+	.byte	0x51
+	.8byte	.LVL1
+	.8byte	.LFE263
+	.2byte	0x4
+	.byte	0xf3
+	.uleb128 0x1
+	.byte	0x51
+	.byte	0x9f
+	.8byte	0
+	.8byte	0
+.LLST16:
+	.8byte	.LVL28
+	.8byte	.LVL31
+	.2byte	0x1
+	.byte	0x50
+	.8byte	.LVL31
+	.8byte	.LFE262
+	.2byte	0x4
+	.byte	0xf3
+	.uleb128 0x1
+	.byte	0x50
+	.byte	0x9f
+	.8byte	0
+	.8byte	0
+.LLST17:
+	.8byte	.LVL28
+	.8byte	.LVL29
+	.2byte	0x1
+	.byte	0x51
+	.8byte	.LVL29
+	.8byte	.LVL33
+	.2byte	0x1
+	.byte	0x63
+	.8byte	.LVL33
+	.8byte	.LFE262
+	.2byte	0x4
+	.byte	0xf3
+	.uleb128 0x1
+	.byte	0x51
+	.byte	0x9f
+	.8byte	0
+	.8byte	0
+.LLST18:
+	.8byte	.LVL28
+	.8byte	.LVL32-1
+	.2byte	0x1
+	.byte	0x52
+	.8byte	.LVL32-1
+	.8byte	.LFE262
+	.2byte	0x4
+	.byte	0xf3
+	.uleb128 0x1
+	.byte	0x52
+	.byte	0x9f
+	.8byte	0
+	.8byte	0
+.LLST19:
+	.8byte	.LVL28
+	.8byte	.LVL32-1
+	.2byte	0x1
+	.byte	0x53
+	.8byte	.LVL32-1
+	.8byte	.LFE262
+	.2byte	0x4
+	.byte	0xf3
+	.uleb128 0x1
+	.byte	0x53
+	.byte	0x9f
+	.8byte	0
+	.8byte	0
+.LLST20:
+	.8byte	.LVL35
+	.8byte	.LVL38
+	.2byte	0x3
+	.byte	0x83
+	.sleb128 -1
+	.byte	0x9f
+	.8byte	.LVL38
+	.8byte	.LVL39
+	.2byte	0x1
+	.byte	0x63
+	.8byte	.LVL39
+	.8byte	.LVL41
+	.2byte	0x3
+	.byte	0x83
+	.sleb128 -1
+	.byte	0x9f
+	.8byte	.LVL41
+	.8byte	.LVL42
+	.2byte	0x1
+	.byte	0x63
+	.8byte	0
+	.8byte	0
+.LLST21:
+	.8byte	.LVL37
+	.8byte	.LVL40-1
+	.2byte	0x1
+	.byte	0x51
+	.8byte	.LVL41
+	.8byte	.LFE278
+	.2byte	0x1
+	.byte	0x51
+	.8byte	0
+	.8byte	0
+.LLST22:
+	.8byte	.LVL36
+	.8byte	.LVL40-1
+	.2byte	0x1
+	.byte	0x51
+	.8byte	.LVL41
+	.8byte	.LFE278
+	.2byte	0x1
+	.byte	0x51
+	.8byte	0
+	.8byte	0
+.LLST23:
+	.8byte	.LVL43
+	.8byte	.LVL46
+	.2byte	0x3
+	.byte	0x83
+	.sleb128 -1
+	.byte	0x9f
+	.8byte	.LVL46
+	.8byte	.LVL48
+	.2byte	0x1
+	.byte	0x63
+	.8byte	.LVL48
+	.8byte	.LVL50
+	.2byte	0x3
+	.byte	0x83
+	.sleb128 -1
+	.byte	0x9f
+	.8byte	.LVL51
+	.8byte	.LFE279
+	.2byte	0x1
+	.byte	0x63
+	.8byte	0
+	.8byte	0
+.LLST24:
+	.8byte	.LVL45
+	.8byte	.LVL47
+	.2byte	0x1
+	.byte	0x50
+	.8byte	.LVL49
+	.8byte	.LVL50
+	.2byte	0x1
+	.byte	0x50
+	.8byte	.LVL51
+	.8byte	.LVL52
+	.2byte	0x1
+	.byte	0x50
+	.8byte	0
+	.8byte	0
+.LLST25:
+	.8byte	.LVL44
+	.8byte	.LVL47
+	.2byte	0x1
+	.byte	0x50
+	.8byte	.LVL49
+	.8byte	.LVL50
+	.2byte	0x1
+	.byte	0x50
+	.8byte	.LVL51
+	.8byte	.LVL52
+	.2byte	0x1
+	.byte	0x50
+	.8byte	0
+	.8byte	0
+.LLST26:
+	.8byte	.LVL53
+	.8byte	.LVL54
+	.2byte	0x1
+	.byte	0x51
+	.8byte	.LVL54
+	.8byte	.LVL56
+	.2byte	0x1
+	.byte	0x63
+	.8byte	.LVL56
+	.8byte	.LVL58
+	.2byte	0x4
+	.byte	0xf3
+	.uleb128 0x1
+	.byte	0x51
+	.byte	0x9f
+	.8byte	.LVL58
+	.8byte	.LVL64
+	.2byte	0x1
+	.byte	0x63
+	.8byte	.LVL64
+	.8byte	.LFE280
+	.2byte	0x4
+	.byte	0xf3
+	.uleb128 0x1
+	.byte	0x51
+	.byte	0x9f
+	.8byte	0
+	.8byte	0
+.LLST27:
+	.8byte	.LVL54
+	.8byte	.LVL60
+	.2byte	0x1
+	.byte	0x64
+	.8byte	.LVL60
+	.8byte	.LVL61
+	.2byte	0x3
+	.byte	0x84
+	.sleb128 -1
+	.byte	0x9f
+	.8byte	.LVL61
+	.8byte	.LVL65
+	.2byte	0x1
+	.byte	0x64
+	.8byte	0
+	.8byte	0
+.LLST28:
+	.8byte	.LVL55
+	.8byte	.LVL57
+	.2byte	0x1
+	.byte	0x50
+	.8byte	.LVL58
+	.8byte	.LVL59
+	.2byte	0x1
+	.byte	0x50
+	.8byte	0
+	.8byte	0
+.LLST29:
+	.8byte	.LVL56
+	.8byte	.LVL58
+	.2byte	0x1
+	.byte	0x63
+	.8byte	0
+	.8byte	0
+.LLST48:
+	.8byte	.LVL199
+	.8byte	.LVL205-1
+	.2byte	0x1
+	.byte	0x50
+	.8byte	.LVL205-1
+	.8byte	.LVL211
+	.2byte	0x4
+	.byte	0xf3
+	.uleb128 0x1
+	.byte	0x50
+	.byte	0x9f
+	.8byte	.LVL211
+	.8byte	.LFE267
+	.2byte	0x1
+	.byte	0x50
+	.8byte	0
+	.8byte	0
+.LLST49:
+	.8byte	.LVL199
+	.8byte	.LVL203
+	.2byte	0x1
+	.byte	0x51
+	.8byte	.LVL203
+	.8byte	.LFE267
+	.2byte	0x4
+	.byte	0xf3
+	.uleb128 0x1
+	.byte	0x51
+	.byte	0x9f
+	.8byte	0
+	.8byte	0
+.LLST50:
+	.8byte	.LVL199
+	.8byte	.LVL206
+	.2byte	0x2
+	.byte	0x30
+	.byte	0x9f
+	.8byte	.LVL206
+	.8byte	.LVL208
+	.2byte	0x1
+	.byte	0x50
+	.8byte	.LVL208
+	.8byte	.LVL210
+	.2byte	0x1
+	.byte	0x63
+	.8byte	.LVL210
+	.8byte	.LVL211
+	.2byte	0x1
+	.byte	0x50
+	.8byte	.LVL211
+	.8byte	.LFE267
+	.2byte	0x2
+	.byte	0x30
+	.byte	0x9f
+	.8byte	0
+	.8byte	0
+.LLST51:
+	.8byte	.LVL202
+	.8byte	.LVL204
+	.2byte	0x2
+	.byte	0x30
+	.byte	0x9f
+	.8byte	0
+	.8byte	0
+.LLST52:
+	.8byte	.LVL204
+	.8byte	.LVL211
+	.2byte	0x6
+	.byte	0xc
+	.4byte	0x10001
+	.byte	0x9f
+	.8byte	0
+	.8byte	0
+.LLST53:
+	.8byte	.LVL207
+	.8byte	.LVL209
+	.2byte	0x4
+	.byte	0xf3
+	.uleb128 0x1
+	.byte	0x50
+	.byte	0x9f
+	.8byte	0
+	.8byte	0
+.LLST54:
+	.8byte	.LVL207
+	.8byte	.LVL209
+	.2byte	0x4
+	.byte	0xf3
+	.uleb128 0x1
+	.byte	0x51
+	.byte	0x9f
+	.8byte	0
+	.8byte	0
+	.section	.debug_aranges,"",@progbits
+	.4byte	0xec
+	.2byte	0x2
+	.4byte	.Ldebug_info0
+	.byte	0x8
+	.byte	0
+	.2byte	0
+	.2byte	0
+	.8byte	.LFB263
+	.8byte	.LFE263-.LFB263
+	.8byte	.LFB276
+	.8byte	.LFE276-.LFB276
+	.8byte	.LFB274
+	.8byte	.LFE274-.LFB274
+	.8byte	.LFB273
+	.8byte	.LFE273-.LFB273
+	.8byte	.LFB277
+	.8byte	.LFE277-.LFB277
+	.8byte	.LFB262
+	.8byte	.LFE262-.LFB262
+	.8byte	.LFB278
+	.8byte	.LFE278-.LFB278
+	.8byte	.LFB279
+	.8byte	.LFE279-.LFB279
+	.8byte	.LFB280
+	.8byte	.LFE280-.LFB280
+	.8byte	.LFB269
+	.8byte	.LFE269-.LFB269
+	.8byte	.LFB267
+	.8byte	.LFE267-.LFB267
+	.8byte	.LFB268
+	.8byte	.LFE268-.LFB268
+	.8byte	.LFB272
+	.8byte	.LFE272-.LFB272
+	.8byte	0
+	.8byte	0
+	.section	.debug_ranges,"",@progbits
+.Ldebug_ranges0:
+	.8byte	.LBB48
+	.8byte	.LBE48
+	.8byte	.LBB49
+	.8byte	.LBE49
+	.8byte	0
+	.8byte	0
+	.8byte	.LBB64
+	.8byte	.LBE64
+	.8byte	.LBB66
+	.8byte	.LBE66
+	.8byte	0
+	.8byte	0
+	.8byte	.LBB65
+	.8byte	.LBE65
+	.8byte	.LBB67
+	.8byte	.LBE67
+	.8byte	0
+	.8byte	0
+	.8byte	.LBB68
+	.8byte	.LBE68
+	.8byte	.LBB69
+	.8byte	.LBE69
+	.8byte	0
+	.8byte	0
+	.8byte	.LBB73
+	.8byte	.LBE73
+	.8byte	.LBB74
+	.8byte	.LBE74
+	.8byte	0
+	.8byte	0
+	.8byte	.LBB92
+	.8byte	.LBE92
+	.8byte	.LBB93
+	.8byte	.LBE93
+	.8byte	0
+	.8byte	0
+	.8byte	.LBB98
+	.8byte	.LBE98
+	.8byte	.LBB99
+	.8byte	.LBE99
+	.8byte	0
+	.8byte	0
+	.8byte	.LBB103
+	.8byte	.LBE103
+	.8byte	.LBB105
+	.8byte	.LBE105
+	.8byte	0
+	.8byte	0
+	.8byte	.LBB104
+	.8byte	.LBE104
+	.8byte	.LBB106
+	.8byte	.LBE106
+	.8byte	0
+	.8byte	0
+	.8byte	.LBB107
+	.8byte	.LBE107
+	.8byte	.LBB108
+	.8byte	.LBE108
+	.8byte	0
+	.8byte	0
+	.8byte	.LBB112
+	.8byte	.LBE112
+	.8byte	.LBB113
+	.8byte	.LBE113
+	.8byte	0
+	.8byte	0
+	.8byte	.LBB118
+	.8byte	.LBE118
+	.8byte	.LBB119
+	.8byte	.LBE119
+	.8byte	0
+	.8byte	0
+	.8byte	.LBB123
+	.8byte	.LBE123
+	.8byte	.LBB124
+	.8byte	.LBE124
+	.8byte	0
+	.8byte	0
+	.8byte	.LBB128
+	.8byte	.LBE128
+	.8byte	.LBB129
+	.8byte	.LBE129
+	.8byte	0
+	.8byte	0
+	.8byte	.LBB135
+	.8byte	.LBE135
+	.8byte	.LBB136
+	.8byte	.LBE136
+	.8byte	0
+	.8byte	0
+	.8byte	.LBB140
+	.8byte	.LBE140
+	.8byte	.LBB141
+	.8byte	.LBE141
+	.8byte	0
+	.8byte	0
+	.8byte	.LBB144
+	.8byte	.LBE144
+	.8byte	.LBB145
+	.8byte	.LBE145
+	.8byte	0
+	.8byte	0
+	.8byte	.LBB168
+	.8byte	.LBE168
+	.8byte	.LBB169
+	.8byte	.LBE169
+	.8byte	0
+	.8byte	0
+	.8byte	.LBB170
+	.8byte	.LBE170
+	.8byte	.LBB171
+	.8byte	.LBE171
+	.8byte	0
+	.8byte	0
+	.8byte	.LBB172
+	.8byte	.LBE172
+	.8byte	.LBB173
+	.8byte	.LBE173
+	.8byte	0
+	.8byte	0
+	.8byte	.LBB174
+	.8byte	.LBE174
+	.8byte	.LBB175
+	.8byte	.LBE175
+	.8byte	0
+	.8byte	0
+	.8byte	.LBB244
+	.8byte	.LBE244
+	.8byte	.LBB324
+	.8byte	.LBE324
+	.8byte	.LBB325
+	.8byte	.LBE325
+	.8byte	.LBB335
+	.8byte	.LBE335
+	.8byte	.LBB336
+	.8byte	.LBE336
+	.8byte	0
+	.8byte	0
+	.8byte	.LBB264
+	.8byte	.LBE264
+	.8byte	.LBB266
+	.8byte	.LBE266
+	.8byte	0
+	.8byte	0
+	.8byte	.LBB265
+	.8byte	.LBE265
+	.8byte	.LBB267
+	.8byte	.LBE267
+	.8byte	0
+	.8byte	0
+	.8byte	.LBB268
+	.8byte	.LBE268
+	.8byte	.LBB269
+	.8byte	.LBE269
+	.8byte	0
+	.8byte	0
+	.8byte	.LBB270
+	.8byte	.LBE270
+	.8byte	.LBB271
+	.8byte	.LBE271
+	.8byte	0
+	.8byte	0
+	.8byte	.LBB288
+	.8byte	.LBE288
+	.8byte	.LBB289
+	.8byte	.LBE289
+	.8byte	0
+	.8byte	0
+	.8byte	.LBB294
+	.8byte	.LBE294
+	.8byte	.LBB295
+	.8byte	.LBE295
+	.8byte	0
+	.8byte	0
+	.8byte	.LBB298
+	.8byte	.LBE298
+	.8byte	.LBB300
+	.8byte	.LBE300
+	.8byte	0
+	.8byte	0
+	.8byte	.LBB299
+	.8byte	.LBE299
+	.8byte	.LBB301
+	.8byte	.LBE301
+	.8byte	0
+	.8byte	0
+	.8byte	.LBB302
+	.8byte	.LBE302
+	.8byte	.LBB303
+	.8byte	.LBE303
+	.8byte	0
+	.8byte	0
+	.8byte	.LBB308
+	.8byte	.LBE308
+	.8byte	.LBB309
+	.8byte	.LBE309
+	.8byte	0
+	.8byte	0
+	.8byte	.LBB314
+	.8byte	.LBE314
+	.8byte	.LBB315
+	.8byte	.LBE315
+	.8byte	0
+	.8byte	0
+	.8byte	.LBB326
+	.8byte	.LBE326
+	.8byte	.LBB332
+	.8byte	.LBE332
+	.8byte	.LBB333
+	.8byte	.LBE333
+	.8byte	.LBB334
+	.8byte	.LBE334
+	.8byte	.LBB337
+	.8byte	.LBE337
+	.8byte	0
+	.8byte	0
+	.8byte	.LFB263
+	.8byte	.LFE263
+	.8byte	.LFB276
+	.8byte	.LFE276
+	.8byte	.LFB274
+	.8byte	.LFE274
+	.8byte	.LFB273
+	.8byte	.LFE273
+	.8byte	.LFB277
+	.8byte	.LFE277
+	.8byte	.LFB262
+	.8byte	.LFE262
+	.8byte	.LFB278
+	.8byte	.LFE278
+	.8byte	.LFB279
+	.8byte	.LFE279
+	.8byte	.LFB280
+	.8byte	.LFE280
+	.8byte	.LFB269
+	.8byte	.LFE269
+	.8byte	.LFB267
+	.8byte	.LFE267
+	.8byte	.LFB268
+	.8byte	.LFE268
+	.8byte	.LFB272
+	.8byte	.LFE272
+	.8byte	0
+	.8byte	0
+	.section	.debug_line,"",@progbits
+.Ldebug_line0:
+	.section	.debug_str,"MS",@progbits,1
+.LASF222:
+	.string	"UCLASS_SERIAL"
+.LASF320:
+	.string	"gd_t"
+.LASF15:
+	.string	"long int"
+.LASF39:
+	.string	"uclass_node"
+.LASF423:
+	.string	"request"
+.LASF313:
+	.string	"phandle"
+.LASF53:
+	.string	"flash_id"
+.LASF405:
+	.string	"misc_ops"
+.LASF377:
+	.string	"mem_malloc_start"
+.LASF428:
+	.string	"rk3562_secure_otp_write"
+.LASF333:
+	.string	"net_hostname"
+.LASF28:
+	.string	"name"
+.LASF249:
+	.string	"UCLASS_ETH_PHY"
+.LASF229:
+	.string	"UCLASS_THERMAL"
+.LASF60:
+	.string	"base"
+.LASF355:
+	.string	"NETLOOP_RESTART"
+.LASF288:
+	.string	"new_gd"
+.LASF349:
+	.string	"net_boot_file_size"
+.LASF134:
+	.string	"fit_hdr_os"
+.LASF181:
+	.string	"UCLASS_FIRMWARE"
+.LASF458:
+	.string	"udelay"
+.LASF142:
+	.string	"fit_noffset_fdt"
+.LASF74:
+	.string	"bi_dsp_freq"
+.LASF304:
+	.string	"malloc_ptr"
+.LASF91:
+	.string	"_datarellocal_start_ofs"
+.LASF94:
+	.string	"fdt32_t"
+.LASF146:
+	.string	"rd_start"
+.LASF372:
+	.string	"property"
+.LASF266:
+	.string	"tlb_emerg"
+.LASF78:
+	.string	"bi_enetaddr"
+.LASF291:
+	.string	"uclass_root"
+.LASF188:
+	.string	"UCLASS_IRQ"
+.LASF421:
+	.string	"rockchip_secure_otp_ofdata_to_platdata"
+.LASF438:
+	.string	"buffer"
+.LASF235:
+	.string	"UCLASS_USB_HUB"
+.LASF230:
+	.string	"UCLASS_TIMER"
+.LASF42:
+	.string	"flags"
+.LASF139:
+	.string	"fit_noffset_rd"
+.LASF270:
+	.string	"baudrate"
+.LASF335:
+	.string	"net_ethaddr"
+.LASF301:
+	.string	"timebase_l"
+.LASF21:
+	.string	"errno"
+.LASF32:
+	.string	"node"
+.LASF360:
+	.string	"bind"
+.LASF456:
+	.string	"printf"
+.LASF402:
+	.string	"DECOM_ZLIB"
+.LASF8:
+	.string	"unsigned int"
+.LASF47:
+	.string	"next"
+.LASF101:
+	.string	"version"
+.LASF397:
+	.string	"per_device_platdata_auto_alloc_size"
+.LASF131:
+	.string	"legacy_hdr_os_copy"
+.LASF195:
+	.string	"UCLASS_MMC"
+.LASF290:
+	.string	"dm_root_f"
+.LASF341:
+	.string	"net_rx_packet"
+.LASF38:
+	.string	"parent_priv"
+.LASF176:
+	.string	"UCLASS_CROS_EC"
+.LASF311:
+	.string	"console_evt"
+.LASF191:
+	.string	"UCLASS_LPC"
+.LASF105:
+	.string	"size_dt_struct"
+.LASF380:
+	.string	"p_current"
+.LASF345:
+	.string	"net_our_vlan"
+.LASF22:
+	.string	"___strtok"
+.LASF67:
+	.string	"bi_memsize"
+.LASF121:
+	.string	"image_info"
+.LASF200:
+	.string	"UCLASS_NVME"
+.LASF156:
+	.string	"bootm_headers_t"
+.LASF253:
+	.string	"UCLASS_RNG"
+.LASF250:
+	.string	"UCLASS_MDIO"
+.LASF187:
+	.string	"UCLASS_IDE"
+.LASF274:
+	.string	"bus_clk"
+.LASF378:
+	.string	"mem_malloc_end"
+.LASF225:
+	.string	"UCLASS_SPI_FLASH"
+.LASF189:
+	.string	"UCLASS_KEYBOARD"
+.LASF72:
+	.string	"bi_sramsize"
+.LASF185:
+	.string	"UCLASS_I2C_MUX"
+.LASF298:
+	.string	"fdt_blob_kern"
+.LASF278:
+	.string	"env_addr"
+.LASF48:
+	.string	"prev"
+.LASF227:
+	.string	"UCLASS_SYSCON"
+.LASF171:
+	.string	"UCLASS_BLK"
+.LASF212:
+	.string	"UCLASS_PWRSEQ"
+.LASF132:
+	.string	"legacy_hdr_valid"
+.LASF265:
+	.string	"tlb_fillptr"
+.LASF82:
+	.string	"bi_arch_number"
+.LASF324:
+	.string	"load_addr"
+.LASF292:
+	.string	"fdt_blob"
+.LASF329:
+	.string	"net_gateway"
+.LASF166:
+	.string	"UCLASS_PCI_EMUL"
+.LASF425:
+	.string	"offset"
+.LASF350:
+	.string	"net_boot_file_expected_size_in_blocks"
+.LASF404:
+	.string	"OTP_NS"
+.LASF415:
+	.string	"spl_rockchip_otp_start"
+.LASF206:
+	.string	"UCLASS_PHY"
+.LASF455:
+	.string	"dev_get_driver_data"
+.LASF3:
+	.string	"signed char"
+.LASF203:
+	.string	"UCLASS_PCH"
+.LASF100:
+	.string	"off_mem_rsvmap"
+.LASF163:
+	.string	"UCLASS_TEST_PROBE"
+.LASF149:
+	.string	"ft_len"
+.LASF19:
+	.string	"uint32_t"
+.LASF385:
+	.string	"udevice_id"
+.LASF326:
+	.string	"save_size"
+.LASF440:
+	.string	"read_end"
+.LASF379:
+	.string	"mem_malloc_brk"
+.LASF436:
+	.string	"rk3562_secure_otp_write_2_bytes_noecc"
+.LASF143:
+	.string	"fit_hdr_setup"
+.LASF300:
+	.string	"timebase_h"
+.LASF160:
+	.string	"UCLASS_TEST"
+.LASF87:
+	.string	"IRQ_STACK_START"
+.LASF420:
+	.string	"_u_boot_list_2_driver_2_rockchip_secure_otp"
+.LASF70:
+	.string	"bi_flashoffset"
+.LASF201:
+	.string	"UCLASS_PANEL"
+.LASF267:
+	.string	"pre_serial"
+.LASF431:
+	.string	"rockchip_secure_otp_capability"
+.LASF36:
+	.string	"uclass"
+.LASF162:
+	.string	"UCLASS_TEST_BUS"
+.LASF461:
+	.string	"/home/lxh/uboot/u-boot"
+.LASF239:
+	.string	"UCLASS_VIDEO_CONSOLE"
+.LASF361:
+	.string	"probe"
+.LASF10:
+	.string	"long long unsigned int"
+.LASF261:
+	.string	"lastinc"
+.LASF389:
+	.string	"post_bind"
+.LASF285:
+	.string	"irq_sp"
+.LASF327:
+	.string	"in_addr"
+.LASF197:
+	.string	"UCLASS_MTD"
+.LASF216:
+	.string	"UCLASS_RESET"
+.LASF117:
+	.string	"ih_type"
+.LASF80:
+	.string	"bi_intfreq"
+.LASF172:
+	.string	"UCLASS_CLK"
+.LASF351:
+	.string	"net_ping_ip"
+.LASF79:
+	.string	"bi_ethspeed"
+.LASF376:
+	.string	"ofnode"
+.LASF231:
+	.string	"UCLASS_TPM"
+.LASF316:
+	.string	"child"
+.LASF444:
+	.string	"rockchip_secure_otp_wait_flag"
+.LASF457:
+	.string	"malloc_simple"
+.LASF59:
+	.string	"lmb_property"
+.LASF269:
+	.string	"enable"
+.LASF429:
+	.string	"data_byte"
+.LASF263:
+	.string	"tlb_addr"
+.LASF374:
+	.string	"value"
+.LASF184:
+	.string	"UCLASS_I2C_GENERIC"
+.LASF99:
+	.string	"off_dt_strings"
+.LASF419:
+	.string	"rockchip_otp_ids"
+.LASF103:
+	.string	"boot_cpuid_phys"
+.LASF362:
+	.string	"remove"
+.LASF133:
+	.string	"fit_uname_cfg"
+.LASF106:
+	.string	"working_fdt"
+.LASF317:
+	.string	"sibling"
+.LASF460:
+	.string	"drivers/misc/rk3562-secure-otp.c"
+.LASF118:
+	.string	"ih_comp"
+.LASF202:
+	.string	"UCLASS_PANEL_BACKLIGHT"
+.LASF81:
+	.string	"bi_busfreq"
+.LASF297:
+	.string	"ufdt_blob"
+.LASF280:
+	.string	"ram_top"
+.LASF272:
+	.string	"global_data"
+.LASF328:
+	.string	"s_addr"
+.LASF127:
+	.string	"arch"
+.LASF226:
+	.string	"UCLASS_SPI_GENERIC"
+.LASF318:
+	.string	"mtd_info"
+.LASF95:
+	.string	"fdt_header"
+.LASF177:
+	.string	"UCLASS_DISPLAY"
+.LASF391:
+	.string	"pre_probe"
+.LASF353:
+	.string	"net_loop_state"
+.LASF55:
+	.string	"protect"
+.LASF347:
+	.string	"net_restart_wrap"
+.LASF307:
+	.string	"video_bottom"
+.LASF439:
+	.string	"write_end"
+.LASF71:
+	.string	"bi_sramstart"
+.LASF224:
+	.string	"UCLASS_SPMI"
+.LASF220:
+	.string	"UCLASS_SCMI_AGENT"
+.LASF23:
+	.string	"_Bool"
+.LASF12:
+	.string	"phys_size_t"
+.LASF45:
+	.string	"udevice"
+.LASF37:
+	.string	"uclass_priv"
+.LASF123:
+	.string	"image_len"
+.LASF319:
+	.string	"jt_funcs"
+.LASF409:
+	.string	"call"
+.LASF331:
+	.string	"net_dns_server"
+.LASF398:
+	.string	"__invalid_size_argument_for_IOC"
+.LASF57:
+	.string	"flash_info"
+.LASF463:
+	.string	"free"
+.LASF289:
+	.string	"dm_root"
+.LASF108:
+	.string	"ih_magic"
+.LASF218:
+	.string	"UCLASS_RAMDISK"
+.LASF124:
+	.string	"load"
+.LASF26:
+	.string	"_binary_u_boot_bin_end"
+.LASF141:
+	.string	"fit_uname_fdt"
+.LASF190:
+	.string	"UCLASS_LED"
+.LASF293:
+	.string	"new_fdt"
+.LASF408:
+	.string	"ioctl"
+.LASF434:
+	.string	"rk3562_secure_otp_write_byte_noecc"
+.LASF170:
+	.string	"UCLASS_AHCI"
+.LASF41:
+	.string	"sibling_node"
+.LASF334:
+	.string	"net_root_path"
+.LASF49:
+	.string	"block_drvr"
+.LASF9:
+	.string	"long long int"
+.LASF251:
+	.string	"UCLASS_EBC"
+.LASF325:
+	.string	"save_addr"
+.LASF35:
+	.string	"priv"
+.LASF209:
+	.string	"UCLASS_PMIC"
+.LASF303:
+	.string	"malloc_limit"
+.LASF14:
+	.string	"char"
+.LASF414:
+	.string	"secure_otp_data"
+.LASF180:
+	.string	"UCLASS_GPIO"
+.LASF44:
+	.string	"ide_bus_offset"
+.LASF255:
+	.string	"UCLASS_PD"
+.LASF52:
+	.string	"sector_count"
+.LASF145:
+	.string	"fit_noffset_setup"
+.LASF122:
+	.string	"image_start"
+.LASF56:
+	.string	"flash_info_t"
+.LASF228:
+	.string	"UCLASS_SYSRESET"
+.LASF115:
+	.string	"ih_os"
+.LASF31:
+	.string	"uclass_platdata"
+.LASF337:
+	.string	"net_ip"
+.LASF459:
+	.ascii	"GNU C11 6.3.1 201"
+	.string	"70404 -mstrict-align -march=armv8-a+nosimd -mlittle-endian -mabi=lp64 -g -Os -fno-builtin -ffreestanding -fshort-wchar -fno-stack-protector -fno-delete-null-pointer-checks -fstack-usage -ffunction-sections -fdata-sections -ffixed-r9 -fno-common -ffixed-x18"
+.LASF306:
+	.string	"video_top"
+.LASF258:
+	.string	"LOGF_MAX_CATEGORIES"
+.LASF358:
+	.string	"net_state"
+.LASF286:
+	.string	"start_addr_sp"
+.LASF135:
+	.string	"fit_uname_os"
+.LASF18:
+	.string	"uint8_t"
+.LASF7:
+	.string	"__u32"
+.LASF363:
+	.string	"unbind"
+.LASF284:
+	.string	"mon_len"
+.LASF357:
+	.string	"NETLOOP_FAIL"
+.LASF418:
+	.string	"rk3562_data"
+.LASF365:
+	.string	"child_post_bind"
+.LASF314:
+	.string	"full_name"
+.LASF214:
+	.string	"UCLASS_REGULATOR"
+.LASF183:
+	.string	"UCLASS_I2C_EEPROM"
+.LASF371:
+	.string	"per_child_platdata_auto_alloc_size"
+.LASF445:
+	.string	"rockchip_secure_otp_wait_status"
+.LASF129:
+	.string	"bootm_headers"
+.LASF276:
+	.string	"mem_clk"
+.LASF359:
+	.string	"of_match"
+.LASF352:
+	.string	"uclass_id"
+.LASF321:
+	.string	"monitor_flash_len"
+.LASF367:
+	.string	"child_post_remove"
+.LASF370:
+	.string	"per_child_auto_alloc_size"
+.LASF213:
+	.string	"UCLASS_RAM"
+.LASF451:
+	.string	"rk3562_spl_rockchip_otp_start"
+.LASF364:
+	.string	"ofdata_to_platdata"
+.LASF208:
+	.string	"UCLASS_PINCTRL"
+.LASF29:
+	.string	"platdata"
+.LASF260:
+	.string	"timer_rate_hz"
+.LASF435:
+	.string	"data_2b"
+.LASF90:
+	.string	"_datarelrolocal_start_ofs"
+.LASF164:
+	.string	"UCLASS_SPI_EMUL"
+.LASF196:
+	.string	"UCLASS_MOD_EXP"
+.LASF97:
+	.string	"totalsize"
+.LASF388:
+	.string	"uclass_driver"
+.LASF73:
+	.string	"bi_arm_freq"
+.LASF199:
+	.string	"UCLASS_NORTHBRIDGE"
+.LASF236:
+	.string	"UCLASS_USB_GADGET_GENERIC"
+.LASF120:
+	.string	"image_header_t"
+.LASF68:
+	.string	"bi_flashstart"
+.LASF92:
+	.string	"_datarelro_start_ofs"
+.LASF13:
+	.string	"sizetype"
+.LASF386:
+	.string	"compatible"
+.LASF165:
+	.string	"UCLASS_I2C_EMUL"
+.LASF275:
+	.string	"pci_clk"
+.LASF173:
+	.string	"UCLASS_CPU"
+.LASF344:
+	.string	"net_null_ethaddr"
+.LASF86:
+	.string	"bd_t"
+.LASF174:
+	.string	"UCLASS_AMP"
+.LASF244:
+	.string	"UCLASS_RC"
+.LASF454:
+	.string	"dev_read_u32_default"
+.LASF338:
+	.string	"net_server_ip"
+.LASF281:
+	.string	"ram_top_ext_size"
+.LASF51:
+	.string	"size"
+.LASF58:
+	.string	"long double"
+.LASF76:
+	.string	"bi_bootflags"
+.LASF83:
+	.string	"bi_boot_params"
+.LASF442:
+	.string	"rockchip_secure_otp_check_flag"
+.LASF449:
+	.string	"mask"
+.LASF247:
+	.string	"UCLASS_IO_DOMAIN"
+.LASF25:
+	.string	"_binary_u_boot_bin_start"
+.LASF159:
+	.string	"UCLASS_DEMO"
+.LASF107:
+	.string	"image_header"
+.LASF102:
+	.string	"last_comp_version"
+.LASF322:
+	.string	"__dtb_dt_begin"
+.LASF252:
+	.string	"UCLASS_EINK_DISPLAY"
+.LASF310:
+	.string	"sys_start_tick"
+.LASF168:
+	.string	"UCLASS_SIMPLE_BUS"
+.LASF179:
+	.string	"UCLASS_ETH"
+.LASF153:
+	.string	"cmdline_end"
+.LASF75:
+	.string	"bi_ddr_freq"
+.LASF98:
+	.string	"off_dt_struct"
+.LASF441:
+	.string	"rockchip_secure_otp_ecc_enable"
+.LASF232:
+	.string	"UCLASS_UFS"
+.LASF309:
+	.string	"serial"
+.LASF387:
+	.string	"data"
+.LASF330:
+	.string	"net_netmask"
+.LASF323:
+	.string	"__dtb_dt_spl_begin"
+.LASF65:
+	.string	"bd_info"
+.LASF152:
+	.string	"cmdline_start"
+.LASF157:
+	.string	"images"
+.LASF268:
+	.string	"using_pre_serial"
+.LASF130:
+	.string	"legacy_hdr_os"
+.LASF426:
+	.string	"otp_data"
+.LASF192:
+	.string	"UCLASS_MAILBOX"
+.LASF217:
+	.string	"UCLASS_RKNAND"
+.LASF138:
+	.string	"fit_uname_rd"
+.LASF437:
+	.string	"rk3562_secure_otp_read"
+.LASF77:
+	.string	"bi_ip_addr"
+.LASF308:
+	.string	"pm_ctx_phys"
+.LASF296:
+	.string	"of_root_f"
+.LASF282:
+	.string	"relocaddr"
+.LASF33:
+	.string	"driver_data"
+.LASF0:
+	.string	"unsigned char"
+.LASF11:
+	.string	"phys_addr_t"
+.LASF390:
+	.string	"pre_unbind"
+.LASF432:
+	.string	"rk3562_secure_otp_write_2_bytes"
+.LASF339:
+	.string	"net_tx_packet"
+.LASF396:
+	.string	"per_device_auto_alloc_size"
+.LASF150:
+	.string	"initrd_start"
+.LASF34:
+	.string	"parent"
+.LASF381:
+	.string	"current"
+.LASF6:
+	.string	"short int"
+.LASF302:
+	.string	"malloc_base"
+.LASF116:
+	.string	"ih_arch"
+.LASF401:
+	.string	"DECOM_GZIP"
+.LASF315:
+	.string	"properties"
+.LASF241:
+	.string	"UCLASS_WDT"
+.LASF443:
+	.string	"delay"
+.LASF373:
+	.string	"length"
+.LASF332:
+	.string	"net_nis_domain"
+.LASF112:
+	.string	"ih_load"
+.LASF299:
+	.string	"env_buf"
+.LASF356:
+	.string	"NETLOOP_SUCCESS"
+.LASF167:
+	.string	"UCLASS_USB_EMUL"
+.LASF430:
+	.string	"temp"
+.LASF161:
+	.string	"UCLASS_TEST_FDT"
+.LASF294:
+	.string	"fdt_size"
+.LASF416:
+	.string	"spl_rockchip_otp_stop"
+.LASF446:
+	.string	"flag"
+.LASF17:
+	.string	"ulong"
+.LASF110:
+	.string	"ih_time"
+.LASF111:
+	.string	"ih_size"
+.LASF178:
+	.string	"UCLASS_DMA"
+.LASF254:
+	.string	"UCLASS_DMC"
+.LASF215:
+	.string	"UCLASS_REMOTEPROC"
+.LASF354:
+	.string	"NETLOOP_CONTINUE"
+.LASF219:
+	.string	"UCLASS_RTC"
+.LASF262:
+	.string	"timer_reset_value"
+.LASF295:
+	.string	"of_root"
+.LASF340:
+	.string	"net_rx_packets"
+.LASF194:
+	.string	"UCLASS_MISC"
+.LASF62:
+	.string	"region"
+.LASF148:
+	.string	"ft_addr"
+.LASF417:
+	.string	"rockchip_secure_otp_ops"
+.LASF406:
+	.string	"read"
+.LASF54:
+	.string	"start"
+.LASF144:
+	.string	"fit_uname_setup"
+.LASF114:
+	.string	"ih_dcrc"
+.LASF24:
+	.string	"image_base"
+.LASF393:
+	.string	"pre_remove"
+.LASF158:
+	.string	"UCLASS_ROOT"
+.LASF96:
+	.string	"magic"
+.LASF242:
+	.string	"UCLASS_FG"
+.LASF137:
+	.string	"fit_hdr_rd"
+.LASF140:
+	.string	"fit_hdr_fdt"
+.LASF113:
+	.string	"ih_ep"
+.LASF287:
+	.string	"reloc_off"
+.LASF394:
+	.string	"init"
+.LASF240:
+	.string	"UCLASS_VIDEO_CRTC"
+.LASF237:
+	.string	"UCLASS_VIDEO"
+.LASF447:
+	.string	"secure_conf"
+.LASF205:
+	.string	"UCLASS_PCI_GENERIC"
+.LASF1:
+	.string	"long unsigned int"
+.LASF5:
+	.string	"__u8"
+.LASF375:
+	.string	"of_offset"
+.LASF259:
+	.string	"arch_global_data"
+.LASF89:
+	.string	"_datarel_start_ofs"
+.LASF312:
+	.string	"device_node"
+.LASF264:
+	.string	"tlb_size"
+.LASF66:
+	.string	"bi_memstart"
+.LASF109:
+	.string	"ih_hcrc"
+.LASF104:
+	.string	"size_dt_strings"
+.LASF128:
+	.string	"image_info_t"
+.LASF63:
+	.string	"memory"
+.LASF27:
+	.string	"driver"
+.LASF147:
+	.string	"rd_end"
+.LASF193:
+	.string	"UCLASS_MASS_STORAGE"
+.LASF450:
+	.string	"rk3562_spl_rockchip_otp_stop"
+.LASF151:
+	.string	"initrd_end"
+.LASF210:
+	.string	"UCLASS_PWM"
+.LASF93:
+	.string	"IRQ_STACK_START_IN"
+.LASF84:
+	.string	"bi_andr_version"
+.LASF126:
+	.string	"type"
+.LASF342:
+	.string	"net_rx_packet_len"
+.LASF384:
+	.string	"u_boot_dev_head"
+.LASF427:
+	.string	"secure_otp_read"
+.LASF221:
+	.string	"UCLASS_SCSI"
+.LASF16:
+	.string	"ushort"
+.LASF204:
+	.string	"UCLASS_PCI"
+.LASF198:
+	.string	"UCLASS_NOP"
+.LASF395:
+	.string	"destroy"
+.LASF448:
+	.string	"otp_cru_rst"
+.LASF248:
+	.string	"UCLASS_CRYPTO"
+.LASF453:
+	.string	"dev_read_addr_ptr"
+.LASF277:
+	.string	"have_console"
+.LASF400:
+	.string	"DECOM_LZ4"
+.LASF175:
+	.string	"UCLASS_CODEC"
+.LASF382:
+	.string	"uc_drv"
+.LASF233:
+	.string	"UCLASS_USB"
+.LASF305:
+	.string	"cur_serial_dev"
+.LASF271:
+	.string	"addr"
+.LASF46:
+	.string	"list_head"
+.LASF155:
+	.string	"state"
+.LASF20:
+	.string	"__be32"
+.LASF207:
+	.string	"UCLASS_PINCONFIG"
+.LASF234:
+	.string	"UCLASS_USB_DEV_GENERIC"
+.LASF343:
+	.string	"net_bcast_ethaddr"
+.LASF136:
+	.string	"fit_noffset_os"
+.LASF223:
+	.string	"UCLASS_SPI"
+.LASF336:
+	.string	"net_server_ethaddr"
+.LASF256:
+	.string	"UCLASS_COUNT"
+.LASF279:
+	.string	"env_valid"
+.LASF246:
+	.string	"UCLASS_DVFS"
+.LASF413:
+	.string	"otp_cru_rst_base"
+.LASF40:
+	.string	"child_head"
+.LASF50:
+	.string	"select_hwpart"
+.LASF4:
+	.string	"uchar"
+.LASF69:
+	.string	"bi_flashsize"
+.LASF383:
+	.string	"dev_head"
+.LASF410:
+	.string	"rockchip_otp_platdata"
+.LASF2:
+	.string	"short unsigned int"
+.LASF392:
+	.string	"post_probe"
+.LASF366:
+	.string	"child_pre_probe"
+.LASF422:
+	.string	"secure_otp_ioctl"
+.LASF348:
+	.string	"net_boot_file_name"
+.LASF407:
+	.string	"write"
+.LASF245:
+	.string	"UCLASS_CHARGE_DISPLAY"
+.LASF257:
+	.string	"UCLASS_INVALID"
+.LASF403:
+	.string	"OTP_S"
+.LASF433:
+	.string	"__func__"
+.LASF64:
+	.string	"reserved"
+.LASF182:
+	.string	"UCLASS_I2C"
+.LASF119:
+	.string	"ih_name"
+.LASF462:
+	.string	"ofnode_union"
+.LASF412:
+	.string	"otp_mask_base"
+.LASF169:
+	.string	"UCLASS_ADC"
+.LASF43:
+	.string	"req_seq"
+.LASF283:
+	.string	"ram_size"
+.LASF452:
+	.string	"dev_get_platdata"
+.LASF186:
+	.string	"UCLASS_I2S"
+.LASF368:
+	.string	"priv_auto_alloc_size"
+.LASF30:
+	.string	"parent_platdata"
+.LASF411:
+	.string	"secure_conf_base"
+.LASF154:
+	.string	"verify"
+.LASF88:
+	.string	"FIQ_STACK_START"
+.LASF85:
+	.string	"bi_dram"
+.LASF125:
+	.string	"comp"
+.LASF346:
+	.string	"net_native_vlan"
+.LASF424:
+	.string	"secure_otp_write"
+.LASF211:
+	.string	"UCLASS_POWER_DOMAIN"
+.LASF399:
+	.string	"misc_mode"
+.LASF273:
+	.string	"cpu_clk"
+.LASF238:
+	.string	"UCLASS_VIDEO_BRIDGE"
+.LASF369:
+	.string	"platdata_auto_alloc_size"
+.LASF61:
+	.string	"lmb_region"
+.LASF243:
+	.string	"UCLASS_KEY"
+	.ident	"GCC: (Linaro GCC 6.3-2017.05) 6.3.1 20170404"
+	.section	.note.GNU-stack,"",@progbits
diff --git a/drivers/misc/rockchip-otp.c b/drivers/misc/rockchip-otp.c
index 2123c31038f..8cf3b31dbd0 100644
--- a/drivers/misc/rockchip-otp.c
+++ b/drivers/misc/rockchip-otp.c
@@ -395,6 +395,10 @@ static const struct udevice_id rockchip_otp_ids[] = {
 		.compatible = "rockchip,rv1126-otp",
 		.data = (ulong)&rv1126_data,
 	},
+	        {
+                .compatible = "rockchip,rk3562-otp",
+                .data = (ulong)&rk3568_data,
+        },
 	{}
 };
 
diff --git a/drivers/mmc/rockchip_sdhci.c b/drivers/mmc/rockchip_sdhci.c
index da630b9d97a..047afc1f9c3 100644
--- a/drivers/mmc/rockchip_sdhci.c
+++ b/drivers/mmc/rockchip_sdhci.c
@@ -83,6 +83,9 @@
 #define DLL_CMDOUT_EN_SRC_CLK_NEG	BIT(29)
 #define DLL_CMDOUT_BOTH_CLK_EDGE	BIT(30)
 
+#define RK_TAP_VALUE_SEL       BIT(3)
+#define RK_DLL_CMD_OUT         BIT(1)
+
 #define DLL_LOCK_WO_TMOUT(x) \
 	((((x) & DWCMSHC_EMMC_DLL_LOCKED) == DWCMSHC_EMMC_DLL_LOCKED) && \
 	(((x) & DWCMSHC_EMMC_DLL_TIMEOUT) == 0))
@@ -664,6 +667,16 @@ static const struct sdhci_data rk3588_data = {
 	.hs400_txclk_tapnum = 0x9,
 };
 
+static const struct sdhci_data rk3562_data = {
+        .set_ios_post = rk3568_sdhci_set_ios_post,
+        .set_clock = rk3568_sdhci_set_clock,
+        .config_dll = rk3568_sdhci_config_dll,
+        .flags = RK_DLL_CMD_OUT | RK_TAP_VALUE_SEL,
+        .hs200_txclk_tapnum = 12,
+        .hs400_txclk_tapnum = 6,
+};
+
+
 static const struct udevice_id sdhci_ids[] = {
 	{
 		.compatible = "arasan,sdhci-5.1",
@@ -677,6 +690,10 @@ static const struct udevice_id sdhci_ids[] = {
 		.compatible = "rockchip,rk3588-dwcmshc",
 		.data = (ulong)&rk3588_data,
 	},
+	{
+                .compatible = "rockchip,rk3562-dwcmshc",
+                .data = (ulong)&rk3562_data,
+        },
 	{ }
 };
 
diff --git a/drivers/net/dwc_eth_qos.c b/drivers/net/dwc_eth_qos.c
index 2279481d935..ed0f7352c47 100644
--- a/drivers/net/dwc_eth_qos.c
+++ b/drivers/net/dwc_eth_qos.c
@@ -1619,6 +1619,10 @@ static const struct udevice_id eqos_ids[] = {
 		.compatible = "rockchip,rk3588-gmac",
 		.data = (ulong)&eqos_rockchip_config
 	},
+	{
+                .compatible = "rockchip,rk3562-gmac",
+                .data = (ulong)&eqos_rockchip_config
+        },
 #endif
 #if IS_ENABLED(CONFIG_DWC_ETH_QOS_QCOM)
 	{
diff --git a/drivers/net/dwc_eth_qos_rockchip.c b/drivers/net/dwc_eth_qos_rockchip.c
index f3a0f63003e..6eaa0e409f1 100644
--- a/drivers/net/dwc_eth_qos_rockchip.c
+++ b/drivers/net/dwc_eth_qos_rockchip.c
@@ -19,6 +19,11 @@
 #include <asm/gpio.h>
 #include <linux/delay.h>
 
+#include <asm/arch-rockchip/clock.h>
+#include <asm/arch-rockchip/hardware.h>
+#include <asm/arch-rockchip/grf_rk3562.h>
+#include <asm/arch-rockchip/ioc_rk3562.h>
+
 #include "dwc_eth_qos.h"
 
 struct rk_gmac_ops {
@@ -268,6 +273,247 @@ static void rk3588_set_clock_selection(struct udevice *dev, bool enable)
 	regmap_write(data->php_grf, RK3588_GRF_CLK_CON1, val);
 }
 
+static int rk3562_set_to_rmii(struct udevice *dev){
+
+	struct rk3562_grf *grf;
+	unsigned int mode;
+	struct eth_pdata *pdata = dev_get_plat(dev);
+	struct rockchip_platform_data *data = pdata->priv_pdata;
+
+	enum {
+		RK3562_GMAC0_RMII_MODE_SHIFT = 0x5,
+		RK3562_GMAC0_RMII_MODE_MASK = BIT(5),
+		RK3562_GMAC0_RMII_MODE = 0x1,
+	};
+
+	grf = syscon_get_first_range(ROCKCHIP_SYSCON_GRF);
+
+	if (data->id) {
+		mode = RK3562_GMAC0_RMII_MODE << RK3562_GMAC0_RMII_MODE_SHIFT;
+		rk_clrsetreg(&grf->soc_con[0], RK3562_GMAC0_RMII_MODE_MASK, mode);
+	}
+
+	return 0;
+}
+
+static int rk3562_set_to_rgmii(struct udevice *dev,int tx_delay, int rx_delay){
+
+	struct eth_pdata *pdata = dev_get_plat(dev);
+	struct rockchip_platform_data *data = pdata->priv_pdata;
+	struct rk3562_grf *grf;
+	struct rk3562_ioc *ioc;
+	unsigned int rx_enable;
+
+	enum {
+		RK3562_GMAC0_RGMII_MODE_SHIFT = 0x5,
+		RK3562_GMAC0_RGMII_MODE_MASK = BIT(5),
+		RK3562_GMAC0_RGMII_MODE = 0x0,
+
+		RK3562_GMAC0_TXCLK_DLY_ENA_MASK = BIT(0),
+		RK3562_GMAC0_TXCLK_DLY_ENA_DISABLE = 0,
+		RK3562_GMAC0_TXCLK_DLY_ENA_ENABLE = BIT(0),
+
+		RK3562_GMAC0_RXCLK_DLY_ENA_MASK = BIT(1),
+		RK3562_GMAC0_RXCLK_DLY_ENA_DISABLE = 0,
+		RK3562_GMAC0_RXCLK_DLY_ENA_ENABLE = BIT(1),
+	};
+
+	enum {
+		RK3562_GMAC0_RX_DL_CFG_SHIFT = 0x8,
+		RK3562_GMAC0_RX_DL_CFG_MASK = GENMASK(15, 8),
+
+		RK3562_GMAC0_TX_DL_CFG_SHIFT = 0x0,
+		RK3562_GMAC0_TX_DL_CFG_MASK = GENMASK(7, 0),
+	};
+
+	if (data->id)
+		return -EINVAL;
+
+	grf = syscon_get_first_range(ROCKCHIP_SYSCON_GRF);
+	ioc = syscon_get_first_range(ROCKCHIP_SYSCON_IOC);
+
+	rk_clrsetreg(&grf->soc_con[0], RK3562_GMAC0_RGMII_MODE_MASK,
+		     RK3562_GMAC0_RGMII_MODE << RK3562_GMAC0_RGMII_MODE_SHIFT);
+
+	if (rx_delay < 0) {
+		rx_enable = RK3562_GMAC0_RXCLK_DLY_ENA_DISABLE;
+		rx_delay = 0;
+	} else {
+		rx_enable = RK3562_GMAC0_RXCLK_DLY_ENA_ENABLE;
+		rx_delay = rx_delay << RK3562_GMAC0_RX_DL_CFG_SHIFT;
+	}
+
+	rk_clrsetreg(&ioc->mac0_io_con1,
+		     RK3562_GMAC0_TXCLK_DLY_ENA_MASK |
+		     RK3562_GMAC0_RXCLK_DLY_ENA_MASK,
+		     rx_enable | RK3562_GMAC0_TXCLK_DLY_ENA_ENABLE);
+
+	rk_clrsetreg(&ioc->mac0_io_con0,
+		     RK3562_GMAC0_RX_DL_CFG_MASK |
+		     RK3562_GMAC0_TX_DL_CFG_MASK,
+		     (tx_delay << RK3562_GMAC0_TX_DL_CFG_SHIFT) |
+		     rx_delay);
+
+	rk_clrsetreg(&ioc->mac1_io_con1,
+		     RK3562_GMAC0_TXCLK_DLY_ENA_MASK |
+		     RK3562_GMAC0_RXCLK_DLY_ENA_MASK,
+		     rx_enable | RK3562_GMAC0_TXCLK_DLY_ENA_ENABLE);
+
+	rk_clrsetreg(&ioc->mac1_io_con0,
+		     RK3562_GMAC0_RX_DL_CFG_MASK |
+		     RK3562_GMAC0_TX_DL_CFG_MASK,
+		     (tx_delay << RK3562_GMAC0_TX_DL_CFG_SHIFT) |
+		     rx_delay);
+	return 0;
+}
+
+static void rk3562_set_clock_selection(struct udevice *dev, bool enable){
+
+	struct eth_pdata *pdata = dev_get_plat(dev);
+	struct rockchip_platform_data *data = pdata->priv_pdata;
+	struct rk3562_grf *grf;
+	struct rk3562_ioc *ioc;
+	unsigned int val;
+
+	enum {
+		RK3562_GMAC0_CLK_SELET_SHIFT = 0x9,
+		RK3562_GMAC0_CLK_SELET_MASK = BIT(9),
+		RK3562_GMAC0_CLK_SELET_CRU = 0,
+		RK3562_GMAC0_CLK_SELET_IO = BIT(9),
+	};
+
+	enum {
+		RK3562_GMAC1_CLK_SELET_SHIFT = 15,
+		RK3562_GMAC1_CLK_SELET_MASK = BIT(15),
+		RK3562_GMAC1_CLK_SELET_CRU = 0,
+		RK3562_GMAC1_CLK_SELET_IO = BIT(15),
+	};
+
+	enum {
+		RK3562_GMAC0_IO_EXTCLK_SELET_SHIFT = 0x2,
+		RK3562_GMAC0_IO_EXTCLK_SELET_MASK = BIT(2),
+		RK3562_GMAC0_IO_EXTCLK_SELET_CRU = 0,
+		RK3562_GMAC0_IO_EXTCLK_SELET_IO = BIT(2),
+	};
+
+	enum {
+		RK3562_GMAC1_IO_EXTCLK_SELET_SHIFT = 0x3,
+		RK3562_GMAC1_IO_EXTCLK_SELET_MASK = BIT(3),
+		RK3562_GMAC1_IO_EXTCLK_SELET_CRU = 0,
+		RK3562_GMAC1_IO_EXTCLK_SELET_IO = BIT(3),
+	};
+
+	grf = syscon_get_first_range(ROCKCHIP_SYSCON_GRF);
+	ioc = syscon_get_first_range(ROCKCHIP_SYSCON_IOC);
+
+	if (!data->id) {
+		val = data->clock_input ? RK3562_GMAC0_CLK_SELET_IO :
+					   RK3562_GMAC0_CLK_SELET_CRU;
+		rk_clrsetreg(&grf->soc_con[0], RK3562_GMAC0_CLK_SELET_MASK, val);
+		val = data->clock_input ? RK3562_GMAC0_IO_EXTCLK_SELET_IO :
+					   RK3562_GMAC0_IO_EXTCLK_SELET_CRU;
+		rk_clrsetreg(&ioc->mac1_io_con1,
+			     RK3562_GMAC0_IO_EXTCLK_SELET_MASK, val);
+		rk_clrsetreg(&ioc->mac0_io_con1,
+			     RK3562_GMAC0_IO_EXTCLK_SELET_MASK, val);
+
+	} else {
+		val = data->clock_input ? RK3562_GMAC1_CLK_SELET_IO :
+					   RK3562_GMAC1_CLK_SELET_CRU;
+		rk_clrsetreg(&grf->soc_con[1], RK3562_GMAC1_CLK_SELET_MASK, val);
+		val = data->clock_input ? RK3562_GMAC1_IO_EXTCLK_SELET_IO :
+					   RK3562_GMAC1_IO_EXTCLK_SELET_CRU;
+		rk_clrsetreg(&ioc->mac1_io_con1,
+			     RK3562_GMAC1_IO_EXTCLK_SELET_MASK, val);
+	}
+
+}
+
+static int rk3562_set_gmac_speed(struct udevice *dev)
+{
+
+	struct eqos_priv *eqos = dev_get_priv(dev);
+	struct eth_pdata *pdata = dev_get_plat(dev);
+	struct rockchip_platform_data *data = pdata->priv_pdata;
+
+	struct rk3562_grf *grf;
+	unsigned int div;
+
+	enum {
+		RK3562_GMAC0_CLK_RGMII_DIV_SHIFT = 7,
+		RK3562_GMAC0_CLK_RGMII_DIV_MASK = GENMASK(8, 7),
+		RK3562_GMAC0_CLK_RGMII_DIV1 = 0,
+		RK3562_GMAC0_CLK_RGMII_DIV5 = GENMASK(8, 7),
+		RK3562_GMAC0_CLK_RGMII_DIV50 = BIT(8),
+		RK3562_GMAC0_CLK_RMII_DIV2 = BIT(7),
+		RK3562_GMAC0_CLK_RMII_DIV20 = 0,
+	};
+
+	enum {
+		RK3562_GMAC1_SPEED_SHIFT = 0x0,
+		RK3562_GMAC1_SPEED_MASK  = BIT(0),
+		RK3562_GMAC1_SPEED_10M   = 0,
+		RK3562_GMAC1_SPEED_100M  = BIT(0),
+	};
+
+	enum {
+		RK3562_GMAC1_CLK_RMII_DIV_SHIFT = 13,
+		RK3562_GMAC1_CLK_RMII_DIV_MASK = BIT(13),
+		RK3562_GMAC1_CLK_RMII_DIV2 = BIT(13),
+		RK3562_GMAC1_CLK_RMII_DIV20 = 0,
+	};
+
+	grf = syscon_get_first_range(ROCKCHIP_SYSCON_GRF);
+
+	switch (eqos->phy->speed) {
+	case 10:
+		if (pdata->phy_interface == PHY_INTERFACE_MODE_RMII) {
+			if (data->id > 0) {
+				div = RK3562_GMAC1_CLK_RMII_DIV20;
+				rk_clrsetreg(&grf->soc_con[0],
+					     RK3562_GMAC1_SPEED_MASK,
+					     RK3562_GMAC1_SPEED_10M);
+			} else {
+				div = RK3562_GMAC0_CLK_RMII_DIV20;
+			}
+		} else {
+			div = RK3562_GMAC0_CLK_RGMII_DIV50;
+		}
+		break;
+	case 100:
+		if (pdata->phy_interface == PHY_INTERFACE_MODE_RMII) {
+			if (data->id > 0) {
+				div = RK3562_GMAC1_CLK_RMII_DIV2;
+				rk_clrsetreg(&grf->soc_con[0],
+					     RK3562_GMAC1_SPEED_MASK,
+					     RK3562_GMAC1_SPEED_100M);
+			} else {
+				div = RK3562_GMAC0_CLK_RMII_DIV2;
+			}
+		} else {
+			div = RK3562_GMAC0_CLK_RGMII_DIV5;
+		}
+		break;
+	case 1000:
+		if (pdata->phy_interface != PHY_INTERFACE_MODE_RMII)
+			div = RK3562_GMAC0_CLK_RGMII_DIV1;
+		else
+			return -EINVAL;
+		break;
+	default:
+		debug("Unknown phy speed: %d\n", eqos->phy->speed);
+		return -EINVAL;
+	}
+
+	if (data->id)
+		rk_clrsetreg(&grf->soc_con[1], RK3562_GMAC1_CLK_RMII_DIV_MASK, div);
+	else
+		rk_clrsetreg(&grf->soc_con[0], RK3562_GMAC0_CLK_RGMII_DIV_MASK, div);
+
+	return 0;
+}
+
+
 static const struct rk_gmac_ops rk_gmac_ops[] = {
 	{
 		.compatible = "rockchip,rk3568-gmac",
@@ -292,6 +538,18 @@ static const struct rk_gmac_ops rk_gmac_ops[] = {
 			0x0, /* sentinel */
 		},
 	},
+	{
+		.compatible = "rockchip,rk3562-gmac",
+		.set_to_rgmii = rk3562_set_to_rgmii,
+		.set_to_rmii = rk3562_set_to_rmii,
+		.set_gmac_speed = rk3562_set_gmac_speed,
+		.set_clock_selection = rk3562_set_clock_selection,
+		.regs = {
+			0xffa80000, /* gmac0 */
+			0xffb30000, /* gmac1 */
+			0x0, /* sentinel */
+		},
+	},
 	{ }
 };
 
diff --git a/drivers/pci/pcie_dw_rockchip.c b/drivers/pci/pcie_dw_rockchip.c
index ac7faa4cc19..5445182f4e5 100644
--- a/drivers/pci/pcie_dw_rockchip.c
+++ b/drivers/pci/pcie_dw_rockchip.c
@@ -531,6 +531,7 @@ static const struct dm_pci_ops rockchip_pcie_ops = {
 static const struct udevice_id rockchip_pcie_ids[] = {
 	{ .compatible = "rockchip,rk3568-pcie" },
 	{ .compatible = "rockchip,rk3588-pcie" },
+	{ .compatible = "rockchip,rk3562-pcie" },
 	{ }
 };
 
diff --git a/drivers/phy/rockchip/phy-rockchip-inno-usb2.c b/drivers/phy/rockchip/phy-rockchip-inno-usb2.c
index 43f6e020a6a..1f40f859f7c 100644
--- a/drivers/phy/rockchip/phy-rockchip-inno-usb2.c
+++ b/drivers/phy/rockchip/phy-rockchip-inno-usb2.c
@@ -457,6 +457,22 @@ static const struct rockchip_usb2phy_cfg rk3588_phy_cfgs[] = {
 	{ /* sentinel */ }
 };
 
+static const struct rockchip_usb2phy_cfg rk3562_phy_cfgs[] = {
+        {
+                .reg            = 0xff740000,
+                .clkout_ctl     = { 0x0108, 4, 4, 1, 0 },
+                .port_cfgs      = {
+                        [USB2PHY_PORT_OTG] = {
+                                .phy_sus        = { 0x0100, 1, 0, 2, 1 },
+                        },
+                        [USB2PHY_PORT_HOST] = {
+                                .phy_sus        = { 0x0004, 1, 0, 2, 1 },
+                        }
+                },
+        },
+        { /* sentinel */ }
+};
+
 static const struct udevice_id rockchip_usb2phy_ids[] = {
 	{
 		.compatible = "rockchip,rk3308-usb2phy",
@@ -478,6 +494,10 @@ static const struct udevice_id rockchip_usb2phy_ids[] = {
 		.compatible = "rockchip,rk3588-usb2phy",
 		.data = (ulong)&rk3588_phy_cfgs,
 	},
+	{
+                .compatible = "rockchip,rk3562-usb2phy",
+                .data = (ulong)&rk3562_phy_cfgs
+        },
 	{ /* sentinel */ }
 };
 
diff --git a/drivers/phy/rockchip/phy-rockchip-naneng-combphy.c b/drivers/phy/rockchip/phy-rockchip-naneng-combphy.c
index 5145b517aa4..891a695a7bf 100644
--- a/drivers/phy/rockchip/phy-rockchip-naneng-combphy.c
+++ b/drivers/phy/rockchip/phy-rockchip-naneng-combphy.c
@@ -559,6 +559,131 @@ static const struct rockchip_combphy_cfg rk3588_combphy_cfgs = {
 	.combphy_cfg	= rk3588_combphy_cfg,
 };
 
+static int rk3562_combphy_cfg(struct rockchip_combphy_priv *priv)
+{
+	const struct rockchip_combphy_grfcfg *cfg = priv->cfg->grfcfg;
+	u32 val;
+
+	switch (priv->mode) {
+	case PHY_TYPE_PCIE:
+		/* Set SSC downward spread spectrum */
+		val = readl(priv->mmio + (0x1f << 2));
+		val &= ~GENMASK(5, 4);
+		val |= 0x01 << 4;
+		writel(val, priv->mmio + 0x7c);
+
+		param_write(priv->phy_grf, &cfg->con0_for_pcie, true);
+		param_write(priv->phy_grf, &cfg->con1_for_pcie, true);
+		param_write(priv->phy_grf, &cfg->con2_for_pcie, true);
+		param_write(priv->phy_grf, &cfg->con3_for_pcie, true);
+		break;
+	case PHY_TYPE_USB3:
+		/* Set SSC downward spread spectrum */
+		val = readl(priv->mmio + (0x1f << 2));
+		val &= ~GENMASK(5, 4);
+		val |= 0x01 << 4;
+		writel(val, priv->mmio + 0x7c);
+
+		/* Enable adaptive CTLE for USB3.0 Rx */
+		val = readl(priv->mmio + (0x0e << 2));
+		val &= ~GENMASK(0, 0);
+		val |= 0x01;
+		writel(val, priv->mmio + (0x0e << 2));
+
+		/* Set PLL KVCO fine tuning signals */
+		val = readl(priv->mmio + (0x20 << 2));
+		val &= ~(0x7 << 2);
+		val |= 0x2 << 2;
+		writel(val, priv->mmio + (0x20 << 2));
+
+		/* Set PLL LPF R1 to su_trim[10:7]=1001 */
+		writel(0x4, priv->mmio + (0xb << 2));
+
+		/* Set PLL input clock divider 1/2 */
+		val = readl(priv->mmio + (0x5 << 2));
+		val &= ~(0x3 << 6);
+		val |= 0x1 << 6;
+		writel(val, priv->mmio + (0x5 << 2));
+
+		/* Set PLL loop divider */
+		writel(0x32, priv->mmio + (0x11 << 2));
+
+		/* Set PLL KVCO to min and set PLL charge pump current to max */
+		writel(0xf0, priv->mmio + (0xa << 2));
+
+		/* Set Rx squelch input filler bandwidth */
+		writel(0x0e, priv->mmio + (0x14 << 2));
+
+		param_write(priv->phy_grf, &cfg->pipe_sel_usb, true);
+		param_write(priv->phy_grf, &cfg->pipe_txcomp_sel, false);
+		param_write(priv->phy_grf, &cfg->pipe_txelec_sel, false);
+		param_write(priv->phy_grf, &cfg->usb_mode_set, true);
+		break;
+	default:
+		pr_err("%s, phy-type %d\n", __func__, priv->mode);
+		return -EINVAL;
+	}
+
+	clk_set_rate(&priv->ref_clk, 100000000);
+	param_write(priv->phy_grf, &cfg->pipe_clk_100m, true);
+
+	if (priv->mode == PHY_TYPE_PCIE) {
+		/* PLL KVCO tuning fine */
+		val = readl(priv->mmio + (0x20 << 2));
+		val &= ~(0x7 << 2);
+		val |= 0x2 << 2;
+		writel(val, priv->mmio + (0x20 << 2));
+
+		/* Enable controlling random jitter, aka RMJ */
+		writel(0x4, priv->mmio + (0xb << 2));
+
+		val = readl(priv->mmio + (0x5 << 2));
+		val &= ~(0x3 << 6);
+		val |= 0x1 << 6;
+		writel(val, priv->mmio + (0x5 << 2));
+
+		writel(0x32, priv->mmio + (0x11 << 2));
+		writel(0xf0, priv->mmio + (0xa << 2));
+	}
+
+	if (dev_read_bool(priv->dev, "rockchip,enable-ssc")) {
+		val = readl(priv->mmio + (0x7 << 2));
+		val |= BIT(4);
+		writel(val, priv->mmio + (0x7 << 2));
+	}
+
+	return 0;
+}
+
+static const struct rockchip_combphy_grfcfg rk3562_combphy_grfcfgs = {
+	/* pipe-phy-grf */
+	.pcie_mode_set		= { 0x0000, 5, 0, 0x00, 0x11 },
+	.usb_mode_set		= { 0x0000, 5, 0, 0x00, 0x04 },
+	.pipe_rxterm_set	= { 0x0000, 12, 12, 0x00, 0x01 },
+	.pipe_txelec_set	= { 0x0004, 1, 1, 0x00, 0x01 },
+	.pipe_txcomp_set	= { 0x0004, 4, 4, 0x00, 0x01 },
+	.pipe_clk_25m		= { 0x0004, 14, 13, 0x00, 0x01 },
+	.pipe_clk_100m		= { 0x0004, 14, 13, 0x00, 0x02 },
+	.pipe_phymode_sel	= { 0x0008, 1, 1, 0x00, 0x01 },
+	.pipe_rate_sel		= { 0x0008, 2, 2, 0x00, 0x01 },
+	.pipe_rxterm_sel	= { 0x0008, 8, 8, 0x00, 0x01 },
+	.pipe_txelec_sel	= { 0x0008, 12, 12, 0x00, 0x01 },
+	.pipe_txcomp_sel	= { 0x0008, 15, 15, 0x00, 0x01 },
+	.pipe_clk_ext		= { 0x000c, 9, 8, 0x02, 0x01 },
+	.pipe_sel_usb		= { 0x000c, 14, 13, 0x00, 0x01 },
+	.pipe_phy_status	= { 0x0034, 6, 6, 0x01, 0x00 },
+	.con0_for_pcie		= { 0x0000, 15, 0, 0x00, 0x1000 },
+	.con1_for_pcie		= { 0x0004, 15, 0, 0x00, 0x0000 },
+	.con2_for_pcie		= { 0x0008, 15, 0, 0x00, 0x0101 },
+	.con3_for_pcie		= { 0x000c, 15, 0, 0x00, 0x0200 },
+	.u3otg0_port_en		= { 0x0094, 15, 0, 0x0181, 0x1100 },
+};
+
+static const struct rockchip_combphy_cfg rk3562_combphy_cfgs = {
+	.grfcfg		= &rk3562_combphy_grfcfgs,
+	.combphy_cfg	= rk3562_combphy_cfg,
+};
+
 static const struct udevice_id rockchip_combphy_ids[] = {
 	{
 		.compatible = "rockchip,rk3568-naneng-combphy",
@@ -568,6 +693,10 @@ static const struct udevice_id rockchip_combphy_ids[] = {
 		.compatible = "rockchip,rk3588-naneng-combphy",
 		.data = (ulong)&rk3588_combphy_cfgs
 	},
+	{
+		.compatible = "rockchip,rk3562-naneng-combphy",
+		.data = (ulong)&rk3562_combphy_cfgs
+	},
 	{ }
 };
 
diff --git a/drivers/pinctrl/rockchip/Makefile b/drivers/pinctrl/rockchip/Makefile
index c91f650b043..8a09ccbc282 100644
--- a/drivers/pinctrl/rockchip/Makefile
+++ b/drivers/pinctrl/rockchip/Makefile
@@ -14,6 +14,7 @@ obj-$(CONFIG_ROCKCHIP_RK3308) += pinctrl-rk3308.o
 obj-$(CONFIG_ROCKCHIP_RK3328) += pinctrl-rk3328.o
 obj-$(CONFIG_ROCKCHIP_RK3368) += pinctrl-rk3368.o
 obj-$(CONFIG_ROCKCHIP_RK3399) += pinctrl-rk3399.o
+obj-$(CONFIG_ROCKCHIP_RK3562) += pinctrl-rk3562.o
 obj-$(CONFIG_ROCKCHIP_RK3568) += pinctrl-rk3568.o
 obj-$(CONFIG_ROCKCHIP_RK3588) += pinctrl-rk3588.o
 obj-$(CONFIG_ROCKCHIP_RV1108) += pinctrl-rv1108.o
diff --git a/drivers/pinctrl/rockchip/pinctrl-rk3562.c b/drivers/pinctrl/rockchip/pinctrl-rk3562.c
new file mode 100644
index 00000000000..3439eaf0369
--- /dev/null
+++ b/drivers/pinctrl/rockchip/pinctrl-rk3562.c
@@ -0,0 +1,320 @@
+// SPDX-License-Identifier: GPL-2.0+
+/*
+ * (C) Copyright 2022 Rockchip Electronics Co., Ltd
+ */
+
+#include <dm.h>
+#include <dm/pinctrl.h>
+#include <regmap.h>
+#include <syscon.h>
+
+#include "pinctrl-rockchip.h"
+
+static int rk3562_set_mux(struct rockchip_pin_bank *bank, int pin, int mux)
+{
+	struct rockchip_pinctrl_priv *priv = bank->priv;
+	int iomux_num = (pin / 8);
+	struct regmap *regmap;
+	int reg, ret, mask;
+	u8 bit;
+	u32 data;
+
+	debug("setting mux of GPIO%d-%d to %d\n", bank->bank_num, pin, mux);
+
+	regmap = priv->regmap_base;
+	reg = bank->iomux[iomux_num].offset;
+	if ((pin % 8) >= 4)
+		reg += 0x4;
+	bit = (pin % 4) * 4;
+	mask = 0xf;
+
+	data = (mask << (bit + 16));
+	data |= (mux & mask) << bit;
+
+	/* force jtag m1 */
+	if (bank->bank_num == 1) {
+		if ((pin == 13) || (pin == 14)) {
+			if (mux == 1) {
+				regmap_write(regmap, 0x504, 0x10001);
+			} else {
+				regmap_write(regmap, 0x504, 0x10000);
+			}
+		}
+	}
+
+	debug("iomux write reg = %x data = %x\n", reg, data);
+
+	ret = regmap_write(regmap, reg, data);
+
+	return ret;
+}
+
+#define RK3562_DRV_BITS_PER_PIN		8
+#define RK3562_DRV_PINS_PER_REG		2
+#define RK3562_DRV_GPIO0_OFFSET		0x20070
+#define RK3562_DRV_GPIO1_OFFSET		0x200
+#define RK3562_DRV_GPIO2_OFFSET		0x240
+#define RK3562_DRV_GPIO3_OFFSET		0x10280
+#define RK3562_DRV_GPIO4_OFFSET		0x102C0
+
+static void rk3562_calc_drv_reg_and_bit(struct rockchip_pin_bank *bank,
+					int pin_num, struct regmap **regmap,
+					int *reg, u8 *bit)
+{
+	struct rockchip_pinctrl_priv *priv = bank->priv;
+
+	*regmap = priv->regmap_base;
+	switch (bank->bank_num) {
+	case 0:
+		*reg = RK3562_DRV_GPIO0_OFFSET;
+		break;
+
+	case 1:
+		*reg = RK3562_DRV_GPIO1_OFFSET;
+		break;
+
+	case 2:
+		*reg = RK3562_DRV_GPIO2_OFFSET;
+		break;
+
+	case 3:
+		*reg = RK3562_DRV_GPIO3_OFFSET;
+		break;
+
+	case 4:
+		*reg = RK3562_DRV_GPIO4_OFFSET;
+		break;
+
+	default:
+		*reg = 0;
+		break;
+	}
+
+	*reg += ((pin_num / RK3562_DRV_PINS_PER_REG) * 4);
+	*bit = pin_num % RK3562_DRV_PINS_PER_REG;
+	*bit *= RK3562_DRV_BITS_PER_PIN;
+}
+
+static int rk3562_set_drive(struct rockchip_pin_bank *bank,
+			    int pin_num, int strength)
+{
+	struct regmap *regmap;
+	int reg, ret;
+	u32 data;
+	u8 bit;
+	int drv = (1 << (strength + 1)) - 1;
+
+	rk3562_calc_drv_reg_and_bit(bank, pin_num, &regmap, &reg, &bit);
+
+	/* enable the write to the equivalent lower bits */
+	data = ((1 << RK3562_DRV_BITS_PER_PIN) - 1) << (bit + 16);
+	data |= (drv << bit);
+	ret = regmap_write(regmap, reg, data);
+
+	return ret;
+}
+
+#define RK3562_PULL_BITS_PER_PIN		2
+#define RK3562_PULL_PINS_PER_REG		8
+#define RK3562_PULL_GPIO0_OFFSET		0x20020
+#define RK3562_PULL_GPIO1_OFFSET		0x80
+#define RK3562_PULL_GPIO2_OFFSET		0x90
+#define RK3562_PULL_GPIO3_OFFSET		0x100A0
+#define RK3562_PULL_GPIO4_OFFSET		0x100B0
+
+static void rk3562_calc_pull_reg_and_bit(struct rockchip_pin_bank *bank,
+					 int pin_num, struct regmap **regmap,
+					 int *reg, u8 *bit)
+{
+	struct rockchip_pinctrl_priv *priv = bank->priv;
+
+	*regmap = priv->regmap_base;
+	switch (bank->bank_num) {
+	case 0:
+		*reg = RK3562_PULL_GPIO0_OFFSET;
+		break;
+
+	case 1:
+		*reg = RK3562_PULL_GPIO1_OFFSET;
+		break;
+
+	case 2:
+		*reg = RK3562_PULL_GPIO2_OFFSET;
+		break;
+
+	case 3:
+		*reg = RK3562_PULL_GPIO3_OFFSET;
+		break;
+
+	case 4:
+		*reg = RK3562_PULL_GPIO4_OFFSET;
+		break;
+
+	default:
+		*reg = 0;
+		break;
+	}
+
+	*reg += ((pin_num / RK3562_PULL_PINS_PER_REG) * 4);
+	*bit = pin_num % RK3562_PULL_PINS_PER_REG;
+	*bit *= RK3562_PULL_BITS_PER_PIN;
+}
+
+static int rk3562_set_pull(struct rockchip_pin_bank *bank,
+			   int pin_num, int pull)
+{
+	struct regmap *regmap;
+	int reg, ret;
+	u8 bit, type;
+	u32 data;
+
+	if (pull == PIN_CONFIG_BIAS_PULL_PIN_DEFAULT)
+		return -ENOTSUPP;
+
+	rk3562_calc_pull_reg_and_bit(bank, pin_num, &regmap, &reg, &bit);
+	type = bank->pull_type[pin_num / 8];
+	ret = rockchip_translate_pull_value(type, pull);
+	if (ret < 0) {
+		debug("unsupported pull setting %d\n", pull);
+		return ret;
+	}
+
+	/* enable the write to the equivalent lower bits */
+	data = ((1 << RK3562_PULL_BITS_PER_PIN) - 1) << (bit + 16);
+
+	data |= (ret << bit);
+	ret = regmap_write(regmap, reg, data);
+
+	return ret;
+}
+
+#define RK3562_SMT_BITS_PER_PIN		2
+#define RK3562_SMT_PINS_PER_REG		8
+#define RK3562_SMT_GPIO0_OFFSET		0x20030
+#define RK3562_SMT_GPIO1_OFFSET		0xC0
+#define RK3562_SMT_GPIO2_OFFSET		0xD0
+#define RK3562_SMT_GPIO3_OFFSET		0x100E0
+#define RK3562_SMT_GPIO4_OFFSET		0x100F0
+
+static int rk3562_calc_schmitt_reg_and_bit(struct rockchip_pin_bank *bank,
+					   int pin_num,
+					   struct regmap **regmap,
+					   int *reg, u8 *bit)
+{
+	struct rockchip_pinctrl_priv *priv = bank->priv;
+
+	*regmap = priv->regmap_base;
+	switch (bank->bank_num) {
+	case 0:
+		*reg = RK3562_SMT_GPIO0_OFFSET;
+		break;
+
+	case 1:
+		*reg = RK3562_SMT_GPIO1_OFFSET;
+		break;
+
+	case 2:
+		*reg = RK3562_SMT_GPIO2_OFFSET;
+		break;
+
+	case 3:
+		*reg = RK3562_SMT_GPIO3_OFFSET;
+		break;
+
+	case 4:
+		*reg = RK3562_SMT_GPIO4_OFFSET;
+		break;
+
+	default:
+		*reg = 0;
+		break;
+	}
+
+	*reg += ((pin_num / RK3562_SMT_PINS_PER_REG) * 4);
+	*bit = pin_num % RK3562_SMT_PINS_PER_REG;
+	*bit *= RK3562_SMT_BITS_PER_PIN;
+
+	return 0;
+}
+
+static int rk3562_set_schmitt(struct rockchip_pin_bank *bank,
+			      int pin_num, int enable)
+{
+	struct regmap *regmap;
+	int reg, ret;
+	u32 data;
+	u8 bit;
+
+	rk3562_calc_schmitt_reg_and_bit(bank, pin_num, &regmap, &reg, &bit);
+
+	/* enable the write to the equivalent lower bits */
+	data = ((1 << RK3562_SMT_BITS_PER_PIN) - 1) << (bit + 16);
+	data |= (enable << bit);
+	ret = regmap_write(regmap, reg, data);
+
+	return ret;
+}
+
+static struct rockchip_pin_bank rk3562_pin_banks[] = {
+	PIN_BANK_IOMUX_FLAGS_OFFSET(0, 32, "gpio0",
+				    IOMUX_WIDTH_4BIT,
+				    IOMUX_WIDTH_4BIT,
+				    IOMUX_WIDTH_4BIT,
+				    IOMUX_WIDTH_4BIT,
+				    0x20000, 0x20008, 0x20010, 0x20018),
+	PIN_BANK_IOMUX_FLAGS_OFFSET(1, 32, "gpio1",
+				    IOMUX_WIDTH_4BIT,
+				    IOMUX_WIDTH_4BIT,
+				    IOMUX_WIDTH_4BIT,
+				    IOMUX_WIDTH_4BIT,
+				    0, 0x08, 0x10, 0x18),
+	PIN_BANK_IOMUX_FLAGS_OFFSET(2, 32, "gpio2",
+				    IOMUX_WIDTH_4BIT,
+				    IOMUX_WIDTH_4BIT,
+				    IOMUX_WIDTH_4BIT,
+				    IOMUX_WIDTH_4BIT,
+				    0x20, 0, 0, 0),
+	PIN_BANK_IOMUX_FLAGS_OFFSET(3, 32, "gpio3",
+				    IOMUX_WIDTH_4BIT,
+				    IOMUX_WIDTH_4BIT,
+				    IOMUX_WIDTH_4BIT,
+				    IOMUX_WIDTH_4BIT,
+				    0x10040, 0x10048, 0x10050, 0x10058),
+	PIN_BANK_IOMUX_FLAGS_OFFSET(4, 16, "gpio4",
+				    IOMUX_WIDTH_4BIT,
+				    IOMUX_WIDTH_4BIT,
+				    0,
+				    0,
+				    0x10060, 0x10068, 0, 0),
+};
+
+static const struct rockchip_pin_ctrl rk3562_pin_ctrl = {
+	.pin_banks		= rk3562_pin_banks,
+	.nr_banks		= ARRAY_SIZE(rk3562_pin_banks),
+	.nr_pins		= 144,
+	.grf_mux_offset		= 0x0,
+	.set_mux		= rk3562_set_mux,
+	.set_pull		= rk3562_set_pull,
+	.set_drive		= rk3562_set_drive,
+	.set_schmitt		= rk3562_set_schmitt,
+};
+
+static const struct udevice_id rk3562_pinctrl_ids[] = {
+	{
+		.compatible = "rockchip,rk3562-pinctrl",
+		.data = (ulong)&rk3562_pin_ctrl
+	},
+	{ }
+};
+
+U_BOOT_DRIVER(pinctrl_rk3562) = {
+	.name		= "rockchip_rk3562_pinctrl",
+	.id		= UCLASS_PINCTRL,
+	.of_match	= rk3562_pinctrl_ids,
+	.priv_auto = sizeof(struct rockchip_pinctrl_priv),
+	.ops		= &rockchip_pinctrl_ops,
+#if !CONFIG_IS_ENABLED(OF_PLATDATA)
+	.bind		= dm_scan_fdt_dev,
+#endif
+	.probe		= rockchip_pinctrl_probe,
+};
diff --git a/drivers/ram/rockchip/Makefile b/drivers/ram/rockchip/Makefile
index 36dc0500dab..dff6061c7a1 100644
--- a/drivers/ram/rockchip/Makefile
+++ b/drivers/ram/rockchip/Makefile
@@ -13,6 +13,7 @@ obj-$(CONFIG_ROCKCHIP_RK3288) = sdram_rk3288.o
 obj-$(CONFIG_ROCKCHIP_RK3308) = sdram_rk3308.o
 obj-$(CONFIG_ROCKCHIP_RK3328) = sdram_rk3328.o sdram_pctl_px30.o sdram_phy_px30.o
 obj-$(CONFIG_ROCKCHIP_RK3399) += sdram_rk3399.o
+obj-$(CONFIG_ROCKCHIP_RK3562) += sdram_rk3562.o
 obj-$(CONFIG_ROCKCHIP_RK3568) += sdram_rk3568.o
 obj-$(CONFIG_ROCKCHIP_RK3588) += sdram_rk3588.o
 obj-$(CONFIG_ROCKCHIP_RV1126) += sdram_rv1126.o sdram_pctl_px30.o
diff --git a/drivers/ram/rockchip/sdram_rk3562.c b/drivers/ram/rockchip/sdram_rk3562.c
new file mode 100644
index 00000000000..3ecf91f0569
--- /dev/null
+++ b/drivers/ram/rockchip/sdram_rk3562.c
@@ -0,0 +1,56 @@
+// SPDX-License-Identifier: GPL-2.0
+/*
+ * (C) Copyright 2022 Rockchip Electronics Co., Ltd.
+ */
+
+#include <config.h>
+#include <dm.h>
+#include <ram.h>
+#include <syscon.h>
+#include <asm/arch-rockchip/clock.h>
+#include <asm/arch-rockchip/grf_rk3562.h>
+#include <asm/arch-rockchip/sdram.h>
+
+struct dram_info {
+	struct ram_info info;
+	struct rk3562_pmu_grf *pmugrf;
+};
+
+static int rk3562_dmc_probe(struct udevice *dev)
+{
+	struct dram_info *priv = dev_get_priv(dev);
+
+	priv->pmugrf = syscon_get_first_range(ROCKCHIP_SYSCON_PMUGRF);
+	priv->info.base = CFG_SYS_SDRAM_BASE;
+	priv->info.size =
+		rockchip_sdram_size((phys_addr_t)&priv->pmugrf->os_reg[2]);
+
+	return 0;
+}
+
+static int rk3562_dmc_get_info(struct udevice *dev, struct ram_info *info)
+{
+	struct dram_info *priv = dev_get_priv(dev);
+
+	*info = priv->info;
+
+	return 0;
+}
+
+static struct ram_ops rk3562_dmc_ops = {
+	.get_info = rk3562_dmc_get_info,
+};
+
+static const struct udevice_id rk3562_dmc_ids[] = {
+	{ .compatible = "rockchip,rk3562-dmc" },
+	{ }
+};
+
+U_BOOT_DRIVER(dmc_rk3562) = {
+	.name = "rockchip_rk3562_dmc",
+	.id = UCLASS_RAM,
+	.of_match = rk3562_dmc_ids,
+	.ops = &rk3562_dmc_ops,
+	.probe = rk3562_dmc_probe,
+	.priv_auto = sizeof(struct dram_info),
+};
diff --git a/drivers/reset/Makefile b/drivers/reset/Makefile
index d99a78c9828..a7b5b4bb21b 100644
--- a/drivers/reset/Makefile
+++ b/drivers/reset/Makefile
@@ -16,7 +16,9 @@ obj-$(CONFIG_RESET_BCM6345) += reset-bcm6345.o
 obj-$(CONFIG_RESET_UNIPHIER) += reset-uniphier.o
 obj-$(CONFIG_RESET_AST2500) += reset-ast2500.o
 obj-$(CONFIG_RESET_AST2600) += reset-ast2600.o
-obj-$(CONFIG_RESET_ROCKCHIP) += reset-rockchip.o rst-rk3588.o
+obj-$(CONFIG_RESET_ROCKCHIP) += reset-rockchip.o
+obj-$(CONFIG_ROCKCHIP_RK3562) += rst-rk3562.o
+obj-$(CONFIG_ROCKCHIP_RK3588) += rst-rk3588.o
 obj-$(CONFIG_RESET_MESON) += reset-meson.o
 obj-$(CONFIG_RESET_SOCFPGA) += reset-socfpga.o
 obj-$(CONFIG_RESET_MEDIATEK) += reset-mediatek.o
diff --git a/drivers/reset/rst-rk3562.c b/drivers/reset/rst-rk3562.c
new file mode 100644
index 00000000000..684f280fa13
--- /dev/null
+++ b/drivers/reset/rst-rk3562.c
@@ -0,0 +1,27 @@
+// SPDX-License-Identifier: GPL-2.0-or-later
+/*
+ * Copyright (c) 2021 Rockchip Electronics Co., Ltd.
+ * Copyright (c) 2022 Collabora Ltd.
+ * Author: Sebastian Reichel <sebastian.reichel@collabora.com>
+ */
+
+#include <dm.h>
+#include <asm/arch-rockchip/clock.h>
+#include <dt-bindings/clock/rk3562-cru.h>
+
+
+/* mapping table for reset ID to register offset */
+static const int rk3562_register_offset[] = {
+	[SRST_P_TSADC] = 384,
+	[SRST_TSADC] = 385,
+	[SRST_TSADCPHY] = 386,
+	[SRST_A_GMAC] = 401,
+	[SRST_P_SARADC] = 402,
+};
+
+
+int rk3562_reset_bind_lut(struct udevice *pdev, u32 reg_offset, u32 reg_number)
+{
+	return rockchip_reset_bind_lut(pdev, rk3562_register_offset,
+				       reg_offset, reg_number);
+}
diff --git a/drivers/thermal/Kconfig b/drivers/thermal/Kconfig
index 440eb64a566..2a4feaf8275 100644
--- a/drivers/thermal/Kconfig
+++ b/drivers/thermal/Kconfig
@@ -47,4 +47,10 @@ config TI_LM74_THERMAL
 	 Enable thermal support for the Texas Instruments LM74 chip.
 	 The driver supports reading CPU temperature.
 
+config ROCKCHIP_THERMAL
+        bool "Temperature sensor driver for Rockchip SoCs"
+        depends on CLK
+        help
+          Support for Temperature Monitor (TEMPMON) found on Rockchip SoCs.
+
 endif # if DM_THERMAL
diff --git a/drivers/thermal/Makefile b/drivers/thermal/Makefile
index b5ab0fc221f..d249fc9445c 100644
--- a/drivers/thermal/Makefile
+++ b/drivers/thermal/Makefile
@@ -10,3 +10,4 @@ obj-$(CONFIG_IMX_SCU_THERMAL) += imx_scu_thermal.o
 obj-$(CONFIG_TI_DRA7_THERMAL) += ti-bandgap.o
 obj-$(CONFIG_IMX_TMU) += imx_tmu.o
 obj-$(CONFIG_TI_LM74_THERMAL) += ti-lm74.o
+obj-$(CONFIG_ROCKCHIP_THERMAL) += rockchip_thermal.o
diff --git a/drivers/thermal/rockchip_thermal.c b/drivers/thermal/rockchip_thermal.c
new file mode 100644
index 00000000000..127fe9d7ece
--- /dev/null
+++ b/drivers/thermal/rockchip_thermal.c
@@ -0,0 +1,1724 @@
+// SPDX-License-Identifier: GPL-2.0
+/*
+ * Copyright (c) 2018 Fuzhou Rockchip Electronics Co., Ltd
+ */
+
+#include <bitfield.h>
+#include <thermal.h>
+#include <dm.h>
+#include <dm/pinctrl.h>
+#include <div64.h>
+#include <errno.h>
+#include <syscon.h>
+#include <asm/arch-rockchip/clock.h>
+#include <asm/arch-rockchip/hardware.h>
+#include <asm/io.h>
+#include <dm/lists.h>
+#include <clk.h>
+#include <clk-uclass.h>
+#include <reset.h>
+#include <linux/delay.h>
+
+DECLARE_GLOBAL_DATA_PTR;
+
+/**
+ * If the temperature over a period of time High,
+ * the resulting TSHUT gave CRU module,let it reset the entire chip,
+ * or via GPIO give PMIC.
+ */
+enum tshut_mode {
+	TSHUT_MODE_CRU = 0,
+	TSHUT_MODE_GPIO,
+};
+
+/**
+ * The system Temperature Sensors tshut(tshut) polarity
+ * the bit 8 is tshut polarity.
+ * 0: low active, 1: high active
+ */
+enum tshut_polarity {
+	TSHUT_LOW_ACTIVE = 0,
+	TSHUT_HIGH_ACTIVE,
+};
+
+/**
+ * The conversion table has the adc value and temperature.
+ * ADC_DECREMENT: the adc value is of diminishing.(e.g. rk3288_code_table)
+ * ADC_INCREMENT: the adc value is incremental.(e.g. rk3368_code_table)
+ */
+enum adc_sort_mode {
+	ADC_DECREMENT = 0,
+	ADC_INCREMENT,
+};
+
+#define SOC_MAX_SENSORS				7
+
+#define TSADCV2_USER_CON			0x00
+#define TSADCV2_AUTO_CON			0x04
+#define TSADCV2_INT_EN				0x08
+#define TSADCV2_INT_PD				0x0c
+#define TSADCV3_AUTO_SRC_CON			0x0c
+#define TSADCV3_HT_INT_EN			0x14
+#define TSADCV3_HSHUT_GPIO_INT_EN		0x18
+#define TSADCV3_HSHUT_CRU_INT_EN		0x1c
+#define TSADCV3_INT_PD				0x24
+#define TSADCV3_HSHUT_PD			0x28
+#define TSADCV2_DATA(chn)			(0x20 + (chn) * 0x04)
+#define TSADCV2_COMP_INT(chn)		        (0x30 + (chn) * 0x04)
+#define TSADCV2_COMP_SHUT(chn)		        (0x40 + (chn) * 0x04)
+#define TSADCV3_DATA(chn)			(0x2c + (chn) * 0x04)
+#define TSADCV3_COMP_INT(chn)		        (0x6c + (chn) * 0x04)
+#define TSADCV3_COMP_SHUT(chn)		        (0x10c + (chn) * 0x04)
+#define TSADCV2_HIGHT_INT_DEBOUNCE		0x60
+#define TSADCV2_HIGHT_TSHUT_DEBOUNCE		0x64
+#define TSADCV3_HIGHT_INT_DEBOUNCE		0x14c
+#define TSADCV3_HIGHT_TSHUT_DEBOUNCE		0x150
+#define TSADCV2_AUTO_PERIOD			0x68
+#define TSADCV2_AUTO_PERIOD_HT			0x6c
+#define TSADCV3_AUTO_PERIOD			0x154
+#define TSADCV3_AUTO_PERIOD_HT			0x158
+#define TSADCV3_Q_MAX				0x210
+
+#define TSADCV2_AUTO_EN				BIT(0)
+#define TSADCV2_AUTO_EN_MASK			BIT(16)
+#define TSADCV2_AUTO_SRC_EN(chn)		BIT(4 + (chn))
+#define TSADCV3_AUTO_SRC_EN(chn)		BIT(chn)
+#define TSADCV3_AUTO_SRC_EN_MASK(chn)		BIT(16 + (chn))
+#define TSADCV2_AUTO_TSHUT_POLARITY_HIGH	BIT(8)
+#define TSADCV2_AUTO_TSHUT_POLARITY_MASK	BIT(24)
+
+#define TSADCV3_AUTO_Q_SEL_EN			BIT(1)
+#define TSADCV3_AUTO_Q_SEL_EN_MASK		BIT(17)
+
+#define TSADCV2_INT_SRC_EN(chn)			BIT(chn)
+#define TSADCV2_INT_SRC_EN_MASK(chn)		BIT(16 + (chn))
+#define TSADCV2_SHUT_2GPIO_SRC_EN(chn)		BIT(4 + (chn))
+#define TSADCV2_SHUT_2CRU_SRC_EN(chn)		BIT(8 + (chn))
+
+#define TSADCV2_INT_PD_CLEAR_MASK		~BIT(8)
+#define TSADCV3_INT_PD_CLEAR_MASK		~BIT(16)
+#define TSADCV4_INT_PD_CLEAR_MASK		0xffffffff
+
+#define TSADCV2_DATA_MASK			0xfff
+#define TSADCV3_DATA_MASK			0x3ff
+#define TSADCV4_DATA_MASK			0x1ff
+#define TSADCV5_DATA_MASK			0x7ff
+
+#define TSADCV2_HIGHT_INT_DEBOUNCE_COUNT	4
+#define TSADCV2_HIGHT_TSHUT_DEBOUNCE_COUNT	4
+#define TSADCV2_AUTO_PERIOD_TIME		250
+#define TSADCV2_AUTO_PERIOD_HT_TIME		50
+#define TSADCV3_AUTO_PERIOD_TIME		1875
+#define TSADCV3_AUTO_PERIOD_HT_TIME		1875
+#define TSADCV5_AUTO_PERIOD_TIME		1622 /* 2.5ms */
+#define TSADCV5_AUTO_PERIOD_HT_TIME		1622 /* 2.5ms */
+#define TSADCV6_AUTO_PERIOD_TIME		5000 /* 2.5ms */
+#define TSADCV6_AUTO_PERIOD_HT_TIME		5000 /* 2.5ms */
+#define TSADCV7_AUTO_PERIOD_TIME		3000 /* 2.5ms */
+#define TSADCV7_AUTO_PERIOD_HT_TIME		3000 /* 2.5ms */
+#define TSADCV3_Q_MAX_VAL			0x7ff /* 11bit 2047 */
+#define TSADCV12_AUTO_PERIOD_TIME		3000 /* 2.5ms */
+#define TSADCV12_AUTO_PERIOD_HT_TIME		3000 /* 2.5ms */
+#define TSADCV12_Q_MAX_VAL			0xfff /* 12bit 4095 */
+#define TSADCV9_Q_MAX				0x210
+#define TSADCV9_Q_MAX_VAL			(0xffff0400 << 0)
+
+#define TSADCV2_USER_INTER_PD_SOC		0x340	/* 13 clocks */
+#define TSADCV5_USER_INTER_PD_SOC		0xfc0 /* 97us, at least 90us */
+
+#define GRF_SARADC_TESTBIT			0x0e644
+#define GRF_TSADC_TESTBIT_L			0x0e648
+#define GRF_TSADC_TESTBIT_H			0x0e64c
+
+#define PX30_GRF_SOC_CON0			0x0400
+#define PX30_GRF_SOC_CON2			0x0408
+
+#define RK3562_GRF_TSADC_CON			0x0580
+
+#define RK3568_GRF_TSADC_CON			0x0600
+#define RK3528_GRF_TSADC_CON			0x40030
+#define RK3568_GRF_TSADC_ANA_REG0		(0x10001 << 0)
+#define RK3568_GRF_TSADC_ANA_REG1		(0x10001 << 1)
+#define RK3568_GRF_TSADC_ANA_REG2		(0x10001 << 2)
+#define RK3568_GRF_TSADC_TSEN			(0x10001 << 8)
+
+#define GRF_SARADC_TESTBIT_ON			(0x10001 << 2)
+#define GRF_TSADC_TESTBIT_H_ON			(0x10001 << 2)
+#define GRF_TSADC_VCM_EN_L			(0x10001 << 7)
+#define GRF_TSADC_VCM_EN_H			(0x10001 << 7)
+
+#define GRF_CON_TSADC_CH_INV			(0x10001 << 1)
+#define PX30S_TSADC_TDC_MODE                    (0x10001 << 4)
+
+/* -40 to 125 is reliable, outside the range existed unreliability */
+#define MIN_TEMP				(-60000)
+#define LOWEST_TEMP				(-273000)
+#define MAX_TEMP				(180000)
+#define MAX_ENV_TEMP				(85000)
+
+#define BASE					(1024)
+#define BASE_SHIFT				(10)
+#define START_DEBOUNCE_COUNT			(100)
+#define HIGHER_DEBOUNCE_TEMP			(30000)
+#define LOWER_DEBOUNCE_TEMP			(15000)
+
+/**
+ * struct tsadc_table - hold information about code and temp mapping
+ * @code: raw code from tsadc ip
+ * @temp: the mapping temperature
+ */
+
+struct tsadc_table {
+	unsigned long code;
+	int temp;
+};
+
+struct chip_tsadc_table {
+	const struct tsadc_table *id;
+	unsigned int length;
+	u32 data_mask;
+	/* Tsadc is linear, using linear parameters */
+	int knum;
+	int bnum;
+	enum adc_sort_mode mode;
+};
+
+enum sensor_id {
+	SENSOR_CPU = 0,
+	SENSOR_GPU,
+};
+
+struct rockchip_tsadc_chip {
+	/* The sensor id of chip correspond to the ADC channel */
+	int chn_id[SOC_MAX_SENSORS];
+	int chn_num;
+	fdt_addr_t base;
+	fdt_addr_t grf;
+
+	/* The hardware-controlled tshut property */
+	int tshut_temp;
+	enum tshut_mode tshut_mode;
+	enum tshut_polarity tshut_polarity;
+
+	void (*tsadc_control)(struct udevice *dev, bool enable);
+	void (*tsadc_init)(struct udevice *dev);
+	int (*tsadc_get_temp)(struct udevice *dev, int chn,
+			      int *temp);
+	void (*irq_ack)(struct udevice *dev);
+	void (*set_alarm_temp)(struct udevice *dev,
+			       int chn, int temp);
+	void (*set_tshut_temp)(struct udevice *dev,
+			       int chn, int temp);
+	void (*set_tshut_mode)(struct udevice *dev, int chn, enum tshut_mode m);
+	struct chip_tsadc_table table;
+};
+
+struct rockchip_thermal_priv {
+	void *base;
+	void *grf;
+	enum tshut_mode tshut_mode;
+	enum tshut_polarity tshut_polarity;
+	const struct rockchip_tsadc_chip *data;
+};
+
+static const struct tsadc_table rk1808_code_table[] = {
+	{0, MIN_TEMP},
+	{3423, MIN_TEMP},
+	{3455, -40000},
+	{3463, -35000},
+	{3471, -30000},
+	{3479, -25000},
+	{3487, -20000},
+	{3495, -15000},
+	{3503, -10000},
+	{3511, -5000},
+	{3519, 0},
+	{3527, 5000},
+	{3535, 10000},
+	{3543, 15000},
+	{3551, 20000},
+	{3559, 25000},
+	{3567, 30000},
+	{3576, 35000},
+	{3584, 40000},
+	{3592, 45000},
+	{3600, 50000},
+	{3609, 55000},
+	{3617, 60000},
+	{3625, 65000},
+	{3633, 70000},
+	{3642, 75000},
+	{3650, 80000},
+	{3659, 85000},
+	{3667, 90000},
+	{3675, 95000},
+	{3684, 100000},
+	{3692, 105000},
+	{3701, 110000},
+	{3709, 115000},
+	{3718, 120000},
+	{3726, 125000},
+	{3820, MAX_TEMP},
+	{TSADCV2_DATA_MASK, MAX_TEMP},
+};
+
+static const struct tsadc_table rk3228_code_table[] = {
+	{0, MIN_TEMP},
+	{568, MIN_TEMP},
+	{588, -40000},
+	{593, -35000},
+	{598, -30000},
+	{603, -25000},
+	{608, -20000},
+	{613, -15000},
+	{618, -10000},
+	{623, -5000},
+	{629, 0},
+	{634, 5000},
+	{639, 10000},
+	{644, 15000},
+	{649, 20000},
+	{654, 25000},
+	{660, 30000},
+	{665, 35000},
+	{670, 40000},
+	{675, 45000},
+	{681, 50000},
+	{686, 55000},
+	{691, 60000},
+	{696, 65000},
+	{702, 70000},
+	{707, 75000},
+	{712, 80000},
+	{717, 85000},
+	{723, 90000},
+	{728, 95000},
+	{733, 100000},
+	{738, 105000},
+	{744, 110000},
+	{749, 115000},
+	{754, 120000},
+	{760, 125000},
+	{821, MAX_TEMP},
+	{TSADCV2_DATA_MASK, MAX_TEMP},
+};
+
+static const struct tsadc_table rk3288_code_table[] = {
+	{TSADCV2_DATA_MASK, MIN_TEMP},
+	{3833, MIN_TEMP},
+	{3800, -40000},
+	{3792, -35000},
+	{3783, -30000},
+	{3774, -25000},
+	{3765, -20000},
+	{3756, -15000},
+	{3747, -10000},
+	{3737, -5000},
+	{3728, 0},
+	{3718, 5000},
+	{3708, 10000},
+	{3698, 15000},
+	{3688, 20000},
+	{3678, 25000},
+	{3667, 30000},
+	{3656, 35000},
+	{3645, 40000},
+	{3634, 45000},
+	{3623, 50000},
+	{3611, 55000},
+	{3600, 60000},
+	{3588, 65000},
+	{3575, 70000},
+	{3563, 75000},
+	{3550, 80000},
+	{3537, 85000},
+	{3524, 90000},
+	{3510, 95000},
+	{3496, 100000},
+	{3482, 105000},
+	{3467, 110000},
+	{3452, 115000},
+	{3437, 120000},
+	{3421, 125000},
+	{3350, 145000},
+	{3270, 165000},
+	{3195, MAX_TEMP},
+	{0, MAX_TEMP},
+};
+
+static const struct tsadc_table rk3328_code_table[] = {
+	{0, MIN_TEMP},
+	{261, MIN_TEMP},
+	{296, -40000},
+	{304, -35000},
+	{313, -30000},
+	{331, -20000},
+	{340, -15000},
+	{349, -10000},
+	{359, -5000},
+	{368, 0},
+	{378, 5000},
+	{388, 10000},
+	{398, 15000},
+	{408, 20000},
+	{418, 25000},
+	{429, 30000},
+	{440, 35000},
+	{451, 40000},
+	{462, 45000},
+	{473, 50000},
+	{485, 55000},
+	{496, 60000},
+	{508, 65000},
+	{521, 70000},
+	{533, 75000},
+	{546, 80000},
+	{559, 85000},
+	{572, 90000},
+	{586, 95000},
+	{600, 100000},
+	{614, 105000},
+	{629, 110000},
+	{644, 115000},
+	{659, 120000},
+	{675, 125000},
+	{745, 145000},
+	{825, 165000},
+	{900, MAX_TEMP},
+	{TSADCV2_DATA_MASK, MAX_TEMP},
+};
+
+static const struct tsadc_table rk3368_code_table[] = {
+	{0, MIN_TEMP},
+	{98, MIN_TEMP},
+	{106, -40000},
+	{108, -35000},
+	{110, -30000},
+	{112, -25000},
+	{114, -20000},
+	{116, -15000},
+	{118, -10000},
+	{120, -5000},
+	{122, 0},
+	{124, 5000},
+	{126, 10000},
+	{128, 15000},
+	{130, 20000},
+	{132, 25000},
+	{134, 30000},
+	{136, 35000},
+	{138, 40000},
+	{140, 45000},
+	{142, 50000},
+	{144, 55000},
+	{146, 60000},
+	{148, 65000},
+	{150, 70000},
+	{152, 75000},
+	{154, 80000},
+	{156, 85000},
+	{158, 90000},
+	{160, 95000},
+	{162, 100000},
+	{163, 105000},
+	{165, 110000},
+	{167, 115000},
+	{169, 120000},
+	{171, 125000},
+	{193, MAX_TEMP},
+	{TSADCV3_DATA_MASK, MAX_TEMP},
+};
+
+static const struct tsadc_table rk3399_code_table[] = {
+	{0, MIN_TEMP},
+	{368, MIN_TEMP},
+	{402, -40000},
+	{410, -35000},
+	{419, -30000},
+	{427, -25000},
+	{436, -20000},
+	{444, -15000},
+	{453, -10000},
+	{461, -5000},
+	{470, 0},
+	{478, 5000},
+	{487, 10000},
+	{496, 15000},
+	{504, 20000},
+	{513, 25000},
+	{521, 30000},
+	{530, 35000},
+	{538, 40000},
+	{547, 45000},
+	{555, 50000},
+	{564, 55000},
+	{573, 60000},
+	{581, 65000},
+	{590, 70000},
+	{599, 75000},
+	{607, 80000},
+	{616, 85000},
+	{624, 90000},
+	{633, 95000},
+	{642, 100000},
+	{650, 105000},
+	{659, 110000},
+	{668, 115000},
+	{677, 120000},
+	{685, 125000},
+	{782, MAX_TEMP},
+	{TSADCV3_DATA_MASK, MAX_TEMP},
+};
+
+static const struct tsadc_table rk3528_code_table[] = {
+	{0, MIN_TEMP},
+	{1386, MIN_TEMP},
+	{1419, -40000},
+	{1427, -35000},
+	{1435, -30000},
+	{1443, -25000},
+	{1452, -20000},
+	{1460, -15000},
+	{1468, -10000},
+	{1477, -5000},
+	{1486, 0},
+	{1494, 5000},
+	{1502, 10000},
+	{1510, 15000},
+	{1519, 20000},
+	{1527, 25000},
+	{1535, 30000},
+	{1544, 35000},
+	{1552, 40000},
+	{1561, 45000},
+	{1569, 50000},
+	{1578, 55000},
+	{1586, 60000},
+	{1594, 65000},
+	{1603, 70000},
+	{1612, 75000},
+	{1620, 80000},
+	{1628, 85000},
+	{1637, 90000},
+	{1646, 95000},
+	{1654, 100000},
+	{1662, 105000},
+	{1671, 110000},
+	{1679, 115000},
+	{1688, 120000},
+	{1696, 125000},
+	{1790, MAX_TEMP},
+	{TSADCV5_DATA_MASK, MAX_TEMP},
+};
+
+static const struct tsadc_table rk3562_code_table[] = {
+	{0, MIN_TEMP},
+	{1385, MIN_TEMP},
+	{1419, -40000},
+	{1428, -35000},
+	{1436, -30000},
+	{1445, -25000},
+	{1453, -20000},
+	{1462, -15000},
+	{1470, -10000},
+	{1479, -5000},
+	{1487, 0},
+	{1496, 5000},
+	{1504, 10000},
+	{1512, 15000},
+	{1521, 20000},
+	{1529, 25000},
+	{1538, 30000},
+	{1546, 35000},
+	{1555, 40000},
+	{1563, 45000},
+	{1572, 50000},
+	{1580, 55000},
+	{1589, 60000},
+	{1598, 65000},
+	{1606, 70000},
+	{1615, 75000},
+	{1623, 80000},
+	{1632, 85000},
+	{1640, 90000},
+	{1648, 95000},
+	{1657, 100000},
+	{1666, 105000},
+	{1674, 110000},
+	{1682, 115000},
+	{1691, 120000},
+	{1699, 125000},
+	{1793, MAX_TEMP},
+	{TSADCV2_DATA_MASK, MAX_TEMP},
+};
+
+static const struct tsadc_table rk3568_code_table[] = {
+	{0, MIN_TEMP},
+	{1448, MIN_TEMP},
+	{1584, -40000},
+	{1620, -35000},
+	{1652, -30000},
+	{1688, -25000},
+	{1720, -20000},
+	{1756, -15000},
+	{1788, -10000},
+	{1824, -5000},
+	{1856, 0},
+	{1892, 5000},
+	{1924, 10000},
+	{1956, 15000},
+	{1992, 20000},
+	{2024, 25000},
+	{2060, 30000},
+	{2092, 35000},
+	{2128, 40000},
+	{2160, 45000},
+	{2196, 50000},
+	{2228, 55000},
+	{2264, 60000},
+	{2300, 65000},
+	{2332, 70000},
+	{2368, 75000},
+	{2400, 80000},
+	{2436, 85000},
+	{2468, 90000},
+	{2500, 95000},
+	{2536, 100000},
+	{2572, 105000},
+	{2604, 110000},
+	{2636, 115000},
+	{2672, 120000},
+	{2704, 125000},
+	{3076, MAX_TEMP},
+	{TSADCV2_DATA_MASK, MAX_TEMP},
+};
+
+static const struct tsadc_table rk3588_code_table[] = {
+	{0, MIN_TEMP},
+	{194, MIN_TEMP},
+	{215, -40000},
+	{285, 25000},
+	{350, 85000},
+	{395, 125000},
+	{455, MAX_TEMP},
+	{TSADCV4_DATA_MASK, MAX_TEMP},
+};
+
+/*
+ * Struct used for matching a device
+ */
+struct of_device_id {
+	char compatible[32];
+	const void *data;
+};
+
+static int tsadc_code_to_temp(struct chip_tsadc_table *table, u32 code,
+			      int *temp)
+{
+	unsigned int low = 1;
+	unsigned int high = table->length - 1;
+	unsigned int mid = (low + high) / 2;
+	unsigned int num;
+	unsigned long denom;
+
+	if (table->knum) {
+		*temp = (((int)code - table->bnum) * 10000 / table->knum) * 100;
+		if (*temp < MIN_TEMP || *temp > MAX_TEMP)
+			return -EAGAIN;
+		return 0;
+	}
+
+	switch (table->mode) {
+	case ADC_DECREMENT:
+		code &= table->data_mask;
+		if (code < table->id[high].code)
+			return -EAGAIN;	/* Incorrect reading */
+
+		while (low <= high) {
+			if (code >= table->id[mid].code &&
+			    code < table->id[mid - 1].code)
+				break;
+			else if (code < table->id[mid].code)
+				low = mid + 1;
+			else
+				high = mid - 1;
+
+			mid = (low + high) / 2;
+		}
+		break;
+	case ADC_INCREMENT:
+		code &= table->data_mask;
+		if (code < table->id[low].code)
+			return -EAGAIN;	/* Incorrect reading */
+
+		while (low <= high) {
+			if (code <= table->id[mid].code &&
+			    code > table->id[mid - 1].code)
+				break;
+			else if (code > table->id[mid].code)
+				low = mid + 1;
+			else
+				high = mid - 1;
+
+			mid = (low + high) / 2;
+		}
+		break;
+	default:
+		printf("%s: Invalid the conversion table mode=%d\n",
+		       __func__, table->mode);
+		return -EINVAL;
+	}
+
+	/*
+	 * The 5C granularity provided by the table is too much. Let's
+	 * assume that the relationship between sensor readings and
+	 * temperature between 2 table entries is linear and interpolate
+	 * to produce less granular result.
+	 */
+	num = table->id[mid].temp - table->id[mid - 1].temp;
+	num *= abs(table->id[mid - 1].code - code);
+	denom = abs(table->id[mid - 1].code - table->id[mid].code);
+	*temp = table->id[mid - 1].temp + (num / denom);
+
+	return 0;
+}
+
+static u32 tsadc_temp_to_code_v2(struct chip_tsadc_table table,
+				 int temp)
+{
+	int high, low, mid;
+	unsigned long num;
+	unsigned int denom;
+	u32 error = table.data_mask;
+
+	if (table.knum)
+		return (((temp / 1000) * table.knum) / 1000 + table.bnum);
+
+	low = 0;
+	high = table.length - 1;
+	mid = (high + low) / 2;
+
+	/* Return mask code data when the temp is over table range */
+	if (temp < table.id[low].temp || temp > table.id[high].temp)
+		goto exit;
+
+	while (low <= high) {
+		if (temp == table.id[mid].temp)
+			return table.id[mid].code;
+		else if (temp < table.id[mid].temp)
+			high = mid - 1;
+		else
+			low = mid + 1;
+		mid = (low + high) / 2;
+	}
+
+	num = abs(table.id[mid + 1].code - table.id[mid].code);
+	num *= temp - table.id[mid].temp;
+	denom = table.id[mid + 1].temp - table.id[mid].temp;
+
+	switch (table.mode) {
+	case ADC_DECREMENT:
+		return table.id[mid].code - (num / denom);
+	case ADC_INCREMENT:
+		return table.id[mid].code + (num / denom);
+	default:
+		pr_err("%s: unknown table mode: %d\n", __func__, table.mode);
+		return error;
+	}
+
+exit:
+	pr_err("%s: Invalid conversion table: code=%d, temperature=%d\n",
+	       __func__, error, temp);
+
+	return error;
+}
+
+static void tsadc_irq_ack_v2(struct udevice *dev)
+{
+	struct rockchip_thermal_priv *priv = dev_get_priv(dev);
+	u32 val;
+
+	val = readl(priv->base + TSADCV2_INT_PD);
+	writel(val & TSADCV2_INT_PD_CLEAR_MASK, priv->base + TSADCV2_INT_PD);
+}
+
+static void tsadc_irq_ack_v3(struct udevice *dev)
+{
+	struct rockchip_thermal_priv *priv = dev_get_priv(dev);
+	u32 val;
+
+	val = readl(priv->base + TSADCV2_INT_PD);
+	writel(val & TSADCV3_INT_PD_CLEAR_MASK, priv->base + TSADCV2_INT_PD);
+}
+
+static void tsadc_irq_ack_v4(struct udevice *dev)
+{
+	struct rockchip_thermal_priv *priv = dev_get_priv(dev);
+	u32 val;
+
+	val = readl(priv->base + TSADCV3_INT_PD);
+	writel(val & TSADCV4_INT_PD_CLEAR_MASK, priv->base + TSADCV3_INT_PD);
+	val = readl(priv->base + TSADCV3_HSHUT_PD);
+	writel(val & TSADCV3_INT_PD_CLEAR_MASK, priv->base + TSADCV3_HSHUT_PD);
+}
+
+static void tsadc_control_v2(struct udevice *dev, bool enable)
+{
+	struct rockchip_thermal_priv *priv = dev_get_priv(dev);
+	u32 val;
+
+	val = readl(priv->base + TSADCV2_AUTO_CON);
+	if (enable)
+		val |= TSADCV2_AUTO_EN;
+	else
+		val &= ~TSADCV2_AUTO_EN;
+
+	writel(val, priv->base + TSADCV2_AUTO_CON);
+}
+
+static void tsadc_control_v3(struct udevice *dev, bool enable)
+{
+	struct rockchip_thermal_priv *priv = dev_get_priv(dev);
+	u32 val;
+
+	val = readl(priv->base + TSADCV2_AUTO_CON);
+	if (enable)
+		val |= TSADCV2_AUTO_EN | TSADCV3_AUTO_Q_SEL_EN;
+	else
+		val &= ~TSADCV2_AUTO_EN;
+
+	writel(val, priv->base + TSADCV2_AUTO_CON);
+}
+
+static void tsadc_control_v4(struct udevice *dev, bool enable)
+{
+	struct rockchip_thermal_priv *priv = dev_get_priv(dev);
+	u32 val;
+
+	if (enable)
+		val = TSADCV2_AUTO_EN | TSADCV2_AUTO_EN_MASK;
+	else
+		val = TSADCV2_AUTO_EN_MASK;
+
+	writel(val, priv->base + TSADCV2_AUTO_CON);
+}
+
+static void tsadc_init_v2(struct udevice *dev)
+{
+	struct rockchip_thermal_priv *priv = dev_get_priv(dev);
+
+	writel(TSADCV2_AUTO_PERIOD_TIME,
+	       priv->base + TSADCV2_AUTO_PERIOD);
+	writel(TSADCV2_HIGHT_INT_DEBOUNCE_COUNT,
+	       priv->base + TSADCV2_HIGHT_INT_DEBOUNCE);
+	writel(TSADCV2_AUTO_PERIOD_HT_TIME,
+	       priv->base + TSADCV2_AUTO_PERIOD_HT);
+	writel(TSADCV2_HIGHT_TSHUT_DEBOUNCE_COUNT,
+	       priv->base + TSADCV2_HIGHT_TSHUT_DEBOUNCE);
+
+	if (priv->tshut_polarity == TSHUT_HIGH_ACTIVE)
+		writel(0U | TSADCV2_AUTO_TSHUT_POLARITY_HIGH,
+		       priv->base + TSADCV2_AUTO_CON);
+	else
+		writel(0U & ~TSADCV2_AUTO_TSHUT_POLARITY_HIGH,
+		       priv->base + TSADCV2_AUTO_CON);
+}
+
+static void tsadc_init_v3(struct udevice *dev)
+{
+	struct rockchip_thermal_priv *priv = dev_get_priv(dev);
+
+	if (!IS_ERR(priv->grf)) {
+		writel(GRF_TSADC_VCM_EN_L, priv->grf + GRF_TSADC_TESTBIT_L);
+		writel(GRF_TSADC_VCM_EN_H, priv->grf + GRF_TSADC_TESTBIT_H);
+
+		udelay(100);/* The spec note says at least 15 us */
+		writel(GRF_SARADC_TESTBIT_ON, priv->grf + GRF_SARADC_TESTBIT);
+		writel(GRF_TSADC_TESTBIT_H_ON, priv->grf + GRF_TSADC_TESTBIT_H);
+		udelay(200);/* The spec note says at least 90 us */
+	}
+	tsadc_init_v2(dev);
+}
+
+static void __maybe_unused tsadc_init_v5(struct udevice *dev)
+{
+	struct rockchip_thermal_priv *priv = dev_get_priv(dev);
+
+	/* Set interleave value to workround ic time sync issue */
+	writel(TSADCV2_USER_INTER_PD_SOC, priv->base +
+		       TSADCV2_USER_CON);
+	tsadc_init_v2(dev);
+}
+
+static void tsadc_init_v4(struct udevice *dev)
+{
+	struct rockchip_thermal_priv *priv = dev_get_priv(dev);
+
+	tsadc_init_v2(dev);
+	if (!IS_ERR(priv->grf))
+		writel(GRF_CON_TSADC_CH_INV, priv->grf + PX30_GRF_SOC_CON2);
+}
+
+static void tsadc_init_v7(struct udevice *dev)
+{
+	struct rockchip_thermal_priv *priv = dev_get_priv(dev);
+
+	writel(TSADCV5_USER_INTER_PD_SOC,
+	       priv->base + TSADCV2_USER_CON);
+	writel(TSADCV5_AUTO_PERIOD_TIME,
+	       priv->base + TSADCV2_AUTO_PERIOD);
+	writel(TSADCV2_HIGHT_INT_DEBOUNCE_COUNT,
+	       priv->base + TSADCV2_HIGHT_INT_DEBOUNCE);
+	writel(TSADCV5_AUTO_PERIOD_HT_TIME,
+	       priv->base + TSADCV2_AUTO_PERIOD_HT);
+	writel(TSADCV2_HIGHT_TSHUT_DEBOUNCE_COUNT,
+	       priv->base + TSADCV2_HIGHT_TSHUT_DEBOUNCE);
+
+	if (priv->tshut_polarity == TSHUT_HIGH_ACTIVE)
+		writel(0U | TSADCV2_AUTO_TSHUT_POLARITY_HIGH,
+		       priv->base + TSADCV2_AUTO_CON);
+	else
+		writel(0U & ~TSADCV2_AUTO_TSHUT_POLARITY_HIGH,
+		       priv->base + TSADCV2_AUTO_CON);
+
+	if (!IS_ERR(priv->grf)) {
+		writel(RK3568_GRF_TSADC_TSEN,
+		       priv->grf + RK3568_GRF_TSADC_CON);
+		udelay(15);
+		writel(RK3568_GRF_TSADC_ANA_REG0,
+		       priv->grf + RK3568_GRF_TSADC_CON);
+		writel(RK3568_GRF_TSADC_ANA_REG1,
+		       priv->grf + RK3568_GRF_TSADC_CON);
+		writel(RK3568_GRF_TSADC_ANA_REG2,
+		       priv->grf + RK3568_GRF_TSADC_CON);
+		udelay(200);
+	}
+}
+
+static void tsadc_init_v8(struct udevice *dev)
+{
+	struct rockchip_thermal_priv *priv = dev_get_priv(dev);
+
+	writel(TSADCV6_AUTO_PERIOD_TIME, priv->base + TSADCV3_AUTO_PERIOD);
+	writel(TSADCV6_AUTO_PERIOD_HT_TIME,
+	       priv->base + TSADCV3_AUTO_PERIOD_HT);
+	writel(TSADCV2_HIGHT_INT_DEBOUNCE_COUNT,
+	       priv->base + TSADCV3_HIGHT_INT_DEBOUNCE);
+	writel(TSADCV2_HIGHT_TSHUT_DEBOUNCE_COUNT,
+	       priv->base + TSADCV3_HIGHT_TSHUT_DEBOUNCE);
+
+	if (priv->tshut_polarity == TSHUT_HIGH_ACTIVE)
+		writel(TSADCV2_AUTO_TSHUT_POLARITY_HIGH |
+		       TSADCV2_AUTO_TSHUT_POLARITY_MASK,
+		       priv->base + TSADCV2_AUTO_CON);
+	else
+		writel(TSADCV2_AUTO_TSHUT_POLARITY_MASK,
+		       priv->base + TSADCV2_AUTO_CON);
+};
+
+static void tsadc_init_v9(struct udevice *dev)
+{
+	struct rockchip_thermal_priv *priv = dev_get_priv(dev);
+
+	tsadc_init_v2(dev);
+	if (!IS_ERR(priv->grf))
+		writel(PX30S_TSADC_TDC_MODE, priv->grf + PX30_GRF_SOC_CON0);
+}
+
+static void tsadc_init_v11(struct udevice *dev)
+{
+	struct rockchip_thermal_priv *priv = dev_get_priv(dev);
+
+	writel(TSADCV7_AUTO_PERIOD_TIME, priv->base + TSADCV3_AUTO_PERIOD);
+	writel(TSADCV7_AUTO_PERIOD_HT_TIME,
+	       priv->base + TSADCV3_AUTO_PERIOD_HT);
+	writel(TSADCV2_HIGHT_INT_DEBOUNCE_COUNT,
+	       priv->base + TSADCV3_HIGHT_INT_DEBOUNCE);
+	writel(TSADCV2_HIGHT_TSHUT_DEBOUNCE_COUNT,
+	       priv->base + TSADCV3_HIGHT_TSHUT_DEBOUNCE);
+	writel(TSADCV3_Q_MAX_VAL, priv->base + TSADCV3_Q_MAX);
+	writel(TSADCV3_AUTO_Q_SEL_EN | TSADCV3_AUTO_Q_SEL_EN_MASK,
+	       priv->base + TSADCV2_AUTO_CON);
+
+	if (priv->tshut_polarity == TSHUT_HIGH_ACTIVE)
+		writel(TSADCV2_AUTO_TSHUT_POLARITY_HIGH |
+		       TSADCV2_AUTO_TSHUT_POLARITY_MASK,
+		       priv->base + TSADCV2_AUTO_CON);
+	else
+		writel(TSADCV2_AUTO_TSHUT_POLARITY_MASK,
+		       priv->base + TSADCV2_AUTO_CON);
+
+	if (!IS_ERR(priv->grf)) {
+		writel(RK3568_GRF_TSADC_TSEN,
+		       priv->grf + RK3528_GRF_TSADC_CON);
+		udelay(15);
+		writel(RK3568_GRF_TSADC_ANA_REG0,
+		       priv->grf + RK3528_GRF_TSADC_CON);
+		writel(RK3568_GRF_TSADC_ANA_REG1,
+		       priv->grf + RK3528_GRF_TSADC_CON);
+		writel(RK3568_GRF_TSADC_ANA_REG2,
+		       priv->grf + RK3528_GRF_TSADC_CON);
+		udelay(200);
+	}
+}
+
+static void tsadc_init_v12(struct udevice *dev)
+{
+	struct rockchip_thermal_priv *priv = dev_get_priv(dev);
+
+	writel(TSADCV12_AUTO_PERIOD_TIME,
+	       priv->base + TSADCV3_AUTO_PERIOD);
+	writel(TSADCV12_AUTO_PERIOD_HT_TIME,
+	       priv->base + TSADCV3_AUTO_PERIOD_HT);
+	writel(TSADCV2_HIGHT_INT_DEBOUNCE_COUNT,
+	       priv->base + TSADCV3_HIGHT_INT_DEBOUNCE);
+	writel(TSADCV2_HIGHT_TSHUT_DEBOUNCE_COUNT,
+	       priv->base + TSADCV3_HIGHT_TSHUT_DEBOUNCE);
+	writel(TSADCV12_Q_MAX_VAL,
+	       priv->base + TSADCV9_Q_MAX);
+	writel(TSADCV3_AUTO_Q_SEL_EN | TSADCV3_AUTO_Q_SEL_EN_MASK,
+	       priv->base + TSADCV2_AUTO_CON);
+	if (priv->tshut_polarity == TSHUT_HIGH_ACTIVE)
+		writel(TSADCV2_AUTO_TSHUT_POLARITY_HIGH |
+		       TSADCV2_AUTO_TSHUT_POLARITY_MASK,
+		       priv->base + TSADCV2_AUTO_CON);
+	else
+		writel(TSADCV2_AUTO_TSHUT_POLARITY_MASK,
+		       priv->base + TSADCV2_AUTO_CON);
+
+	if (!IS_ERR(priv->grf)) {
+		writel(RK3568_GRF_TSADC_TSEN,
+		       priv->grf + RK3562_GRF_TSADC_CON);
+		udelay(15);
+		writel(RK3568_GRF_TSADC_ANA_REG0,
+		       priv->grf + RK3562_GRF_TSADC_CON);
+		writel(RK3568_GRF_TSADC_ANA_REG1,
+		       priv->grf + RK3562_GRF_TSADC_CON);
+		writel(RK3568_GRF_TSADC_ANA_REG2,
+		       priv->grf + RK3562_GRF_TSADC_CON);
+		udelay(200);
+	}
+}
+
+static int tsadc_get_temp_v2(struct udevice *dev,
+			     int chn, int *temp)
+{
+	struct rockchip_thermal_priv *priv = dev_get_priv(dev);
+	struct chip_tsadc_table table = priv->data->table;
+	u32 val;
+
+	val = readl(priv->base + TSADCV2_DATA(chn));
+
+	return tsadc_code_to_temp(&table, val, temp);
+}
+
+static int predict_temp(int temp)
+{
+	/*
+	 * The deviation of prediction. the temperature will not change rapidly,
+	 * so this cov_q is small
+	 */
+	int cov_q = 18;
+	/*
+	 * The deviation of tsadc's reading, deviation of tsadc is very big when
+	 * abnormal temperature is get
+	 */
+	int cov_r = 542;
+
+	int gain;
+	int temp_mid;
+	int temp_now;
+	int prob_mid;
+	int prob_now;
+	static int temp_last = LOWEST_TEMP;
+	static int prob_last = 160;
+	static int bounding_cnt;
+
+	/*
+	 * init temp_last with a more suitable value, which mostly equals to
+	 * temp reading from tsadc, but not higher than MAX_ENV_TEMP. If the
+	 * temp is higher than MAX_ENV_TEMP, it is assumed to be abnormal
+	 * value and temp_last is adjusted to MAX_ENV_TEMP.
+	 */
+	if (temp_last == LOWEST_TEMP)
+		temp_last = min(temp, MAX_ENV_TEMP);
+
+	/*
+	 * Before START_DEBOUNCE_COUNT's samples of temperature, we consider
+	 * tsadc is stable, i.e. after that, the temperature may be not stable
+	 * and may have abnormal reading, so we set a bounding temperature. If
+	 * the reading from tsadc is too big, we set the delta temperature of
+	 * DEBOUNCE_TEMP/3 comparing to the last temperature.
+	 */
+
+	if (bounding_cnt++ > START_DEBOUNCE_COUNT) {
+		bounding_cnt = START_DEBOUNCE_COUNT;
+		if (temp - temp_last > HIGHER_DEBOUNCE_TEMP)
+			temp = temp_last + HIGHER_DEBOUNCE_TEMP / 3;
+		if (temp_last - temp > LOWER_DEBOUNCE_TEMP)
+			temp = temp_last - LOWER_DEBOUNCE_TEMP / 3;
+	}
+
+	temp_mid = temp_last;
+
+	/* calculate the probability of this time's prediction */
+	prob_mid = prob_last + cov_q;
+
+	/* calculate the Kalman Gain */
+	gain = (prob_mid * BASE) / (prob_mid + cov_r);
+
+	/* calculate the prediction of temperature */
+	temp_now = (temp_mid * BASE + gain * (temp - temp_mid)) >> BASE_SHIFT;
+
+	/*
+	 * Base on this time's Kalman Gain, ajust our probability of prediction
+	 * for next time calculation
+	 */
+	prob_now = ((BASE - gain) * prob_mid) >> BASE_SHIFT;
+
+	prob_last = prob_now;
+	temp_last = temp_now;
+
+	return temp_last;
+}
+
+static int tsadc_get_temp_v3(struct udevice *dev,
+			     int chn, int *temp)
+{
+	int ret;
+
+	ret = tsadc_get_temp_v2(dev, chn, temp);
+	if (!ret)
+		*temp = predict_temp(*temp);
+
+	return ret;
+}
+
+static int tsadc_get_temp_v4(struct udevice *dev, int chn, int *temp)
+{
+	struct rockchip_thermal_priv *priv = dev_get_priv(dev);
+	struct chip_tsadc_table table = priv->data->table;
+	u32 val;
+
+	val = readl(priv->base + TSADCV3_DATA(chn));
+
+	return tsadc_code_to_temp(&table, val, temp);
+}
+
+static void tsadc_alarm_temp_v2(struct udevice *dev,
+				int chn, int temp)
+{
+	struct rockchip_thermal_priv *priv = dev_get_priv(dev);
+	struct chip_tsadc_table table = priv->data->table;
+	u32 alarm_value, int_en;
+
+	alarm_value = tsadc_temp_to_code_v2(table, temp);
+	if (alarm_value == table.data_mask)
+		return;
+
+	writel(alarm_value, priv->base + TSADCV2_COMP_INT(chn));
+
+	int_en = readl(priv->base + TSADCV2_INT_EN);
+	int_en |= TSADCV2_INT_SRC_EN(chn);
+	writel(int_en, priv->base + TSADCV2_INT_EN);
+}
+
+static void tsadc_alarm_temp_v3(struct udevice *dev, int chn, int temp)
+{
+	struct rockchip_thermal_priv *priv = dev_get_priv(dev);
+	struct chip_tsadc_table table = priv->data->table;
+	u32 alarm_value;
+
+	alarm_value = tsadc_temp_to_code_v2(table, temp);
+	if (alarm_value == table.data_mask)
+		return;
+
+	writel(alarm_value, priv->base + TSADCV3_COMP_INT(chn));
+	writel(TSADCV2_INT_SRC_EN(chn) | TSADCV2_INT_SRC_EN_MASK(chn),
+	       priv->base + TSADCV3_HT_INT_EN);
+}
+
+static void tsadc_tshut_temp_v2(struct udevice *dev,
+				int chn, int temp)
+{
+	struct rockchip_thermal_priv *priv = dev_get_priv(dev);
+	struct chip_tsadc_table table = priv->data->table;
+	u32 tshut_value, val;
+
+	tshut_value = tsadc_temp_to_code_v2(table, temp);
+	if (tshut_value == table.data_mask)
+		return;
+
+	writel(tshut_value, priv->base + TSADCV2_COMP_SHUT(chn));
+
+	/* TSHUT will be valid */
+	val = readl(priv->base + TSADCV2_AUTO_CON);
+	writel(val | TSADCV2_AUTO_SRC_EN(chn), priv->base + TSADCV2_AUTO_CON);
+}
+
+static void tsadc_tshut_temp_v3(struct udevice *dev, int chn, int temp)
+{
+	struct rockchip_thermal_priv *priv = dev_get_priv(dev);
+	struct chip_tsadc_table table = priv->data->table;
+	u32 tshut_value;
+
+	tshut_value = tsadc_temp_to_code_v2(table, temp);
+	if (tshut_value == table.data_mask)
+		return;
+
+	writel(tshut_value, priv->base + TSADCV3_COMP_SHUT(chn));
+	writel(TSADCV3_AUTO_SRC_EN(chn) | TSADCV3_AUTO_SRC_EN_MASK(chn),
+	       priv->base + TSADCV3_AUTO_SRC_CON);
+}
+
+static void tsadc_tshut_mode_v2(struct udevice *dev, int chn,
+				enum tshut_mode mode)
+{
+	struct rockchip_thermal_priv *priv = dev_get_priv(dev);
+	u32 val;
+
+	val = readl(priv->base + TSADCV2_INT_EN);
+	if (mode == TSHUT_MODE_GPIO) {
+		val &= ~TSADCV2_SHUT_2CRU_SRC_EN(chn);
+		val |= TSADCV2_SHUT_2GPIO_SRC_EN(chn);
+	} else {
+		val &= ~TSADCV2_SHUT_2GPIO_SRC_EN(chn);
+		val |= TSADCV2_SHUT_2CRU_SRC_EN(chn);
+	}
+
+	writel(val, priv->base + TSADCV2_INT_EN);
+}
+
+static void tsadc_tshut_mode_v4(struct udevice *dev, int chn,
+				enum tshut_mode mode)
+{
+	struct rockchip_thermal_priv *priv = dev_get_priv(dev);
+	u32 val_gpio, val_cru;
+
+	if (mode == TSHUT_MODE_GPIO) {
+		val_gpio = TSADCV2_INT_SRC_EN(chn) | TSADCV2_INT_SRC_EN_MASK(chn);
+		val_cru = TSADCV2_INT_SRC_EN_MASK(chn);
+	} else {
+		val_cru = TSADCV2_INT_SRC_EN(chn) | TSADCV2_INT_SRC_EN_MASK(chn);
+		val_gpio = TSADCV2_INT_SRC_EN_MASK(chn);
+	}
+	writel(val_gpio, priv->base + TSADCV3_HSHUT_GPIO_INT_EN);
+	writel(val_cru, priv->base + TSADCV3_HSHUT_CRU_INT_EN);
+}
+
+int rockchip_thermal_get_temp(struct udevice *dev, int *temp)
+{
+	struct rockchip_thermal_priv *priv = dev_get_priv(dev);
+
+	priv->data->tsadc_get_temp(dev, 0, temp);
+
+	return 0;
+}
+
+static const struct dm_thermal_ops rockchip_thermal_ops = {
+	.get_temp	= rockchip_thermal_get_temp,
+};
+
+static const struct rockchip_tsadc_chip px30s_tsadc_data = {
+	.chn_id[SENSOR_CPU] = 0, /* cpu sensor is channel 0 */
+	.chn_id[SENSOR_GPU] = 1, /* gpu sensor is channel 1 */
+	.chn_num = 2, /* 2 channels for tsadc */
+
+	.tshut_mode = TSHUT_MODE_CRU, /* default TSHUT via CRU */
+	.tshut_temp = 95000,
+
+	.tsadc_init = tsadc_init_v9,
+	.tsadc_control = tsadc_control_v2,
+	.tsadc_get_temp = tsadc_get_temp_v2,
+	.irq_ack = tsadc_irq_ack_v3,
+	.set_alarm_temp = tsadc_alarm_temp_v2,
+	.set_tshut_temp = tsadc_tshut_temp_v2,
+	.set_tshut_mode = tsadc_tshut_mode_v2,
+
+	.table = {
+		.knum = 2699,
+		.bnum = 2796,
+		.data_mask = TSADCV2_DATA_MASK,
+		.mode = ADC_INCREMENT,
+	},
+};
+
+static const struct rockchip_tsadc_chip rk3308bs_tsadc_data = {
+	.chn_id[SENSOR_CPU] = 0, /* cpu sensor is channel 0 */
+	.chn_num = 1, /* 1 channels for tsadc */
+
+	.tshut_mode = TSHUT_MODE_CRU, /* default TSHUT via CRU */
+	.tshut_temp = 95000,
+
+	.tsadc_init = tsadc_init_v2,
+	.tsadc_control = tsadc_control_v2,
+	.tsadc_get_temp = tsadc_get_temp_v2,
+	.irq_ack = tsadc_irq_ack_v3,
+	.set_alarm_temp = tsadc_alarm_temp_v2,
+	.set_tshut_temp = tsadc_tshut_temp_v2,
+	.set_tshut_mode = tsadc_tshut_mode_v2,
+
+	.table = {
+		.knum = 2699,
+		.bnum = 2796,
+		.data_mask = TSADCV2_DATA_MASK,
+		.mode = ADC_INCREMENT,
+	},
+};
+
+static int rockchip_thermal_probe(struct udevice *dev)
+{
+	struct rockchip_thermal_priv *priv = dev_get_priv(dev);
+	struct rockchip_tsadc_chip *tsadc;
+	struct clk clk;
+	int ret, i, shut_temp;
+
+	/* Process 'assigned-{clocks/clock-parents/clock-rates}' properties */
+	ret = clk_set_defaults(dev,1);
+	if (ret)
+		printf("%s clk_set_defaults failed %d\n", __func__, ret);
+
+	
+	tsadc = (struct rockchip_tsadc_chip *)dev_get_driver_data(dev);
+
+	priv->data = tsadc;
+
+	priv->tshut_mode = dev_read_u32_default(dev,
+						"rockchip,hw-tshut-mode",
+						-1);
+	if (priv->tshut_mode < 0)
+		priv->tshut_mode = priv->data->tshut_mode;
+
+	priv->tshut_polarity = dev_read_u32_default(dev,
+						    "rockchip,hw-tshut-polarity",
+						    -1);
+	if (priv->tshut_polarity < 0)
+		priv->tshut_polarity = tsadc->tshut_polarity;
+
+	if (priv->tshut_mode == TSHUT_MODE_GPIO)
+		pinctrl_select_state(dev, "otpout");
+
+	tsadc->tsadc_init(dev);
+	tsadc->irq_ack(dev);
+
+	shut_temp = dev_read_u32_default(dev, "rockchip,hw-tshut-temp", -1);
+	if (shut_temp < 0)
+		shut_temp = 120000;
+
+	for (i = 0; i < tsadc->chn_num; i++) {
+		tsadc->set_alarm_temp(dev, i, tsadc->tshut_temp);
+		tsadc->set_tshut_temp(dev, i, shut_temp);
+		if (priv->tshut_mode == TSHUT_MODE_GPIO)
+			tsadc->set_tshut_mode(dev, i, TSHUT_MODE_GPIO);
+		else
+			tsadc->set_tshut_mode(dev, i, TSHUT_MODE_CRU);
+	}
+
+	tsadc->tsadc_control(dev, true);
+	udelay(1000);
+
+	debug("tsadc probed successfully\n");
+
+	return 0;
+}
+
+static int rockchip_thermal_ofdata_to_platdata(struct udevice *dev)
+{
+	struct rockchip_thermal_priv *priv = dev_get_priv(dev);
+
+	priv->base = dev_read_addr_ptr(dev);
+	priv->grf = syscon_get_first_range(ROCKCHIP_SYSCON_GRF);
+
+	return 0;
+}
+
+static const struct rockchip_tsadc_chip rk1808_tsadc_data = {
+	.chn_id[SENSOR_CPU] = 0, /* cpu sensor is channel 0 */
+	.chn_num = 1, /* one channel for tsadc */
+
+	.tshut_mode = TSHUT_MODE_GPIO, /* default TSHUT via GPIO give PMIC */
+	.tshut_polarity = TSHUT_LOW_ACTIVE, /* default TSHUT LOW ACTIVE */
+	.tshut_temp = 95000,
+
+	.tsadc_init = tsadc_init_v2,
+	.tsadc_control = tsadc_control_v3,
+	.tsadc_get_temp = tsadc_get_temp_v2,
+	.irq_ack = tsadc_irq_ack_v3,
+	.set_alarm_temp = tsadc_alarm_temp_v2,
+	.set_tshut_temp = tsadc_tshut_temp_v2,
+	.set_tshut_mode = tsadc_tshut_mode_v2,
+
+	.table = {
+		.id = rk1808_code_table,
+		.length = ARRAY_SIZE(rk1808_code_table),
+		.data_mask = TSADCV2_DATA_MASK,
+		.mode = ADC_INCREMENT,
+	},
+};
+
+static const struct rockchip_tsadc_chip rk3228_tsadc_data = {
+	.chn_id[SENSOR_CPU] = 0, /* cpu sensor is channel 0 */
+	.chn_num = 1, /* one channel for tsadc */
+
+	.tshut_mode = TSHUT_MODE_GPIO, /* default TSHUT via GPIO give PMIC */
+	.tshut_polarity = TSHUT_LOW_ACTIVE, /* default TSHUT LOW ACTIVE */
+	.tshut_temp = 95000,
+
+	.tsadc_init = tsadc_init_v2,
+	.tsadc_control = tsadc_control_v3,
+	.tsadc_get_temp = tsadc_get_temp_v2,
+	.irq_ack = tsadc_irq_ack_v3,
+	.set_alarm_temp = tsadc_alarm_temp_v2,
+	.set_tshut_temp = tsadc_tshut_temp_v2,
+	.set_tshut_mode = tsadc_tshut_mode_v2,
+
+	.table = {
+		.id = rk3228_code_table,
+		.length = ARRAY_SIZE(rk3228_code_table),
+		.data_mask = TSADCV3_DATA_MASK,
+		.mode = ADC_INCREMENT,
+	},
+};
+
+static const struct rockchip_tsadc_chip rk3288_tsadc_data = {
+	.chn_id[SENSOR_CPU] = 1, /* cpu sensor is channel 1 */
+	.chn_id[SENSOR_GPU] = 2, /* gpu sensor is channel 2 */
+	.chn_num = 2, /* two channels for tsadc */
+
+	.tshut_mode = TSHUT_MODE_GPIO, /* default TSHUT via GPIO give PMIC */
+	.tshut_polarity = TSHUT_LOW_ACTIVE, /* default TSHUT LOW ACTIVE */
+	.tshut_temp = 95000,
+
+	.tsadc_init = tsadc_init_v2,
+	.tsadc_control = tsadc_control_v2,
+	.tsadc_get_temp = tsadc_get_temp_v3,
+	.irq_ack = tsadc_irq_ack_v2,
+	.set_alarm_temp = tsadc_alarm_temp_v2,
+	.set_tshut_temp = tsadc_tshut_temp_v2,
+	.set_tshut_mode = tsadc_tshut_mode_v2,
+
+	.table = {
+		.id = rk3288_code_table,
+		.length = ARRAY_SIZE(rk3288_code_table),
+		.data_mask = TSADCV2_DATA_MASK,
+		.mode = ADC_DECREMENT,
+	},
+};
+
+static const struct rockchip_tsadc_chip rk3308_tsadc_data = {
+	.chn_id[SENSOR_CPU] = 0, /* cpu sensor is channel 0 */
+	.chn_id[SENSOR_GPU] = 1, /* gpu sensor is channel 1 */
+	.chn_num = 2, /* 2 channels for tsadc */
+
+	.tshut_mode = TSHUT_MODE_CRU, /* default TSHUT via CRU */
+	.tshut_temp = 95000,
+
+	.tsadc_init = tsadc_init_v4,
+	.tsadc_control = tsadc_control_v3,
+	.tsadc_get_temp = tsadc_get_temp_v2,
+	.irq_ack = tsadc_irq_ack_v3,
+	.set_alarm_temp = tsadc_alarm_temp_v2,
+	.set_tshut_temp = tsadc_tshut_temp_v2,
+	.set_tshut_mode = tsadc_tshut_mode_v2,
+
+	.table = {
+		.id = rk3328_code_table,
+		.length = ARRAY_SIZE(rk3328_code_table),
+		.data_mask = TSADCV2_DATA_MASK,
+		.mode = ADC_INCREMENT,
+	},
+};
+
+static const struct rockchip_tsadc_chip px30_tsadc_data = {
+	.chn_id[SENSOR_CPU] = 0, /* cpu sensor is channel 0 */
+	.chn_id[SENSOR_GPU] = 1, /* gpu sensor is channel 1 */
+	.chn_num = 2, /* 2 channels for tsadc */
+
+	.tshut_mode = TSHUT_MODE_CRU, /* default TSHUT via CRU */
+	.tshut_temp = 95000,
+
+	.tsadc_init = tsadc_init_v4,
+	.tsadc_control = tsadc_control_v3,
+	.tsadc_get_temp = tsadc_get_temp_v2,
+	.irq_ack = tsadc_irq_ack_v3,
+	.set_alarm_temp = tsadc_alarm_temp_v2,
+	.set_tshut_temp = tsadc_tshut_temp_v2,
+	.set_tshut_mode = tsadc_tshut_mode_v2,
+
+	.table = {
+		.id = rk3328_code_table,
+		.length = ARRAY_SIZE(rk3328_code_table),
+		.data_mask = TSADCV2_DATA_MASK,
+		.mode = ADC_INCREMENT,
+	},
+};
+
+static const struct rockchip_tsadc_chip rk3328_tsadc_data = {
+	.chn_id[SENSOR_CPU] = 0, /* cpu sensor is channel 0 */
+	.chn_num = 1, /* one channels for tsadc */
+
+	.tshut_mode = TSHUT_MODE_CRU, /* default TSHUT via CRU */
+	.tshut_temp = 95000,
+
+	.tsadc_init = tsadc_init_v2,
+	.tsadc_control = tsadc_control_v3,
+	.tsadc_get_temp = tsadc_get_temp_v2,
+	.irq_ack = tsadc_irq_ack_v3,
+	.set_alarm_temp = tsadc_alarm_temp_v2,
+	.set_tshut_temp = tsadc_tshut_temp_v2,
+	.set_tshut_mode = tsadc_tshut_mode_v2,
+
+	.table = {
+		.id = rk3328_code_table,
+		.length = ARRAY_SIZE(rk3328_code_table),
+		.data_mask = TSADCV2_DATA_MASK,
+		.mode = ADC_INCREMENT,
+	},
+};
+
+static const struct rockchip_tsadc_chip rk3366_tsadc_data = {
+	.chn_id[SENSOR_CPU] = 0, /* cpu sensor is channel 0 */
+	.chn_id[SENSOR_GPU] = 1, /* gpu sensor is channel 1 */
+	.chn_num = 2, /* two channels for tsadc */
+
+	.tshut_mode = TSHUT_MODE_GPIO, /* default TSHUT via GPIO give PMIC */
+	.tshut_polarity = TSHUT_LOW_ACTIVE, /* default TSHUT LOW ACTIVE */
+	.tshut_temp = 95000,
+
+	.tsadc_init = tsadc_init_v3,
+	.tsadc_control = tsadc_control_v3,
+	.tsadc_get_temp = tsadc_get_temp_v2,
+	.irq_ack = tsadc_irq_ack_v3,
+	.set_alarm_temp = tsadc_alarm_temp_v2,
+	.set_tshut_temp = tsadc_tshut_temp_v2,
+	.set_tshut_mode = tsadc_tshut_mode_v2,
+
+	.table = {
+		.id = rk3228_code_table,
+		.length = ARRAY_SIZE(rk3228_code_table),
+		.data_mask = TSADCV3_DATA_MASK,
+		.mode = ADC_INCREMENT,
+	},
+};
+
+static const struct rockchip_tsadc_chip rk3368_tsadc_data = {
+	.chn_id[SENSOR_CPU] = 0, /* cpu sensor is channel 0 */
+	.chn_id[SENSOR_GPU] = 1, /* gpu sensor is channel 1 */
+	.chn_num = 2, /* two channels for tsadc */
+
+	.tshut_mode = TSHUT_MODE_GPIO, /* default TSHUT via GPIO give PMIC */
+	.tshut_polarity = TSHUT_LOW_ACTIVE, /* default TSHUT LOW ACTIVE */
+	.tshut_temp = 95000,
+
+	.tsadc_init = tsadc_init_v2,
+	.tsadc_control = tsadc_control_v2,
+	.tsadc_get_temp = tsadc_get_temp_v2,
+	.irq_ack = tsadc_irq_ack_v2,
+	.set_alarm_temp = tsadc_alarm_temp_v2,
+	.set_tshut_temp = tsadc_tshut_temp_v2,
+	.set_tshut_mode = tsadc_tshut_mode_v2,
+
+	.table = {
+		.id = rk3368_code_table,
+		.length = ARRAY_SIZE(rk3368_code_table),
+		.data_mask = TSADCV3_DATA_MASK,
+		.mode = ADC_INCREMENT,
+	},
+};
+
+static const struct rockchip_tsadc_chip rk3399_tsadc_data = {
+	.chn_id[SENSOR_CPU] = 0, /* cpu sensor is channel 0 */
+	.chn_id[SENSOR_GPU] = 1, /* gpu sensor is channel 1 */
+	.chn_num = 2, /* two channels for tsadc */
+
+	.tshut_mode = TSHUT_MODE_GPIO, /* default TSHUT via GPIO give PMIC */
+	.tshut_polarity = TSHUT_LOW_ACTIVE, /* default TSHUT LOW ACTIVE */
+	.tshut_temp = 95000,
+
+	.tsadc_init = tsadc_init_v3,
+	.tsadc_control = tsadc_control_v3,
+	.tsadc_get_temp = tsadc_get_temp_v2,
+	.irq_ack = tsadc_irq_ack_v3,
+	.set_alarm_temp = tsadc_alarm_temp_v2,
+	.set_tshut_temp = tsadc_tshut_temp_v2,
+	.set_tshut_mode = tsadc_tshut_mode_v2,
+
+	.table = {
+		.id = rk3399_code_table,
+		.length = ARRAY_SIZE(rk3399_code_table),
+		.data_mask = TSADCV3_DATA_MASK,
+		.mode = ADC_INCREMENT,
+	},
+};
+
+static const struct rockchip_tsadc_chip rk3528_tsadc_data = {
+	.chn_id[SENSOR_CPU] = 0, /* cpu sensor is channel 0 */
+	.chn_num = 1, /* one channels for tsadc */
+
+	.tshut_mode = TSHUT_MODE_CRU, /* default TSHUT via GPIO give PMIC */
+	.tshut_polarity = TSHUT_LOW_ACTIVE, /* default TSHUT LOW ACTIVE */
+	.tshut_temp = 95000,
+
+	.tsadc_init = tsadc_init_v11,
+	.tsadc_control = tsadc_control_v4,
+	.tsadc_get_temp = tsadc_get_temp_v4,
+	.irq_ack = tsadc_irq_ack_v4,
+	.set_alarm_temp = tsadc_alarm_temp_v3,
+	.set_tshut_temp = tsadc_tshut_temp_v3,
+	.set_tshut_mode = tsadc_tshut_mode_v4,
+
+	.table = {
+		.id = rk3528_code_table,
+		.length = ARRAY_SIZE(rk3528_code_table),
+		.data_mask = TSADCV2_DATA_MASK,
+		.mode = ADC_INCREMENT,
+	},
+};
+
+static const struct rockchip_tsadc_chip rk3562_tsadc_data = {
+	.chn_id[SENSOR_CPU] = 0, /* cpu sensor is channel 0 */
+	.chn_num = 1, /* one channels for tsadc */
+
+	.tshut_mode = TSHUT_MODE_GPIO, /* default TSHUT via GPIO give PMIC */
+	.tshut_polarity = TSHUT_LOW_ACTIVE, /* default TSHUT LOW ACTIVE */
+	.tshut_temp = 95000,
+
+	.tsadc_init = tsadc_init_v12,
+	.tsadc_control = tsadc_control_v4,
+	.tsadc_get_temp = tsadc_get_temp_v4,
+	.irq_ack = tsadc_irq_ack_v4,
+	.set_alarm_temp = tsadc_alarm_temp_v3,
+	.set_tshut_temp = tsadc_tshut_temp_v3,
+	.set_tshut_mode = tsadc_tshut_mode_v4,
+
+	.table = {
+		.id = rk3562_code_table,
+		.length = ARRAY_SIZE(rk3562_code_table),
+		.data_mask = TSADCV2_DATA_MASK,
+		.mode = ADC_INCREMENT,
+	},
+};
+
+static const struct rockchip_tsadc_chip rk3568_tsadc_data = {
+	.chn_id[SENSOR_CPU] = 0, /* cpu sensor is channel 0 */
+	.chn_id[SENSOR_GPU] = 1, /* gpu sensor is channel 1 */
+	.chn_num = 2, /* two channels for tsadc */
+
+	.tshut_mode = TSHUT_MODE_GPIO, /* default TSHUT via GPIO give PMIC */
+	.tshut_polarity = TSHUT_LOW_ACTIVE, /* default TSHUT LOW ACTIVE */
+	.tshut_temp = 95000,
+
+	.tsadc_init = tsadc_init_v7,
+	.tsadc_control = tsadc_control_v3,
+	.tsadc_get_temp = tsadc_get_temp_v2,
+	.irq_ack = tsadc_irq_ack_v3,
+	.set_alarm_temp = tsadc_alarm_temp_v2,
+	.set_tshut_temp = tsadc_tshut_temp_v2,
+	.set_tshut_mode = tsadc_tshut_mode_v2,
+
+	.table = {
+		.id = rk3568_code_table,
+		.length = ARRAY_SIZE(rk3568_code_table),
+		.data_mask = TSADCV2_DATA_MASK,
+		.mode = ADC_INCREMENT,
+	},
+};
+
+static const struct rockchip_tsadc_chip rk3588_tsadc_data = {
+	/* top, big_core0, big_core1, little_core, center, gpu, npu */
+	.chn_id = {0, 1, 2, 3, 4, 5, 6},
+	.chn_num = 7, /* seven channels for tsadc */
+
+	.tshut_mode = TSHUT_MODE_GPIO, /* default TSHUT via GPIO give PMIC */
+	.tshut_polarity = TSHUT_LOW_ACTIVE, /* default TSHUT LOW ACTIVE */
+	.tshut_temp = 95000,
+
+	.tsadc_init = tsadc_init_v8,
+	.tsadc_control = tsadc_control_v4,
+	.tsadc_get_temp = tsadc_get_temp_v4,
+	.irq_ack = tsadc_irq_ack_v4,
+	.set_alarm_temp = tsadc_alarm_temp_v3,
+	.set_tshut_temp = tsadc_tshut_temp_v3,
+	.set_tshut_mode = tsadc_tshut_mode_v4,
+
+	.table = {
+		.id = rk3588_code_table,
+		.length = ARRAY_SIZE(rk3588_code_table),
+		.data_mask = TSADCV4_DATA_MASK,
+		.mode = ADC_INCREMENT,
+	},
+};
+
+static const struct udevice_id rockchip_thermal_match[] = {
+	{
+		.compatible = "rockchip,px30-tsadc",
+		.data = (ulong)&px30_tsadc_data,
+	},
+	{
+		.compatible = "rockchip,px30s-tsadc",
+		.data = (ulong)&px30s_tsadc_data,
+	},
+	{
+		.compatible = "rockchip,rk1808-tsadc",
+		.data = (ulong)&rk1808_tsadc_data,
+	},
+	{
+		.compatible = "rockchip,rk3228-tsadc",
+		.data = (ulong)&rk3228_tsadc_data,
+	},
+	{
+		.compatible = "rockchip,rk3288-tsadc",
+		.data = (ulong)&rk3288_tsadc_data,
+	},
+	{
+		.compatible = "rockchip,rk3308-tsadc",
+		.data = (ulong)&rk3308_tsadc_data,
+	},
+	{
+		.compatible = "rockchip,rk3308bs-tsadc",
+		.data = (ulong)&rk3308bs_tsadc_data,
+	},
+	{
+		.compatible = "rockchip,rk3328-tsadc",
+		.data = (ulong)&rk3328_tsadc_data,
+	},
+	{
+		.compatible = "rockchip,rk3366-tsadc",
+		.data = (ulong)&rk3366_tsadc_data,
+	},
+	{
+		.compatible = "rockchip,rk3368-tsadc",
+		.data = (ulong)&rk3368_tsadc_data,
+	},
+	{
+		.compatible = "rockchip,rk3399-tsadc",
+		.data = (ulong)&rk3399_tsadc_data,
+	},
+	{
+		.compatible = "rockchip,rk3528-tsadc",
+		.data = (ulong)&rk3528_tsadc_data,
+	},
+	{
+		.compatible = "rockchip,rk3562-tsadc",
+		.data = (ulong)&rk3562_tsadc_data,
+	},
+	{
+		.compatible = "rockchip,rk3568-tsadc",
+		.data = (ulong)&rk3568_tsadc_data,
+	},
+	{
+		.compatible = "rockchip,rk3588-tsadc",
+		.data = (ulong)&rk3588_tsadc_data,
+	},
+	{ /* end */ },
+};
+
+U_BOOT_DRIVER(rockchip_thermal) = {
+	.name		= "rockchip_thermal",
+	.id		= UCLASS_THERMAL,
+	.of_match	= rockchip_thermal_match,
+	.priv_auto = sizeof(struct rockchip_thermal_priv),
+	.of_to_plat = rockchip_thermal_ofdata_to_platdata,
+	.ops		= &rockchip_thermal_ops,
+	.probe		= rockchip_thermal_probe,
+};
diff --git a/dts/upstream/Bindings/arm/rockchip.yaml b/dts/upstream/Bindings/arm/rockchip.yaml
index 753199a1292..e95333c6d51 100644
--- a/dts/upstream/Bindings/arm/rockchip.yaml
+++ b/dts/upstream/Bindings/arm/rockchip.yaml
@@ -1114,6 +1114,11 @@ properties:
           - const: sinovoip,rk3308-bpi-p2pro
           - const: rockchip,rk3308
 
+      - description: Rockchip RK3562 Geek Pi
+        items:
+          - const: rockchip,rk3562-geekpi
+          - const: rockchip,rk3562
+
       - description: Sinovoip RK3568 Banana Pi R2 Pro
         items:
           - const: sinovoip,rk3568-bpi-r2pro
diff --git a/dts/upstream/include/dt-bindings/clock/rk3562-cru.h b/dts/upstream/include/dt-bindings/clock/rk3562-cru.h
new file mode 100644
index 00000000000..bff50b62e6b
--- /dev/null
+++ b/dts/upstream/include/dt-bindings/clock/rk3562-cru.h
@@ -0,0 +1,734 @@
+/* SPDX-License-Identifier: (GPL-2.0+ OR MIT) */
+/*
+ * Copyright (c) 2022 Rockchip Electronics Co. Ltd.
+ * Author: Finley Xiao <finley.xiao@rock-chips.com>
+ */
+
+#ifndef _DT_BINDINGS_CLK_ROCKCHIP_RK3562_H
+#define _DT_BINDINGS_CLK_ROCKCHIP_RK3562_H
+
+/* cru-clocks indices */
+
+/* cru plls */
+#define PLL_APLL			1
+#define PLL_GPLL			2
+#define PLL_VPLL			3
+#define PLL_HPLL			4
+#define PLL_CPLL			5
+#define PLL_DPLL			6
+
+/* cru clocks */
+#define ARMCLK				8
+#define CLK_GPU				9
+#define ACLK_RKNN			10
+#define CLK_DDR				11
+#define CLK_MATRIX_50M_SRC		12
+#define CLK_MATRIX_100M_SRC		13
+#define CLK_MATRIX_125M_SRC		14
+#define CLK_MATRIX_200M_SRC		15
+#define CLK_MATRIX_300M_SRC		16
+#define ACLK_TOP			17
+#define ACLK_TOP_VIO			18
+#define CLK_CAM0_OUT2IO			19
+#define CLK_CAM1_OUT2IO			20
+#define CLK_CAM2_OUT2IO			21
+#define CLK_CAM3_OUT2IO			22
+#define ACLK_BUS			23
+#define HCLK_BUS			24
+#define PCLK_BUS			25
+#define PCLK_I2C1			26
+#define PCLK_I2C2			27
+#define PCLK_I2C3			28
+#define PCLK_I2C4			29
+#define PCLK_I2C5			30
+#define CLK_I2C				31
+#define CLK_I2C1			32
+#define CLK_I2C2			33
+#define CLK_I2C3			34
+#define CLK_I2C4			35
+#define CLK_I2C5			36
+#define DCLK_BUS_GPIO			37
+#define DCLK_BUS_GPIO3			38
+#define DCLK_BUS_GPIO4			39
+#define PCLK_TIMER			40
+#define CLK_TIMER0			41
+#define CLK_TIMER1			42
+#define CLK_TIMER2			43
+#define CLK_TIMER3			44
+#define CLK_TIMER4			45
+#define CLK_TIMER5			46
+#define PCLK_STIMER			47
+#define CLK_STIMER0			48
+#define CLK_STIMER1			49
+#define PCLK_WDTNS			50
+#define CLK_WDTNS			51
+#define PCLK_GRF			52
+#define PCLK_SGRF			53
+#define PCLK_MAILBOX			54
+#define PCLK_INTC			55
+#define ACLK_BUS_GIC400			56
+#define ACLK_BUS_SPINLOCK		57
+#define ACLK_DCF			58
+#define PCLK_DCF			59
+#define FCLK_BUS_CM0_CORE		60
+#define CLK_BUS_CM0_RTC			61
+#define HCLK_ICACHE			62
+#define HCLK_DCACHE			63
+#define PCLK_TSADC			64
+#define CLK_TSADC			65
+#define CLK_TSADC_TSEN			66
+#define PCLK_DFT2APB			67
+#define CLK_SARADC_VCCIO156		68
+#define PCLK_GMAC			69
+#define ACLK_GMAC			70
+#define CLK_GMAC_125M_CRU_I		71
+#define CLK_GMAC_50M_CRU_I		72
+#define CLK_GMAC_50M_O			73
+#define CLK_GMAC_ETH_OUT2IO		74
+#define PCLK_APB2ASB_VCCIO156		75
+#define PCLK_TO_VCCIO156		76
+#define PCLK_DSIPHY			77
+#define PCLK_DSITX			78
+#define PCLK_CPU_EMA_DET		79
+#define PCLK_HASH			80
+#define PCLK_TOPCRU			81
+#define PCLK_ASB2APB_VCCIO156		82
+#define PCLK_IOC_VCCIO156		83
+#define PCLK_GPIO3_VCCIO156		84
+#define PCLK_GPIO4_VCCIO156		85
+#define PCLK_SARADC_VCCIO156		86
+#define PCLK_MAC100			87
+#define ACLK_MAC100			89
+#define CLK_MAC100_50M_MATRIX		90
+#define HCLK_CORE			91
+#define PCLK_DDR			92
+#define CLK_MSCH_BRG_BIU		93
+#define PCLK_DDR_HWLP			94
+#define PCLK_DDR_UPCTL			95
+#define PCLK_DDR_PHY			96
+#define PCLK_DDR_DFICTL			97
+#define PCLK_DDR_DMA2DDR		98
+#define PCLK_DDR_MON			99
+#define TMCLK_DDR_MON			100
+#define PCLK_DDR_GRF			101
+#define PCLK_DDR_CRU			102
+#define PCLK_SUBDDR_CRU			103
+#define CLK_GPU_PRE			104
+#define ACLK_GPU_PRE			105
+#define CLK_GPU_BRG			107
+#define CLK_NPU_PRE			108
+#define HCLK_NPU_PRE			109
+#define HCLK_RKNN			111
+#define ACLK_PERI			112
+#define HCLK_PERI			113
+#define PCLK_PERI			114
+#define PCLK_PERICRU			115
+#define HCLK_SAI0			116
+#define CLK_SAI0_SRC			117
+#define CLK_SAI0_FRAC			118
+#define CLK_SAI0			119
+#define MCLK_SAI0			120
+#define MCLK_SAI0_OUT2IO		121
+#define HCLK_SAI1			122
+#define CLK_SAI1_SRC			123
+#define CLK_SAI1_FRAC			124
+#define CLK_SAI1			125
+#define MCLK_SAI1			126
+#define MCLK_SAI1_OUT2IO		127
+#define HCLK_SAI2			128
+#define CLK_SAI2_SRC			129
+#define CLK_SAI2_FRAC			130
+#define CLK_SAI2			131
+#define MCLK_SAI2			132
+#define MCLK_SAI2_OUT2IO		133
+#define HCLK_DSM			134
+#define CLK_DSM				135
+#define HCLK_PDM			136
+#define MCLK_PDM			137
+#define HCLK_SPDIF			138
+#define CLK_SPDIF_SRC			139
+#define CLK_SPDIF_FRAC			140
+#define CLK_SPDIF			141
+#define MCLK_SPDIF			142
+#define HCLK_SDMMC0			143
+#define CCLK_SDMMC0			144
+#define HCLK_SDMMC1			145
+#define CCLK_SDMMC1			146
+#define SCLK_SDMMC0_DRV			147
+#define SCLK_SDMMC0_SAMPLE		148
+#define SCLK_SDMMC1_DRV			149
+#define SCLK_SDMMC1_SAMPLE		150
+#define HCLK_EMMC			151
+#define ACLK_EMMC			152
+#define CCLK_EMMC			153
+#define BCLK_EMMC			154
+#define TMCLK_EMMC			155
+#define SCLK_SFC			156
+#define HCLK_SFC			157
+#define HCLK_USB2HOST			158
+#define HCLK_USB2HOST_ARB		159
+#define PCLK_SPI1			160
+#define CLK_SPI1			161
+#define SCLK_IN_SPI1			162
+#define PCLK_SPI2			163
+#define CLK_SPI2			164
+#define SCLK_IN_SPI2			165
+#define PCLK_UART1			166
+#define PCLK_UART2			167
+#define PCLK_UART3			168
+#define PCLK_UART4			169
+#define PCLK_UART5			170
+#define PCLK_UART6			171
+#define PCLK_UART7			172
+#define PCLK_UART8			173
+#define PCLK_UART9			174
+#define CLK_UART1_SRC			175
+#define CLK_UART1_FRAC			176
+#define CLK_UART1			177
+#define SCLK_UART1			178
+#define CLK_UART2_SRC			179
+#define CLK_UART2_FRAC			180
+#define CLK_UART2			181
+#define SCLK_UART2			182
+#define CLK_UART3_SRC			183
+#define CLK_UART3_FRAC			184
+#define CLK_UART3			185
+#define SCLK_UART3			186
+#define CLK_UART4_SRC			187
+#define CLK_UART4_FRAC			188
+#define CLK_UART4			189
+#define SCLK_UART4			190
+#define CLK_UART5_SRC			191
+#define CLK_UART5_FRAC			192
+#define CLK_UART5			193
+#define SCLK_UART5			194
+#define CLK_UART6_SRC			195
+#define CLK_UART6_FRAC			196
+#define CLK_UART6			197
+#define SCLK_UART6			198
+#define CLK_UART7_SRC			199
+#define CLK_UART7_FRAC			200
+#define CLK_UART7			201
+#define SCLK_UART7			202
+#define CLK_UART8_SRC			203
+#define CLK_UART8_FRAC			204
+#define CLK_UART8			205
+#define SCLK_UART8			206
+#define CLK_UART9_SRC			207
+#define CLK_UART9_FRAC			208
+#define CLK_UART9			209
+#define SCLK_UART9			210
+#define PCLK_PWM1_PERI			211
+#define CLK_PWM1_PERI			212
+#define CLK_CAPTURE_PWM1_PERI		213
+#define PCLK_PWM2_PERI			214
+#define CLK_PWM2_PERI			215
+#define CLK_CAPTURE_PWM2_PERI		216
+#define PCLK_PWM3_PERI			217
+#define CLK_PWM3_PERI			218
+#define CLK_CAPTURE_PWM3_PERI		219
+#define PCLK_CAN0			220
+#define CLK_CAN0			221
+#define PCLK_CAN1			222
+#define CLK_CAN1			223
+#define ACLK_CRYPTO			224
+#define HCLK_CRYPTO			225
+#define PCLK_CRYPTO			226
+#define CLK_CORE_CRYPTO			227
+#define CLK_PKA_CRYPTO			228
+#define HCLK_KLAD			229
+#define PCLK_KEY_READER			230
+#define HCLK_RK_RNG_NS			231
+#define HCLK_RK_RNG_S			232
+#define HCLK_TRNG_NS			233
+#define HCLK_TRNG_S			234
+#define HCLK_CRYPTO_S			235
+#define PCLK_PERI_WDT			236
+#define TCLK_PERI_WDT			237
+#define ACLK_SYSMEM			238
+#define HCLK_BOOTROM			239
+#define PCLK_PERI_GRF			240
+#define ACLK_DMAC			241
+#define ACLK_RKDMAC			242
+#define PCLK_OTPC_NS			243
+#define CLK_SBPI_OTPC_NS		244
+#define CLK_USER_OTPC_NS		245
+#define PCLK_OTPC_S			246
+#define CLK_SBPI_OTPC_S			247
+#define CLK_USER_OTPC_S			248
+#define CLK_OTPC_ARB			249
+#define PCLK_OTPPHY			250
+#define PCLK_USB2PHY			251
+#define PCLK_PIPEPHY			252
+#define PCLK_SARADC			253
+#define CLK_SARADC			254
+#define PCLK_IOC_VCCIO234		255
+#define PCLK_PERI_GPIO1			256
+#define PCLK_PERI_GPIO2			257
+#define DCLK_PERI_GPIO			258
+#define DCLK_PERI_GPIO1			259
+#define DCLK_PERI_GPIO2			260
+#define ACLK_PHP			261
+#define PCLK_PHP			262
+#define ACLK_PCIE20_MST			263
+#define ACLK_PCIE20_SLV			264
+#define ACLK_PCIE20_DBI			265
+#define PCLK_PCIE20			266
+#define CLK_PCIE20_AUX			267
+#define ACLK_USB3OTG			268
+#define CLK_USB3OTG_SUSPEND		269
+#define CLK_USB3OTG_REF			270
+#define CLK_PIPEPHY_REF_FUNC		271
+#define CLK_200M_PMU			272
+#define CLK_RTC_32K			273
+#define CLK_RTC32K_FRAC			274
+#define BUSCLK_PDPMU0			275
+#define PCLK_PMU0_CRU			276
+#define PCLK_PMU0_PMU			277
+#define CLK_PMU0_PMU			278
+#define PCLK_PMU0_HP_TIMER		279
+#define CLK_PMU0_HP_TIMER		280
+#define CLK_PMU0_32K_HP_TIMER		281
+#define PCLK_PMU0_PVTM			282
+#define CLK_PMU0_PVTM			283
+#define PCLK_IOC_PMUIO			284
+#define PCLK_PMU0_GPIO0			285
+#define DBCLK_PMU0_GPIO0		286
+#define PCLK_PMU0_GRF			287
+#define PCLK_PMU0_SGRF			288
+#define CLK_DDR_FAIL_SAFE		289
+#define PCLK_PMU0_SCRKEYGEN		290
+#define PCLK_PMU1_CRU			291
+#define HCLK_PMU1_MEM			292
+#define PCLK_PMU0_I2C0			293
+#define CLK_PMU0_I2C0			294
+#define PCLK_PMU1_UART0			295
+#define CLK_PMU1_UART0_SRC		296
+#define CLK_PMU1_UART0_FRAC		297
+#define CLK_PMU1_UART0			298
+#define SCLK_PMU1_UART0			299
+#define PCLK_PMU1_SPI0			300
+#define CLK_PMU1_SPI0			301
+#define SCLK_IN_PMU1_SPI0		302
+#define PCLK_PMU1_PWM0			303
+#define CLK_PMU1_PWM0			304
+#define CLK_CAPTURE_PMU1_PWM0		305
+#define CLK_PMU1_WIFI			306
+#define FCLK_PMU1_CM0_CORE		307
+#define CLK_PMU1_CM0_RTC		308
+#define PCLK_PMU1_WDTNS			309
+#define CLK_PMU1_WDTNS			310
+#define PCLK_PMU1_MAILBOX		311
+#define CLK_PIPEPHY_DIV			312
+#define CLK_PIPEPHY_XIN24M		313
+#define CLK_PIPEPHY_REF			314
+#define CLK_24M_SSCSRC			315
+#define CLK_USB2PHY_XIN24M		316
+#define CLK_USB2PHY_REF			317
+#define CLK_MIPIDSIPHY_XIN24M		318
+#define CLK_MIPIDSIPHY_REF		319
+#define ACLK_RGA_PRE			320
+#define HCLK_RGA_PRE			321
+#define ACLK_RGA			322
+#define HCLK_RGA			323
+#define CLK_RGA_CORE			324
+#define ACLK_JDEC			325
+#define HCLK_JDEC			326
+#define ACLK_VDPU_PRE			327
+#define CLK_RKVDEC_HEVC_CA		328
+#define HCLK_VDPU_PRE			329
+#define ACLK_RKVDEC			330
+#define HCLK_RKVDEC			331
+#define CLK_RKVENC_CORE			332
+#define ACLK_VEPU_PRE			333
+#define HCLK_VEPU_PRE			334
+#define ACLK_RKVENC			335
+#define HCLK_RKVENC			336
+#define ACLK_VI				337
+#define HCLK_VI				338
+#define PCLK_VI				339
+#define ACLK_ISP			340
+#define HCLK_ISP			341
+#define CLK_ISP				342
+#define ACLK_VICAP			343
+#define HCLK_VICAP			344
+#define DCLK_VICAP			345
+#define CSIRX0_CLK_DATA			346
+#define CSIRX1_CLK_DATA			347
+#define CSIRX2_CLK_DATA			348
+#define CSIRX3_CLK_DATA			349
+#define PCLK_CSIHOST0			350
+#define PCLK_CSIHOST1			351
+#define PCLK_CSIHOST2			352
+#define PCLK_CSIHOST3			353
+#define PCLK_CSIPHY0			354
+#define PCLK_CSIPHY1			355
+#define ACLK_VO_PRE			356
+#define HCLK_VO_PRE			357
+#define ACLK_VOP			358
+#define HCLK_VOP			359
+#define DCLK_VOP			360
+#define DCLK_VOP1			361
+#define ACLK_CRYPTO_S			362
+#define PCLK_CRYPTO_S			363
+#define CLK_CORE_CRYPTO_S		364
+#define CLK_PKA_CRYPTO_S		365
+
+#define CLK_NR_CLKS			(CLK_PKA_CRYPTO_S + 1)
+
+/* soft-reset indices */
+
+/********Name=SOFTRST_CON01,Offset=0x404********/
+#define SRST_A_TOP_BIU			16
+#define SRST_A_TOP_VIO_BIU		17
+#define SRST_REF_PVTPLL_LOGIC		18
+/********Name=SOFTRST_CON03,Offset=0x40C********/
+#define SRST_NCOREPORESET0		48
+#define SRST_NCOREPORESET1		49
+#define SRST_NCOREPORESET2		50
+#define SRST_NCOREPORESET3		51
+#define SRST_NCORESET0			52
+#define SRST_NCORESET1			53
+#define SRST_NCORESET2			54
+#define SRST_NCORESET3			55
+#define SRST_NL2RESET			56
+/********Name=SOFTRST_CON04,Offset=0x410********/
+#define SRST_DAP			73
+#define SRST_P_DBG_DAPLITE		74
+#define SRST_REF_PVTPLL_CORE		77
+/********Name=SOFTRST_CON05,Offset=0x414********/
+#define SRST_A_CORE_BIU			80
+#define SRST_P_CORE_BIU			81
+#define SRST_H_CORE_BIU			82
+/********Name=SOFTRST_CON06,Offset=0x418********/
+#define SRST_A_NPU_BIU			98
+#define SRST_H_NPU_BIU			99
+#define SRST_A_RKNN			100
+#define SRST_H_RKNN			101
+#define SRST_REF_PVTPLL_NPU		102
+/********Name=SOFTRST_CON08,Offset=0x420********/
+#define SRST_A_GPU_BIU			131
+#define SRST_GPU			132
+#define SRST_REF_PVTPLL_GPU		133
+#define SRST_GPU_BRG_BIU		134
+/********Name=SOFTRST_CON09,Offset=0x424********/
+#define SRST_RKVENC_CORE		144
+#define SRST_A_VEPU_BIU			147
+#define SRST_H_VEPU_BIU			148
+#define SRST_A_RKVENC			149
+#define SRST_H_RKVENC			150
+/********Name=SOFTRST_CON10,Offset=0x428********/
+#define SRST_RKVDEC_HEVC_CA		162
+#define SRST_A_VDPU_BIU			165
+#define SRST_H_VDPU_BIU			166
+#define SRST_A_RKVDEC			167
+#define SRST_H_RKVDEC			168
+/********Name=SOFTRST_CON11,Offset=0x42C********/
+#define SRST_A_VI_BIU			179
+#define SRST_H_VI_BIU			180
+#define SRST_P_VI_BIU			181
+#define SRST_ISP			184
+#define SRST_A_VICAP			185
+#define SRST_H_VICAP			186
+#define SRST_D_VICAP			187
+#define SRST_I0_VICAP			188
+#define SRST_I1_VICAP			189
+#define SRST_I2_VICAP			190
+#define SRST_I3_VICAP			191
+/********Name=SOFTRST_CON12,Offset=0x430********/
+#define SRST_P_CSIHOST0			192
+#define SRST_P_CSIHOST1			193
+#define SRST_P_CSIHOST2			194
+#define SRST_P_CSIHOST3			195
+#define SRST_P_CSIPHY0			196
+#define SRST_P_CSIPHY1			197
+/********Name=SOFTRST_CON13,Offset=0x434********/
+#define SRST_A_VO_BIU			211
+#define SRST_H_VO_BIU			212
+#define SRST_A_VOP			214
+#define SRST_H_VOP			215
+#define SRST_D_VOP			216
+#define SRST_D_VOP1			217
+/********Name=SOFTRST_CON14,Offset=0x438********/
+#define SRST_A_RGA_BIU			227
+#define SRST_H_RGA_BIU			228
+#define SRST_A_RGA			230
+#define SRST_H_RGA			231
+#define SRST_RGA_CORE			232
+#define SRST_A_JDEC			233
+#define SRST_H_JDEC			234
+/********Name=SOFTRST_CON15,Offset=0x43C********/
+#define SRST_B_EBK_BIU			242
+#define SRST_P_EBK_BIU			243
+#define SRST_AHB2AXI_EBC		244
+#define SRST_H_EBC			245
+#define SRST_D_EBC			246
+#define SRST_H_EINK			247
+#define SRST_P_EINK			248
+/********Name=SOFTRST_CON16,Offset=0x440********/
+#define SRST_P_PHP_BIU			258
+#define SRST_A_PHP_BIU			259
+#define SRST_P_PCIE20			263
+#define SRST_PCIE20_POWERUP		264
+#define SRST_USB3OTG			266
+/********Name=SOFTRST_CON17,Offset=0x444********/
+#define SRST_PIPEPHY			275
+/********Name=SOFTRST_CON18,Offset=0x448********/
+#define SRST_A_BUS_BIU			291
+#define SRST_H_BUS_BIU			292
+#define SRST_P_BUS_BIU			293
+/********Name=SOFTRST_CON19,Offset=0x44C********/
+#define SRST_P_I2C1			304
+#define SRST_P_I2C2			305
+#define SRST_P_I2C3			306
+#define SRST_P_I2C4			307
+#define SRST_P_I2C5			308
+#define SRST_I2C1			310
+#define SRST_I2C2			311
+#define SRST_I2C3			312
+#define SRST_I2C4			313
+#define SRST_I2C5			314
+/********Name=SOFTRST_CON20,Offset=0x450********/
+#define SRST_BUS_GPIO3			325
+#define SRST_BUS_GPIO4			326
+/********Name=SOFTRST_CON21,Offset=0x454********/
+#define SRST_P_TIMER			336
+#define SRST_TIMER0			337
+#define SRST_TIMER1			338
+#define SRST_TIMER2			339
+#define SRST_TIMER3			340
+#define SRST_TIMER4			341
+#define SRST_TIMER5			342
+#define SRST_P_STIMER			343
+#define SRST_STIMER0			344
+#define SRST_STIMER1			345
+/********Name=SOFTRST_CON22,Offset=0x458********/
+#define SRST_P_WDTNS			352
+#define SRST_WDTNS			353
+#define SRST_P_GRF			354
+#define SRST_P_SGRF			355
+#define SRST_P_MAILBOX			356
+#define SRST_P_INTC			357
+#define SRST_A_BUS_GIC400		358
+#define SRST_A_BUS_GIC400_DEBUG		359
+/********Name=SOFTRST_CON23,Offset=0x45C********/
+#define SRST_A_BUS_SPINLOCK		368
+#define SRST_A_DCF			369
+#define SRST_P_DCF			370
+#define SRST_F_BUS_CM0_CORE		371
+#define SRST_T_BUS_CM0_JTAG		373
+#define SRST_H_ICACHE			376
+#define SRST_H_DCACHE			377
+/********Name=SOFTRST_CON24,Offset=0x460********/
+#define SRST_P_TSADC			384
+#define SRST_TSADC			385
+#define SRST_TSADCPHY			386
+#define SRST_P_DFT2APB			388
+/********Name=SOFTRST_CON25,Offset=0x464********/
+#define SRST_A_GMAC			401
+#define SRST_P_SARADC                 	402
+#define SRST_P_APB2ASB_VCCIO156		405
+#define SRST_P_DSIPHY			408
+#define SRST_P_DSITX			409
+#define SRST_P_CPU_EMA_DET		410
+#define SRST_P_HASH			411
+#define SRST_P_TOPCRU			415
+/********Name=SOFTRST_CON26,Offset=0x468********/
+#define SRST_P_ASB2APB_VCCIO156		416
+#define SRST_P_IOC_VCCIO156		417
+#define SRST_P_GPIO3_VCCIO156		418
+#define SRST_P_GPIO4_VCCIO156		419
+#define SRST_P_SARADC_VCCIO156		420
+#define SRST_SARADC_VCCIO156		421
+#define SRST_SARADC_VCCIO156_PHY	422
+/********Name=SOFTRST_CON27,Offset=0x46c********/
+#define SRST_A_MAC100			433
+
+/* (0x10200 - 0x400) / 4 * 16 = 260096 */
+/********Name=PMU0SOFTRST_CON00,Offset=0x10200********/
+#define SRST_P_PMU0_CRU			260096
+#define SRST_P_PMU0_PMU			260097
+#define SRST_PMU0_PMU			260098
+#define SRST_P_PMU0_HP_TIMER		260099
+#define SRST_PMU0_HP_TIMER		260100
+#define SRST_PMU0_32K_HP_TIMER		260101
+#define SRST_P_PMU0_PVTM		260102
+#define SRST_PMU0_PVTM			260103
+#define SRST_P_IOC_PMUIO		260104
+#define SRST_P_PMU0_GPIO0		260105
+#define SRST_PMU0_GPIO0			260106
+#define SRST_P_PMU0_GRF			260107
+#define SRST_P_PMU0_SGRF		260108
+/********Name=PMU0SOFTRST_CON01,Offset=0x10204********/
+#define SRST_DDR_FAIL_SAFE		260112
+#define SRST_P_PMU0_SCRKEYGEN		260113
+/********Name=PMU0SOFTRST_CON02,Offset=0x10208********/
+#define SRST_P_PMU0_I2C0		260136
+#define SRST_PMU0_I2C0			260137
+
+/* (0x18200 - 0x400) / 4 * 16 = 391168 */
+/********Name=PMU1SOFTRST_CON00,Offset=0x18200********/
+#define SRST_P_PMU1_CRU			391168
+#define SRST_H_PMU1_MEM			391170
+#define SRST_H_PMU1_BIU			391171
+#define SRST_P_PMU1_BIU			391172
+#define SRST_P_PMU1_UART0		391175
+#define SRST_S_PMU1_UART0		391178
+/********Name=PMU1SOFTRST_CON01,Offset=0x18204********/
+#define SRST_P_PMU1_SPI0		391184
+#define SRST_PMU1_SPI0			391185
+#define SRST_P_PMU1_PWM0		391187
+#define SRST_PMU1_PWM0			391188
+/********Name=PMU1SOFTRST_CON02,Offset=0x18208********/
+#define SRST_F_PMU1_CM0_CORE		391200
+#define SRST_T_PMU1_CM0_JTAG		391202
+#define SRST_P_PMU1_WDTNS		391203
+#define SRST_PMU1_WDTNS			391204
+#define SRST_PMU1_MAILBOX		391208
+
+/* (0x20200 - 0x400) / 4 * 16 = 522240 */
+/********Name=DDRSOFTRST_CON00,Offset=0x20200********/
+#define SRST_MSCH_BRG_BIU		522244
+#define SRST_P_MSCH_BIU			522245
+#define SRST_P_DDR_HWLP			522246
+#define SRST_P_DDR_PHY			522248
+#define SRST_P_DDR_DFICTL		522249
+#define SRST_P_DDR_DMA2DDR		522250
+/********Name=DDRSOFTRST_CON01,Offset=0x20204********/
+#define SRST_P_DDR_MON			522256
+#define SRST_TM_DDR_MON			522257
+#define SRST_P_DDR_GRF			522258
+#define SRST_P_DDR_CRU			522259
+#define SRST_P_SUBDDR_CRU		522260
+
+/* (0x28200 - 0x400) / 4 * 16 = 653312 */
+/********Name=SUBDDRSOFTRST_CON00,Offset=0x28200********/
+#define SRST_MSCH_BIU			653313
+#define SRST_DDR_PHY			653316
+#define SRST_DDR_DFICTL			653317
+#define SRST_DDR_SCRAMBLE		653318
+#define SRST_DDR_MON			653319
+#define SRST_A_DDR_SPLIT		653320
+#define SRST_DDR_DMA2DDR		653321
+
+/* (0x30400 - 0x400) / 4 * 16 = 786432 */
+/********Name=PERISOFTRST_CON01,Offset=0x30404********/
+#define SRST_A_PERI_BIU			786451
+#define SRST_H_PERI_BIU			786452
+#define SRST_P_PERI_BIU			786453
+#define SRST_P_PERICRU			786454
+/********Name=PERISOFTRST_CON02,Offset=0x30408********/
+#define SRST_H_SAI0_8CH			786464
+#define SRST_M_SAI0_8CH			786467
+#define SRST_H_SAI1_8CH			786469
+#define SRST_M_SAI1_8CH			786472
+#define SRST_H_SAI2_2CH			786474
+#define SRST_M_SAI2_2CH			786477
+/********Name=PERISOFTRST_CON03,Offset=0x3040C********/
+#define SRST_H_DSM			786481
+#define SRST_DSM			786482
+#define SRST_H_PDM			786484
+#define SRST_M_PDM			786485
+#define SRST_H_SPDIF			786488
+#define SRST_M_SPDIF			786491
+/********Name=PERISOFTRST_CON04,Offset=0x30410********/
+#define SRST_H_SDMMC0			786496
+#define SRST_H_SDMMC1			786498
+#define SRST_H_EMMC			786504
+#define SRST_A_EMMC			786505
+#define SRST_C_EMMC			786506
+#define SRST_B_EMMC			786507
+#define SRST_T_EMMC			786508
+#define SRST_S_SFC			786509
+#define SRST_H_SFC			786510
+/********Name=PERISOFTRST_CON05,Offset=0x30414********/
+#define SRST_H_USB2HOST			786512
+#define SRST_H_USB2HOST_ARB		786513
+#define SRST_USB2HOST_UTMI		786514
+/********Name=PERISOFTRST_CON06,Offset=0x30418********/
+#define SRST_P_SPI1			786528
+#define SRST_SPI1			786529
+#define SRST_P_SPI2			786531
+#define SRST_SPI2			786532
+/********Name=PERISOFTRST_CON07,Offset=0x3041C********/
+#define SRST_P_UART1			786544
+#define SRST_P_UART2			786545
+#define SRST_P_UART3			786546
+#define SRST_P_UART4			786547
+#define SRST_P_UART5			786548
+#define SRST_P_UART6			786549
+#define SRST_P_UART7			786550
+#define SRST_P_UART8			786551
+#define SRST_P_UART9			786552
+#define SRST_S_UART1			786555
+#define SRST_S_UART2			786558
+/********Name=PERISOFTRST_CON08,Offset=0x30420********/
+#define SRST_S_UART3			786561
+#define SRST_S_UART4			786564
+#define SRST_S_UART5			786567
+#define SRST_S_UART6			786570
+#define SRST_S_UART7			786573
+/********Name=PERISOFTRST_CON09,Offset=0x30424********/
+#define SRST_S_UART8			786576
+#define SRST_S_UART9			786579
+/********Name=PERISOFTRST_CON10,Offset=0x30428********/
+#define SRST_P_PWM1_PERI		786592
+#define SRST_PWM1_PERI			786593
+#define SRST_P_PWM2_PERI		786595
+#define SRST_PWM2_PERI			786596
+#define SRST_P_PWM3_PERI		786598
+#define SRST_PWM3_PERI			786599
+/********Name=PERISOFTRST_CON11,Offset=0x3042C********/
+#define SRST_P_CAN0			786608
+#define SRST_CAN0			786609
+#define SRST_P_CAN1			786610
+#define SRST_CAN1			786611
+/********Name=PERISOFTRST_CON12,Offset=0x30430********/
+#define SRST_A_CRYPTO			786624
+#define SRST_H_CRYPTO			786625
+#define SRST_P_CRYPTO			786626
+#define SRST_CORE_CRYPTO		786627
+#define SRST_PKA_CRYPTO			786628
+#define SRST_H_KLAD			786629
+#define SRST_P_KEY_READER		786630
+#define SRST_H_RK_RNG_NS		786631
+#define SRST_H_RK_RNG_S			786632
+#define SRST_H_TRNG_NS			786633
+#define SRST_H_TRNG_S			786634
+#define SRST_H_CRYPTO_S			786635
+/********Name=PERISOFTRST_CON13,Offset=0x30434********/
+#define SRST_P_PERI_WDT			786640
+#define SRST_T_PERI_WDT			786641
+#define SRST_A_SYSMEM			786642
+#define SRST_H_BOOTROM			786643
+#define SRST_P_PERI_GRF			786644
+#define SRST_A_DMAC			786645
+#define SRST_A_RKDMAC			786646
+/********Name=PERISOFTRST_CON14,Offset=0x30438********/
+#define SRST_P_OTPC_NS			786656
+#define SRST_SBPI_OTPC_NS		786657
+#define SRST_USER_OTPC_NS		786658
+#define SRST_P_OTPC_S			786659
+#define SRST_SBPI_OTPC_S		786660
+#define SRST_USER_OTPC_S		786661
+#define SRST_OTPC_ARB			786662
+#define SRST_P_OTPPHY			786663
+#define SRST_OTP_NPOR			786664
+/********Name=PERISOFTRST_CON15,Offset=0x3043C********/
+#define SRST_P_USB2PHY			786672
+#define SRST_USB2PHY_POR		786676
+#define SRST_USB2PHY_OTG		786677
+#define SRST_USB2PHY_HOST		786678
+#define SRST_P_PIPEPHY			786679
+/********Name=PERISOFTRST_CON16,Offset=0x30440********/
+//#define SRST_P_SARADC			786692
+#define SRST_SARADC			786693
+#define SRST_SARADC_PHY			786694
+#define SRST_P_IOC_VCCIO234		786700
+/********Name=PERISOFTRST_CON17,Offset=0x30444********/
+#define SRST_P_PERI_GPIO1		786704
+#define SRST_P_PERI_GPIO2		786705
+#define SRST_PERI_GPIO1			786706
+#define SRST_PERI_GPIO2			786707
+
+#endif
diff --git a/dts/upstream/src/arm64/rockchip/rk3562-geekpi-1.dts b/dts/upstream/src/arm64/rockchip/rk3562-geekpi-1.dts
new file mode 100644
index 00000000000..c281674347b
--- /dev/null
+++ b/dts/upstream/src/arm64/rockchip/rk3562-geekpi-1.dts
@@ -0,0 +1,331 @@
+/*
+ * SPDX-License-Identifier:     GPL-2.0+
+ *
+ * (C) Copyright 2022 Rockchip Electronics Co., Ltd
+ */
+
+/dts-v1/;
+#include "rk3562.dtsi"
+#include "rk3562-rk809.dtsi"
+#include <dt-bindings/input/input.h>
+
+/ {
+	model = "Geek PI 1 RK3562";
+	compatible = "rockchip,rk3562-evb", "rockchip,rk3562";
+
+
+	adc-keys {
+		compatible = "adc-keys";
+		io-channels = <&saradc0 1>;
+		io-channel-names = "buttons";
+		keyup-threshold-microvolt = <1800000>;
+		bootph-pre-ram;
+		status = "okay";
+
+		volumeup-key {
+			bootph-pre-ram;
+			linux,code = <KEY_VOLUMEUP>;
+			label = "volume up";
+			press-threshold-microvolt = <9>;
+		};
+	};
+
+	dc_12v: dc-12v {
+		compatible = "regulator-fixed";
+		regulator-name = "dc_12v";
+		regulator-always-on;
+		regulator-boot-on;
+		regulator-min-microvolt = <12000000>;
+		regulator-max-microvolt = <12000000>;
+	};
+
+	rk809_sound: rk809-sound {
+		status = "okay";
+		compatible = "rockchip,multicodecs-card";
+		rockchip,card-name = "rockchip-rk809";
+		hp-det-gpio = <&gpio1 RK_PD0 GPIO_ACTIVE_LOW>;
+		rockchip,format = "i2s";
+		rockchip,mclk-fs = <256>;
+		rockchip,cpu = <&sai0>;
+		rockchip,codec = <&rk809_codec>;
+		pinctrl-names = "default";
+		pinctrl-0 = <&hp_det>;
+	};
+
+	sdio_pwrseq: sdio-pwrseq {
+		compatible = "mmc-pwrseq-simple";
+		clocks = <&rk809 1>;
+		clock-names = "ext_clock";
+		pinctrl-names = "default";
+		pinctrl-0 = <&wifi_enable_h>;
+
+		/*
+		 * On the module itself this is one of these (depending
+		 * on the actual card populated):
+		 * - SDIO_RESET_L_WL_REG_ON
+		 * - PDN (power down when low)
+		 */
+		post-power-on-delay-ms = <200>;
+		reset-gpios = <&gpio0 RK_PB3 GPIO_ACTIVE_LOW>;
+	};
+
+	vcc3v3_pcie20: vcc3v3-pcie20 {
+		compatible = "regulator-fixed";
+		regulator-name = "vcc3v3_pcie20";
+		regulator-min-microvolt = <3300000>;
+		regulator-max-microvolt = <3300000>;
+		enable-active-high;
+		gpios = <&gpio0 RK_PB7 GPIO_ACTIVE_HIGH>;
+		startup-delay-us = <5000>;
+		vin-supply = <&dc_12v>;
+	};
+
+	vcc5v0_sys: vcc5v0-sys {
+		compatible = "regulator-fixed";
+		regulator-name = "vcc5v0_sys";
+		regulator-always-on;
+		regulator-boot-on;
+		regulator-min-microvolt = <5000000>;
+		regulator-max-microvolt = <5000000>;
+		vin-supply = <&dc_12v>;
+	};
+
+	vcc5v0_usb: vcc5v0-usb {
+		compatible = "regulator-fixed";
+		regulator-name = "vcc5v0_usb";
+		regulator-always-on;
+		regulator-boot-on;
+		regulator-min-microvolt = <5000000>;
+		regulator-max-microvolt = <5000000>;
+		vin-supply = <&dc_12v>;
+	};
+
+	vcc5v0_usb_host: vcc5v0-usb-host {
+		compatible = "regulator-fixed";
+		regulator-name = "vcc5v0_usb_host";
+		regulator-boot-on;
+		regulator-always-on;
+		regulator-min-microvolt = <5000000>;
+		regulator-max-microvolt = <5000000>;
+		enable-active-high;
+		gpio = <&gpio4 RK_PB0 GPIO_ACTIVE_HIGH>;
+		vin-supply = <&vcc5v0_usb>;
+		pinctrl-names = "default";
+		pinctrl-0 = <&usb_host_pwren>;
+	};
+
+	vcc5v0_usb_otg: vcc5v0-usb-otg {
+		compatible = "regulator-fixed";
+		regulator-name = "vcc5v0_usb_otg";
+		regulator-min-microvolt = <5000000>;
+		regulator-max-microvolt = <5000000>;
+		enable-active-high;
+		gpio = <&gpio0 RK_PC0 GPIO_ACTIVE_HIGH>;
+		vin-supply = <&vcc5v0_usb>;
+		pinctrl-names = "default";
+		pinctrl-0 = <&usb_otg_pwren>;
+	};
+
+	vcc3v3_clk: vcc3v3-clk {
+		compatible = "regulator-fixed";
+		regulator-name = "vcc3v3_clk";
+		regulator-min-microvolt = <3300000>;
+		regulator-max-microvolt = <3300000>;
+		vin-supply = <&vcc5v0_sys>;
+	};
+
+	vcc3v3_sys: vcc-sys {
+		compatible = "regulator-fixed";
+		regulator-name = "vcc3v3_sys";
+		regulator-always-on;
+		regulator-boot-on;
+		regulator-min-microvolt = <3300000>;
+		regulator-max-microvolt = <3300000>;
+		vin-supply = <&dc_12v>;
+	};
+
+	vcc25_ddr: vcc25-ddr {
+		compatible = "regulator-fixed";
+		regulator-name = "vcc25_ddr";
+		regulator-always-on;
+		regulator-boot-on;
+		regulator-min-microvolt = <2500000>;
+		regulator-max-microvolt = <2500000>;
+		vin-supply = <&vcc3v3_sys>;
+	};
+
+	vdd_npu: vdd-npu {
+		compatible = "pwm-regulator";
+		pwms = <&pwm6 0 5000 1>;
+		regulator-name = "vdd_npu";
+		regulator-min-microvolt = <800000>;
+		regulator-max-microvolt = <1100000>;
+		regulator-init-microvolt = <900000>;
+		regulator-always-on;
+		regulator-boot-on;
+		regulator-settling-time-up-us = <250>;
+		pwm-supply = <&vcc5v0_sys>;
+		status = "okay";
+	};
+
+	wireless-wlan {
+		compatible = "wlan-platdata";
+		rockchip,grf = <&sys_grf>;
+		wifi_chip_type = "ap6275s";
+		pinctrl-names = "default";
+		pinctrl-0 = <&wifi_host_wake_irq>;
+		WIFI,host_wake_irq = <&gpio0 RK_PB4 GPIO_ACTIVE_HIGH>;
+		WIFI,poweren_gpio = <&gpio0 RK_PB3 GPIO_ACTIVE_HIGH>;
+		status = "okay";
+	};
+
+	wireless-bluetooth {
+		compatible = "bluetooth-platdata";
+		clocks = <&rk809 1>;
+		clock-names = "ext_clock";
+		//wifi-bt-power-toggle;
+		uart_rts_gpios = <&gpio1 RK_PD3 GPIO_ACTIVE_LOW>;
+		pinctrl-names = "default", "rts_gpio";
+		pinctrl-0 = <&uart1m0_rtsn>;
+		pinctrl-1 = <&uart1_gpios>;
+		BT,reset_gpio    = <&gpio0 RK_PC5 GPIO_ACTIVE_HIGH>;
+		BT,wake_gpio     = <&gpio0 RK_PC7 GPIO_ACTIVE_HIGH>;
+		BT,wake_host_irq = <&gpio0 RK_PC6 GPIO_ACTIVE_HIGH>;
+		status = "okay";
+	};
+
+};
+
+&pcie2x1 {
+	reset-gpios = <&gpio3 RK_PB0 GPIO_ACTIVE_HIGH>;
+	vpcie3v3-supply = <&vcc3v3_pcie20>;
+	status = "disabled";
+};
+
+&pinctrl {
+	headphone {
+		hp_det: hp-det {
+			rockchip,pins = <1 RK_PD0 RK_FUNC_GPIO &pcfg_pull_none>;
+		};
+	};
+
+	lcd {
+		lcd_rst_gpio: lcd-rst-gpio {
+			rockchip,pins = <0 RK_PC4 RK_FUNC_GPIO &pcfg_pull_none>;
+		};
+	};
+
+	sdio-pwrseq {
+		wifi_enable_h: wifi-enable-h {
+			rockchip,pins = <0 RK_PB3 RK_FUNC_GPIO &pcfg_pull_none>;
+		};
+	};
+
+	usb {
+		usb_host_pwren: usb-host-pwren {
+			rockchip,pins = <4 RK_PB0 RK_FUNC_GPIO &pcfg_pull_none>;
+		};
+
+		usb_otg_pwren: usb-otg-pwren {
+			rockchip,pins = <0 RK_PC0 RK_FUNC_GPIO &pcfg_pull_none>;
+		};
+	};
+
+	wireless-wlan {
+		wifi_host_wake_irq: wifi-host-wake-irq {
+			rockchip,pins = <0 RK_PB4 RK_FUNC_GPIO &pcfg_pull_down>;
+		};
+	};
+
+	wireless-bluetooth {
+		uart1_gpios: uart1-gpios {
+			rockchip,pins = <1 RK_PD3 RK_FUNC_GPIO &pcfg_pull_none>;
+		};
+	};
+};
+
+&i2c0 {
+	bootph-all;
+	status = "okay";
+};
+
+&rk809 {
+	bootph-all;
+	status = "okay";
+};
+
+&rgmiim0_miim {
+	bootph-all;
+	status = "okay";
+};
+
+&rgmiim0_tx_bus2 {
+	bootph-all;
+	status = "okay";
+};
+
+&rgmiim0_rx_bus2 {
+	bootph-all;
+	status = "okay";
+};
+
+&rgmiim0_rgmii_clk {
+	bootph-all;
+	status = "okay";
+};
+
+&rgmiim0_rgmii_bus {
+	bootph-all;
+	status = "okay";
+};
+
+&ethm0_pins {
+	bootph-all;
+        status = "okay";
+};
+
+&gmac0_stmmac_axi_setup {
+	bootph-all;
+        status = "okay";
+};
+
+&gmac0_mtl_rx_setup {
+	bootph-all;
+        status = "okay";
+};
+
+&gmac0_mtl_tx_setup {
+	bootph-all;
+        status = "okay";
+};
+
+&mdio0 {
+	bootph-all;
+        status = "okay";
+	rgmii_phy: phy@0 {
+		compatible = "ethernet-phy-ieee802.3-c22";
+		reg = <0x0>;
+		bootph-all;
+        	status = "okay";
+	};
+};
+
+&gmac0 {
+	bootph-all;
+	phy-mode = "rgmii-rxid";
+	clock_in_out = "output";
+	snps,reset-active-low;
+	pinctrl-names = "default";
+	pinctrl-0 = <&rgmiim0_miim
+		     &rgmiim0_tx_bus2
+		     &rgmiim0_rx_bus2
+		     &rgmiim0_rgmii_clk
+		     &rgmiim0_rgmii_bus>;
+
+	phy-handle = <&rgmii_phy>;
+	status = "okay";
+	snps,reset-gpio = <&gpio3 RK_PD0 GPIO_ACTIVE_LOW>;
+	snps,reset-delays-us = <20000 20000 100000>;
+	phy-supply = <&vcc_3v3>;
+	tx_delay = <0x35>;
+};
diff --git a/dts/upstream/src/arm64/rockchip/rk3562-pinctrl.dtsi b/dts/upstream/src/arm64/rockchip/rk3562-pinctrl.dtsi
new file mode 100644
index 00000000000..b59f870ad7f
--- /dev/null
+++ b/dts/upstream/src/arm64/rockchip/rk3562-pinctrl.dtsi
@@ -0,0 +1,1873 @@
+// SPDX-License-Identifier: (GPL-2.0+ OR MIT)
+/*
+ * Copyright (c) 2022 Rockchip Electronics Co., Ltd.
+ */
+
+#include <dt-bindings/pinctrl/rockchip.h>
+#include "rockchip-pinconf.dtsi"
+
+/*
+ * This file is auto generated by pin2dts tool, please keep these code
+ * by adding changes at end of this file.
+ */
+&pinctrl {
+	cam {
+		camm0_pins: camm0-pins {
+			rockchip,pins =
+				/* cam_clk0_out_m0 */
+				<3 RK_PB2 2 &pcfg_pull_none>,
+				/* cam_clk1_out_m0 */
+				<3 RK_PB3 2 &pcfg_pull_none>;
+		};
+
+		camm1_pins: camm1-pins {
+			rockchip,pins =
+				/* cam_clk0_out_m1 */
+				<4 RK_PB1 3 &pcfg_pull_none>,
+				/* cam_clk1_out_m1 */
+				<4 RK_PB7 3 &pcfg_pull_none>;
+		};
+
+		cam_clk2_out: cam-clk2-out {
+			rockchip,pins =
+				/* cam_clk2_out */
+				<3 RK_PB4 2 &pcfg_pull_none>;
+		};
+		cam_clk3_out: cam-clk3-out {
+			rockchip,pins =
+				/* cam_clk3_out */
+				<3 RK_PB5 2 &pcfg_pull_none>;
+		};
+	};
+
+	can0 {
+		can0m0_pins: can0m0-pins {
+			rockchip,pins =
+				/* can0_rx_m0 */
+				<3 RK_PA1 4 &pcfg_pull_none>,
+				/* can0_tx_m0 */
+				<3 RK_PA0 4 &pcfg_pull_none>;
+		};
+
+		can0m1_pins: can0m1-pins {
+			rockchip,pins =
+				/* can0_rx_m1 */
+				<3 RK_PB7 6 &pcfg_pull_none>,
+				/* can0_tx_m1 */
+				<3 RK_PB6 6 &pcfg_pull_none>;
+		};
+
+		can0m2_pins: can0m2-pins {
+			rockchip,pins =
+				/* can0_rx_m2 */
+				<0 RK_PC7 2 &pcfg_pull_none>,
+				/* can0_tx_m2 */
+				<0 RK_PC6 2 &pcfg_pull_none>;
+		};
+	};
+
+	can1 {
+		can1m0_pins: can1m0-pins {
+			rockchip,pins =
+				/* can1_rx_m0 */
+				<1 RK_PB7 4 &pcfg_pull_none>,
+				/* can1_tx_m0 */
+				<1 RK_PC0 5 &pcfg_pull_none>;
+		};
+
+		can1m1_pins: can1m1-pins {
+			rockchip,pins =
+				/* can1_rx_m1 */
+				<0 RK_PC1 4 &pcfg_pull_none>,
+				/* can1_tx_m1 */
+				<0 RK_PC0 4 &pcfg_pull_none>;
+		};
+	};
+
+	clk {
+		clk_32k_in: clk-32k-in {
+			rockchip,pins =
+				/* clk_32k_in */
+				<0 RK_PB0 1 &pcfg_pull_none>;
+		};
+	};
+
+	clk0 {
+		clk0_32k_out: clk0-32k-out {
+			rockchip,pins =
+				/* clk0_32k_out */
+				<0 RK_PB0 2 &pcfg_pull_none>;
+		};
+	};
+
+	clk1 {
+		clk1_32k_out: clk1-32k-out {
+			rockchip,pins =
+				/* clk1_32k_out */
+				<2 RK_PA1 3 &pcfg_pull_none>;
+		};
+	};
+
+	cpu {
+		cpu_pins: cpu-pins {
+			rockchip,pins =
+				/* cpu_avs */
+				<0 RK_PB7 3 &pcfg_pull_none>;
+		};
+	};
+
+	dsm {
+		dsm_pins: dsm-pins {
+			rockchip,pins =
+				/* dsm_aud_ln */
+				<1 RK_PB4 5 &pcfg_pull_none>,
+				/* dsm_aud_lp */
+				<1 RK_PB3 5 &pcfg_pull_none>,
+				/* dsm_aud_rn */
+				<1 RK_PB6 6 &pcfg_pull_none>,
+				/* dsm_aud_rp */
+				<1 RK_PB5 6 &pcfg_pull_none>;
+		};
+	};
+
+	emmc {
+		emmc_bus8: emmc-bus8 {
+			rockchip,pins =
+				/* emmc_d0 */
+				<1 RK_PA0 1 &pcfg_pull_up_drv_level_2>,
+				/* emmc_d1 */
+				<1 RK_PA1 1 &pcfg_pull_up_drv_level_2>,
+				/* emmc_d2 */
+				<1 RK_PA2 1 &pcfg_pull_up_drv_level_2>,
+				/* emmc_d3 */
+				<1 RK_PA3 1 &pcfg_pull_up_drv_level_2>,
+				/* emmc_d4 */
+				<1 RK_PA4 1 &pcfg_pull_up_drv_level_2>,
+				/* emmc_d5 */
+				<1 RK_PA5 1 &pcfg_pull_up_drv_level_2>,
+				/* emmc_d6 */
+				<1 RK_PA6 1 &pcfg_pull_up_drv_level_2>,
+				/* emmc_d7 */
+				<1 RK_PA7 1 &pcfg_pull_up_drv_level_2>;
+		};
+
+		emmc_clk: emmc-clk {
+			rockchip,pins =
+				/* emmc_clk */
+				<1 RK_PB1 1 &pcfg_pull_up_drv_level_2>;
+		};
+
+		emmc_cmd: emmc-cmd {
+			rockchip,pins =
+				/* emmc_cmd */
+				<1 RK_PB0 1 &pcfg_pull_up_drv_level_2>;
+		};
+
+		emmc_strb: emmc-strb {
+			rockchip,pins =
+				/* emmc_strb */
+				<1 RK_PB2 1 &pcfg_pull_none>;
+		};
+	};
+
+	eth {
+		ethm0_pins: ethm0-pins {
+			rockchip,pins =
+				/* eth_clk_25m_out_m0 */
+				<4 RK_PB1 2 &pcfg_pull_none>;
+		};
+
+		ethm1_pins: ethm1-pins {
+			rockchip,pins =
+				/* eth_clk_25m_out_m1 */
+				<2 RK_PA1 2 &pcfg_pull_none>;
+		};
+	};
+
+	fspi {
+		fspi_pins: fspi-pins {
+			rockchip,pins =
+				/* fspi_clk */
+				<1 RK_PB1 2 &pcfg_pull_none>,
+				/* fspi_d0 */
+				<1 RK_PA0 2 &pcfg_pull_none>,
+				/* fspi_d1 */
+				<1 RK_PA1 2 &pcfg_pull_none>,
+				/* fspi_d2 */
+				<1 RK_PA2 2 &pcfg_pull_none>,
+				/* fspi_d3 */
+				<1 RK_PA3 2 &pcfg_pull_none>;
+		};
+
+		fspi_csn0: fspi-csn0 {
+			rockchip,pins =
+				/* fspi_csn0 */
+				<1 RK_PB0 2 &pcfg_pull_none>;
+		};
+		fspi_csn1: fspi-csn1 {
+			rockchip,pins =
+				/* fspi_csn1 */
+				<1 RK_PB2 2 &pcfg_pull_none>;
+		};
+	};
+
+	gpu {
+		gpu_pins: gpu-pins {
+			rockchip,pins =
+				/* gpu_avs */
+				<0 RK_PC0 3 &pcfg_pull_none>;
+		};
+	};
+
+	i2c0 {
+		i2c0_xfer: i2c0-xfer {
+			rockchip,pins =
+				/* i2c0_scl */
+				<0 RK_PB1 1 &pcfg_pull_none_smt>,
+				/* i2c0_sda */
+				<0 RK_PB2 1 &pcfg_pull_none_smt>;
+		};
+	};
+
+	i2c1 {
+		i2c1m0_xfer: i2c1m0-xfer {
+			rockchip,pins =
+				/* i2c1_scl_m0 */
+				<0 RK_PB3 1 &pcfg_pull_none_smt>,
+				/* i2c1_sda_m0 */
+				<0 RK_PB4 1 &pcfg_pull_none_smt>;
+		};
+
+		i2c1m1_xfer: i2c1m1-xfer {
+			rockchip,pins =
+				/* i2c1_scl_m1 */
+				<4 RK_PB4 5 &pcfg_pull_none_smt>,
+				/* i2c1_sda_m1 */
+				<4 RK_PB5 5 &pcfg_pull_none_smt>;
+		};
+	};
+
+	i2c2 {
+		i2c2m0_xfer: i2c2m0-xfer {
+			rockchip,pins =
+				/* i2c2_scl_m0 */
+				<0 RK_PB5 1 &pcfg_pull_none_smt>,
+				/* i2c2_sda_m0 */
+				<0 RK_PB6 1 &pcfg_pull_none_smt>;
+		};
+
+		i2c2m1_xfer: i2c2m1-xfer {
+			rockchip,pins =
+				/* i2c2_scl_m1 */
+				<3 RK_PD2 5 &pcfg_pull_none_smt>,
+				/* i2c2_sda_m1 */
+				<3 RK_PD3 5 &pcfg_pull_none_smt>;
+		};
+	};
+
+	i2c3 {
+		i2c3m0_xfer: i2c3m0-xfer {
+			rockchip,pins =
+				/* i2c3_scl_m0 */
+				<3 RK_PA0 1 &pcfg_pull_none_smt>,
+				/* i2c3_sda_m0 */
+				<3 RK_PA1 1 &pcfg_pull_none_smt>;
+		};
+
+		i2c3m1_xfer: i2c3m1-xfer {
+			rockchip,pins =
+				/* i2c3_scl_m1 */
+				<4 RK_PA5 5 &pcfg_pull_none_smt>,
+				/* i2c3_sda_m1 */
+				<4 RK_PA6 5 &pcfg_pull_none_smt>;
+		};
+	};
+
+	i2c4 {
+		i2c4m0_xfer: i2c4m0-xfer {
+			rockchip,pins =
+				/* i2c4_scl_m0 */
+				<3 RK_PB6 5 &pcfg_pull_none_smt>,
+				/* i2c4_sda_m0 */
+				<3 RK_PB7 5 &pcfg_pull_none_smt>;
+		};
+
+		i2c4m1_xfer: i2c4m1-xfer {
+			rockchip,pins =
+				/* i2c4_scl_m1 */
+				<0 RK_PA5 2 &pcfg_pull_none_smt>,
+				/* i2c4_sda_m1 */
+				<0 RK_PA4 2 &pcfg_pull_none_smt>;
+		};
+	};
+
+	i2c5 {
+		i2c5m0_xfer: i2c5m0-xfer {
+			rockchip,pins =
+				/* i2c5_scl_m0 */
+				<3 RK_PC2 1 &pcfg_pull_none_smt>,
+				/* i2c5_sda_m0 */
+				<3 RK_PC3 1 &pcfg_pull_none_smt>;
+		};
+
+		i2c5m1_xfer: i2c5m1-xfer {
+			rockchip,pins =
+				/* i2c5_scl_m1 */
+				<1 RK_PC7 4 &pcfg_pull_none_smt>,
+				/* i2c5_sda_m1 */
+				<1 RK_PD0 4 &pcfg_pull_none_smt>;
+		};
+	};
+
+	i2s0 {
+		i2s0m0_lrck: i2s0m0-lrck {
+			rockchip,pins =
+				/* i2s0_lrck_m0 */
+				<3 RK_PA4 1 &pcfg_pull_none>;
+		};
+
+		i2s0m0_mclk: i2s0m0-mclk {
+			rockchip,pins =
+				/* i2s0_mclk_m0 */
+				<3 RK_PA2 1 &pcfg_pull_none>;
+		};
+
+		i2s0m0_sclk: i2s0m0-sclk {
+			rockchip,pins =
+				/* i2s0_sclk_m0 */
+				<3 RK_PA3 1 &pcfg_pull_none>;
+		};
+
+		i2s0m0_sdi0: i2s0m0-sdi0 {
+			rockchip,pins =
+				/* i2s0_sdi0_m0 */
+				<3 RK_PB1 1 &pcfg_pull_none>;
+		};
+
+		i2s0m0_sdi1: i2s0m0-sdi1 {
+			rockchip,pins =
+				/* i2s0_sdi1_m0 */
+				<3 RK_PB0 2 &pcfg_pull_none>;
+		};
+
+		i2s0m0_sdi2: i2s0m0-sdi2 {
+			rockchip,pins =
+				/* i2s0_sdi2_m0 */
+				<3 RK_PA7 2 &pcfg_pull_none>;
+		};
+
+		i2s0m0_sdi3: i2s0m0-sdi3 {
+			rockchip,pins =
+				/* i2s0_sdi3_m0 */
+				<3 RK_PA6 2 &pcfg_pull_none>;
+		};
+
+		i2s0m0_sdo0: i2s0m0-sdo0 {
+			rockchip,pins =
+				/* i2s0_sdo0_m0 */
+				<3 RK_PA5 1 &pcfg_pull_none>;
+		};
+
+		i2s0m0_sdo1: i2s0m0-sdo1 {
+			rockchip,pins =
+				/* i2s0_sdo1_m0 */
+				<3 RK_PA6 1 &pcfg_pull_none>;
+		};
+
+		i2s0m0_sdo2: i2s0m0-sdo2 {
+			rockchip,pins =
+				/* i2s0_sdo2_m0 */
+				<3 RK_PA7 1 &pcfg_pull_none>;
+		};
+
+		i2s0m0_sdo3: i2s0m0-sdo3 {
+			rockchip,pins =
+				/* i2s0_sdo3_m0 */
+				<3 RK_PB0 1 &pcfg_pull_none>;
+		};
+
+		i2s0m1_lrck: i2s0m1-lrck {
+			rockchip,pins =
+				/* i2s0_lrck_m1 */
+				<1 RK_PC4 3 &pcfg_pull_none>;
+		};
+
+		i2s0m1_mclk: i2s0m1-mclk {
+			rockchip,pins =
+				/* i2s0_mclk_m1 */
+				<1 RK_PC6 3 &pcfg_pull_none>;
+		};
+
+		i2s0m1_sclk: i2s0m1-sclk {
+			rockchip,pins =
+				/* i2s0_sclk_m1 */
+				<1 RK_PC5 3 &pcfg_pull_none>;
+		};
+
+		i2s0m1_sdi0: i2s0m1-sdi0 {
+			rockchip,pins =
+				/* i2s0_sdi0_m1 */
+				<1 RK_PC1 3 &pcfg_pull_none>;
+		};
+
+		i2s0m1_sdi1: i2s0m1-sdi1 {
+			rockchip,pins =
+				/* i2s0_sdi1_m1 */
+				<1 RK_PC2 3 &pcfg_pull_none>;
+		};
+
+		i2s0m1_sdi2: i2s0m1-sdi2 {
+			rockchip,pins =
+				/* i2s0_sdi2_m1 */
+				<1 RK_PD3 3 &pcfg_pull_none>;
+		};
+
+		i2s0m1_sdi3: i2s0m1-sdi3 {
+			rockchip,pins =
+				/* i2s0_sdi3_m1 */
+				<1 RK_PD4 3 &pcfg_pull_none>;
+		};
+
+		i2s0m1_sdo0: i2s0m1-sdo0 {
+			rockchip,pins =
+				/* i2s0_sdo0_m1 */
+				<1 RK_PC3 3 &pcfg_pull_none>;
+		};
+
+		i2s0m1_sdo1: i2s0m1-sdo1 {
+			rockchip,pins =
+				/* i2s0_sdo1_m1 */
+				<1 RK_PD1 3 &pcfg_pull_none>;
+		};
+
+		i2s0m1_sdo2: i2s0m1-sdo2 {
+			rockchip,pins =
+				/* i2s0_sdo2_m1 */
+				<1 RK_PD2 3 &pcfg_pull_none>;
+		};
+
+		i2s0m1_sdo3: i2s0m1-sdo3 {
+			rockchip,pins =
+				/* i2s0_sdo3_m1 */
+				<2 RK_PA1 5 &pcfg_pull_none>;
+		};
+	};
+
+	i2s1 {
+		i2s1m0_lrck: i2s1m0-lrck {
+			rockchip,pins =
+				/* i2s1_lrck_m0 */
+				<3 RK_PC6 2 &pcfg_pull_none>;
+		};
+
+		i2s1m0_mclk: i2s1m0-mclk {
+			rockchip,pins =
+				/* i2s1_mclk_m0 */
+				<3 RK_PC4 2 &pcfg_pull_none>;
+		};
+
+		i2s1m0_sclk: i2s1m0-sclk {
+			rockchip,pins =
+				/* i2s1_sclk_m0 */
+				<3 RK_PC5 2 &pcfg_pull_none>;
+		};
+
+		i2s1m0_sdi0: i2s1m0-sdi0 {
+			rockchip,pins =
+				/* i2s1_sdi0_m0 */
+				<3 RK_PD0 2 &pcfg_pull_none>;
+		};
+
+		i2s1m0_sdi1: i2s1m0-sdi1 {
+			rockchip,pins =
+				/* i2s1_sdi1_m0 */
+				<3 RK_PD1 2 &pcfg_pull_none>;
+		};
+
+		i2s1m0_sdi2: i2s1m0-sdi2 {
+			rockchip,pins =
+				/* i2s1_sdi2_m0 */
+				<3 RK_PD2 2 &pcfg_pull_none>;
+		};
+
+		i2s1m0_sdi3: i2s1m0-sdi3 {
+			rockchip,pins =
+				/* i2s1_sdi3_m0 */
+				<3 RK_PD3 2 &pcfg_pull_none>;
+		};
+
+		i2s1m0_sdo0: i2s1m0-sdo0 {
+			rockchip,pins =
+				/* i2s1_sdo0_m0 */
+				<3 RK_PC7 2 &pcfg_pull_none>;
+		};
+
+		i2s1m0_sdo1: i2s1m0-sdo1 {
+			rockchip,pins =
+				/* i2s1_sdo1_m0 */
+				<4 RK_PB4 2 &pcfg_pull_none>;
+		};
+
+		i2s1m0_sdo2: i2s1m0-sdo2 {
+			rockchip,pins =
+				/* i2s1_sdo2_m0 */
+				<4 RK_PB5 2 &pcfg_pull_none>;
+		};
+
+		i2s1m0_sdo3: i2s1m0-sdo3 {
+			rockchip,pins =
+				/* i2s1_sdo3_m0 */
+				<4 RK_PB6 2 &pcfg_pull_none>;
+		};
+
+		i2s1m1_lrck: i2s1m1-lrck {
+			rockchip,pins =
+				/* i2s1_lrck_m1 */
+				<3 RK_PB4 1 &pcfg_pull_none>;
+		};
+
+		i2s1m1_mclk: i2s1m1-mclk {
+			rockchip,pins =
+				/* i2s1_mclk_m1 */
+				<3 RK_PB2 1 &pcfg_pull_none>;
+		};
+
+		i2s1m1_sclk: i2s1m1-sclk {
+			rockchip,pins =
+				/* i2s1_sclk_m1 */
+				<3 RK_PB3 1 &pcfg_pull_none>;
+		};
+
+		i2s1m1_sdi0: i2s1m1-sdi0 {
+			rockchip,pins =
+				/* i2s1_sdi0_m1 */
+				<3 RK_PC1 1 &pcfg_pull_none>;
+		};
+
+		i2s1m1_sdi1: i2s1m1-sdi1 {
+			rockchip,pins =
+				/* i2s1_sdi1_m1 */
+				<3 RK_PC0 2 &pcfg_pull_none>;
+		};
+
+		i2s1m1_sdi2: i2s1m1-sdi2 {
+			rockchip,pins =
+				/* i2s1_sdi2_m1 */
+				<3 RK_PB7 2 &pcfg_pull_none>;
+		};
+
+		i2s1m1_sdi3: i2s1m1-sdi3 {
+			rockchip,pins =
+				/* i2s1_sdi3_m1 */
+				<3 RK_PB6 2 &pcfg_pull_none>;
+		};
+
+		i2s1m1_sdo0: i2s1m1-sdo0 {
+			rockchip,pins =
+				/* i2s1_sdo0_m1 */
+				<3 RK_PB5 1 &pcfg_pull_none>;
+		};
+
+		i2s1m1_sdo1: i2s1m1-sdo1 {
+			rockchip,pins =
+				/* i2s1_sdo1_m1 */
+				<3 RK_PB6 1 &pcfg_pull_none>;
+		};
+
+		i2s1m1_sdo2: i2s1m1-sdo2 {
+			rockchip,pins =
+				/* i2s1_sdo2_m1 */
+				<3 RK_PB7 1 &pcfg_pull_none>;
+		};
+
+		i2s1m1_sdo3: i2s1m1-sdo3 {
+			rockchip,pins =
+				/* i2s1_sdo3_m1 */
+				<3 RK_PC0 1 &pcfg_pull_none>;
+		};
+	};
+
+	i2s2 {
+		i2s2m0_lrck: i2s2m0-lrck {
+			rockchip,pins =
+				/* i2s2_lrck_m0 */
+				<1 RK_PD6 1 &pcfg_pull_none>;
+		};
+
+		i2s2m0_mclk: i2s2m0-mclk {
+			rockchip,pins =
+				/* i2s2_mclk_m0 */
+				<2 RK_PA1 1 &pcfg_pull_none>;
+		};
+
+		i2s2m0_sclk: i2s2m0-sclk {
+			rockchip,pins =
+				/* i2s2_sclk_m0 */
+				<1 RK_PD5 1 &pcfg_pull_none>;
+		};
+
+		i2s2m0_sdi: i2s2m0-sdi {
+			rockchip,pins =
+				/* i2s2_sdi_m0 */
+				<2 RK_PA0 1 &pcfg_pull_none>;
+		};
+
+		i2s2m0_sdo: i2s2m0-sdo {
+			rockchip,pins =
+				/* i2s2_sdo_m0 */
+				<1 RK_PD7 1 &pcfg_pull_none>;
+		};
+
+		i2s2m1_lrck: i2s2m1-lrck {
+			rockchip,pins =
+				/* i2s2_lrck_m1 */
+				<4 RK_PA1 3 &pcfg_pull_none>;
+		};
+
+		i2s2m1_mclk: i2s2m1-mclk {
+			rockchip,pins =
+				/* i2s2_mclk_m1 */
+				<3 RK_PD6 3 &pcfg_pull_none>;
+		};
+
+		i2s2m1_sclk: i2s2m1-sclk {
+			rockchip,pins =
+				/* i2s2_sclk_m1 */
+				<4 RK_PB1 4 &pcfg_pull_none>;
+		};
+
+		i2s2m1_sdi: i2s2m1-sdi {
+			rockchip,pins =
+				/* i2s2_sdi_m1 */
+				<3 RK_PD4 4 &pcfg_pull_none>;
+		};
+
+		i2s2m1_sdo: i2s2m1-sdo {
+			rockchip,pins =
+				/* i2s2_sdo_m1 */
+				<3 RK_PD5 4 &pcfg_pull_none>;
+		};
+	};
+
+	isp {
+		isp_pins: isp-pins {
+			rockchip,pins =
+				/* isp_flash_trigin */
+				<3 RK_PC1 2 &pcfg_pull_none>,
+				/* isp_flash_trigout */
+				<3 RK_PC3 2 &pcfg_pull_none>,
+				/* isp_prelight_trigout */
+				<3 RK_PC2 2 &pcfg_pull_none>;
+		};
+	};
+
+	jtag {
+		jtagm0_pins: jtagm0-pins {
+			rockchip,pins =
+				/* jtag_cpu_mcu_tck_m0 */
+				<0 RK_PD1 2 &pcfg_pull_none>,
+				/* jtag_cpu_mcu_tms_m0 */
+				<0 RK_PD0 2 &pcfg_pull_none>;
+		};
+
+		jtagm1_pins: jtagm1-pins {
+			rockchip,pins =
+				/* jtag_cpu_mcu_tck_m1 */
+				<1 RK_PB5 2 &pcfg_pull_none>,
+				/* jtag_cpu_mcu_tms_m1 */
+				<1 RK_PB6 2 &pcfg_pull_none>;
+		};
+	};
+
+	npu {
+		npu_pins: npu-pins {
+			rockchip,pins =
+				/* npu_avs */
+				<0 RK_PC1 3 &pcfg_pull_none>;
+		};
+	};
+
+	pcie20 {
+		pcie20m0_pins: pcie20m0-pins {
+			rockchip,pins =
+				/* pcie20_clkreqn_m0 */
+				<0 RK_PA6 1 &pcfg_pull_none>,
+				/* pcie20_perstn_m0 */
+				<0 RK_PB5 2 &pcfg_pull_none>,
+				/* pcie20_waken_m0 */
+				<0 RK_PB6 2 &pcfg_pull_none>;
+		};
+
+		pcie20m1_pins: pcie20m1-pins {
+			rockchip,pins =
+				/* pcie20_clkreqn_m1 */
+				<3 RK_PA6 4 &pcfg_pull_none>,
+				/* pcie20_perstn_m1 */
+				<3 RK_PB0 4 &pcfg_pull_none>,
+				/* pcie20_waken_m1 */
+				<3 RK_PA7 4 &pcfg_pull_none>;
+		};
+
+		pcie20_buttonrstn: pcie20-buttonrstn {
+			rockchip,pins =
+				/* pcie20_buttonrstn */
+				<0 RK_PB0 3 &pcfg_pull_none>;
+		};
+	};
+
+	pdm {
+		pdmm0_clk0: pdmm0-clk0 {
+			rockchip,pins =
+				/* pdm_clk0_m0 */
+				<3 RK_PA6 3 &pcfg_pull_none>;
+		};
+
+		pdmm0_clk1: pdmm0-clk1 {
+			rockchip,pins =
+				/* pdm_clk1_m0 */
+				<3 RK_PA2 3 &pcfg_pull_none>;
+		};
+
+		pdmm0_sdi0: pdmm0-sdi0 {
+			rockchip,pins =
+				/* pdm_sdi0_m0 */
+				<3 RK_PB1 2 &pcfg_pull_none>;
+		};
+
+		pdmm0_sdi1: pdmm0-sdi1 {
+			rockchip,pins =
+				/* pdm_sdi1_m0 */
+				<3 RK_PB0 3 &pcfg_pull_none>;
+		};
+
+		pdmm0_sdi2: pdmm0-sdi2 {
+			rockchip,pins =
+				/* pdm_sdi2_m0 */
+				<3 RK_PA7 3 &pcfg_pull_none>;
+		};
+
+		pdmm0_sdi3: pdmm0-sdi3 {
+			rockchip,pins =
+				/* pdm_sdi3_m0 */
+				<3 RK_PA0 3 &pcfg_pull_none>;
+		};
+
+		pdmm1_clk0: pdmm1-clk0 {
+			rockchip,pins =
+				/* pdm_clk0_m1 */
+				<4 RK_PB7 4 &pcfg_pull_none>;
+		};
+
+		pdmm1_clk1: pdmm1-clk1 {
+			rockchip,pins =
+				/* pdm_clk1_m1 */
+				<4 RK_PB1 5 &pcfg_pull_none>;
+		};
+
+		pdmm1_sdi0: pdmm1-sdi0 {
+			rockchip,pins =
+				/* pdm_sdi0_m1 */
+				<4 RK_PA7 4 &pcfg_pull_none>;
+		};
+
+		pdmm1_sdi1: pdmm1-sdi1 {
+			rockchip,pins =
+				/* pdm_sdi1_m1 */
+				<4 RK_PB0 4 &pcfg_pull_none>;
+		};
+
+		pdmm1_sdi2: pdmm1-sdi2 {
+			rockchip,pins =
+				/* pdm_sdi2_m1 */
+				<4 RK_PA5 4 &pcfg_pull_none>;
+		};
+
+		pdmm1_sdi3: pdmm1-sdi3 {
+			rockchip,pins =
+				/* pdm_sdi3_m1 */
+				<4 RK_PA6 4 &pcfg_pull_none>;
+		};
+	};
+
+	pmic {
+		pmic_int: pmic-int {
+			rockchip,pins =
+				<0 RK_PA3 0 &pcfg_pull_up>;
+		};
+
+		soc_slppin_gpio: soc-slppin-gpio {
+			rockchip,pins =
+				<0 RK_PA2 0 &pcfg_output_low>;
+		};
+
+		soc_slppin_slp: soc-slppin-slp {
+			rockchip,pins =
+				<0 RK_PA2 1 &pcfg_pull_none>;
+		};
+	};
+
+	pmu {
+		pmu_pins: pmu-pins {
+			rockchip,pins =
+				/* pmu_debug */
+				<0 RK_PA5 3 &pcfg_pull_none>;
+		};
+	};
+
+	pwm0 {
+		pwm0m0_pins: pwm0m0-pins {
+			rockchip,pins =
+				/* pwm0_m0 */
+				<0 RK_PC3 2 &pcfg_pull_none>;
+		};
+
+		pwm0m1_pins: pwm0m1-pins {
+			rockchip,pins =
+				/* pwm0_m1 */
+				<1 RK_PC5 4 &pcfg_pull_none>;
+		};
+	};
+
+	pwm1 {
+		pwm1m0_pins: pwm1m0-pins {
+			rockchip,pins =
+				/* pwm1_m0 */
+				<0 RK_PC4 2 &pcfg_pull_none>;
+		};
+
+		pwm1m1_pins: pwm1m1-pins {
+			rockchip,pins =
+				/* pwm1_m1 */
+				<1 RK_PC6 4 &pcfg_pull_none>;
+		};
+	};
+
+	pwm2 {
+		pwm2m0_pins: pwm2m0-pins {
+			rockchip,pins =
+				/* pwm2_m0 */
+				<0 RK_PC5 2 &pcfg_pull_none>;
+		};
+
+		pwm2m1_pins: pwm2m1-pins {
+			rockchip,pins =
+				/* pwm2_m1 */
+				<1 RK_PC7 3 &pcfg_pull_none>;
+		};
+	};
+
+	pwm3 {
+		pwm3m0_pins: pwm3m0-pins {
+			rockchip,pins =
+				/* pwm3_m0 */
+				<0 RK_PA7 1 &pcfg_pull_none>;
+		};
+
+		pwm3m1_pins: pwm3m1-pins {
+			rockchip,pins =
+				/* pwm3_m1 */
+				<1 RK_PD0 3 &pcfg_pull_none>;
+		};
+	};
+
+	pwm4 {
+		pwm4m0_pins: pwm4m0-pins {
+			rockchip,pins =
+				/* pwm4_m0 */
+				<0 RK_PB7 2 &pcfg_pull_none>;
+		};
+
+		pwm4m1_pins: pwm4m1-pins {
+			rockchip,pins =
+				/* pwm4_m1 */
+				<1 RK_PD1 4 &pcfg_pull_none>;
+		};
+	};
+
+	pwm5 {
+		pwm5m0_pins: pwm5m0-pins {
+			rockchip,pins =
+				/* pwm5_m0 */
+				<0 RK_PC2 2 &pcfg_pull_none>;
+		};
+
+		pwm5m1_pins: pwm5m1-pins {
+			rockchip,pins =
+				/* pwm5_m1 */
+				<1 RK_PD2 4 &pcfg_pull_none>;
+		};
+	};
+
+	pwm6 {
+		pwm6m0_pins: pwm6m0-pins {
+			rockchip,pins =
+				/* pwm6_m0 */
+				<0 RK_PC1 2 &pcfg_pull_none>;
+		};
+
+		pwm6m1_pins: pwm6m1-pins {
+			rockchip,pins =
+				/* pwm6_m1 */
+				<1 RK_PD3 4 &pcfg_pull_none>;
+		};
+	};
+
+	pwm7 {
+		pwm7m0_pins: pwm7m0-pins {
+			rockchip,pins =
+				/* pwm7_m0 */
+				<0 RK_PC0 2 &pcfg_pull_none>;
+		};
+
+		pwm7m1_pins: pwm7m1-pins {
+			rockchip,pins =
+				/* pwm7_m1 */
+				<1 RK_PD4 4 &pcfg_pull_none>;
+		};
+	};
+
+	pwm8 {
+		pwm8m0_pins: pwm8m0-pins {
+			rockchip,pins =
+				/* pwm8_m0 */
+				<3 RK_PA4 2 &pcfg_pull_none>;
+		};
+
+		pwm8m1_pins: pwm8m1-pins {
+			rockchip,pins =
+				/* pwm8_m1 */
+				<1 RK_PC1 4 &pcfg_pull_none>;
+		};
+	};
+
+	pwm9 {
+		pwm9m0_pins: pwm9m0-pins {
+			rockchip,pins =
+				/* pwm9_m0 */
+				<3 RK_PA5 2 &pcfg_pull_none>;
+		};
+
+		pwm9m1_pins: pwm9m1-pins {
+			rockchip,pins =
+				/* pwm9_m1 */
+				<1 RK_PC2 4 &pcfg_pull_none>;
+		};
+	};
+
+	pwm10 {
+		pwm10m0_pins: pwm10m0-pins {
+			rockchip,pins =
+				/* pwm10_m0 */
+				<1 RK_PB5 5 &pcfg_pull_none>;
+		};
+
+		pwm10m1_pins: pwm10m1-pins {
+			rockchip,pins =
+				/* pwm10_m1 */
+				<1 RK_PC3 4 &pcfg_pull_none>;
+		};
+	};
+
+	pwm11 {
+		pwm11m0_pins: pwm11m0-pins {
+			rockchip,pins =
+				/* pwm11_m0 */
+				<1 RK_PB6 5 &pcfg_pull_none>;
+		};
+
+		pwm11m1_pins: pwm11m1-pins {
+			rockchip,pins =
+				/* pwm11_m1 */
+				<1 RK_PC4 4 &pcfg_pull_none>;
+		};
+	};
+
+	pwm12 {
+		pwm12m0_pins: pwm12m0-pins {
+			rockchip,pins =
+				/* pwm12_m0 */
+				<4 RK_PA1 4 &pcfg_pull_none>;
+		};
+
+		pwm12m1_pins: pwm12m1-pins {
+			rockchip,pins =
+				/* pwm12_m1 */
+				<3 RK_PB4 5 &pcfg_pull_none>;
+		};
+	};
+
+	pwm13 {
+		pwm13m0_pins: pwm13m0-pins {
+			rockchip,pins =
+				/* pwm13_m0 */
+				<4 RK_PA4 3 &pcfg_pull_none>;
+		};
+
+		pwm13m1_pins: pwm13m1-pins {
+			rockchip,pins =
+				/* pwm13_m1 */
+				<3 RK_PB5 5 &pcfg_pull_none>;
+		};
+	};
+
+	pwm14 {
+		pwm14m0_pins: pwm14m0-pins {
+			rockchip,pins =
+				/* pwm14_m0 */
+				<3 RK_PC5 4 &pcfg_pull_none>;
+		};
+
+		pwm14m1_pins: pwm14m1-pins {
+			rockchip,pins =
+				/* pwm14_m1 */
+				<1 RK_PD7 5 &pcfg_pull_none>;
+		};
+	};
+
+	pwm15 {
+		pwm15m0_pins: pwm15m0-pins {
+			rockchip,pins =
+				/* pwm15_m0 */
+				<3 RK_PC6 4 &pcfg_pull_none>;
+		};
+
+		pwm15m1_pins: pwm15m1-pins {
+			rockchip,pins =
+				/* pwm15_m1 */
+				<2 RK_PA0 5 &pcfg_pull_none>;
+		};
+	};
+
+	pwr {
+		pwr_pins: pwr-pins {
+			rockchip,pins =
+				/* pwr_ctrl0 */
+				<0 RK_PA2 1 &pcfg_pull_none>,
+				/* pwr_ctrl1 */
+				<0 RK_PA3 1 &pcfg_pull_none>;
+		};
+	};
+
+	ref {
+		ref_pins: ref-pins {
+			rockchip,pins =
+				/* ref_clk_out */
+				<0 RK_PA0 1 &pcfg_pull_none>;
+		};
+	};
+
+	rgmii {
+		rgmiim0_miim: rgmiim0-miim {
+			rockchip,pins =
+				/* rgmii_mdc_m0 */
+				<4 RK_PB2 2 &pcfg_pull_none>,
+				/* rgmii_mdio_m0 */
+				<4 RK_PB3 2 &pcfg_pull_none>;
+		};
+
+		rgmiim0_rx_er: rgmiim0-rx_er {
+			rockchip,pins =
+				/* rgmii_rxer_m0 */
+				<4 RK_PB0 2 &pcfg_pull_none>;
+		};
+
+		rgmiim0_rx_bus2: rgmiim0-rx_bus2 {
+			rockchip,pins =
+				/* rgmii_rxd0_m0 */
+				<4 RK_PA5 2 &pcfg_pull_none>,
+				/* rgmii_rxd1_m0 */
+				<4 RK_PA6 2 &pcfg_pull_none>,
+				/* rgmii_rxdv_m0 */
+				<4 RK_PA7 2 &pcfg_pull_none>;
+		};
+
+		rgmiim0_tx_bus2: rgmiim0-tx_bus2 {
+			rockchip,pins =
+				/* rgmii_txd0_m0 */
+				<4 RK_PA2 2 &pcfg_pull_none>,
+				/* rgmii_txd1_m0 */
+				<4 RK_PA3 2 &pcfg_pull_none>,
+				/* rgmii_txen_m0 */
+				<4 RK_PA4 2 &pcfg_pull_none>;
+		};
+
+		rgmiim0_rgmii_clk: rgmiim0-rgmii_clk {
+			rockchip,pins =
+				/* rgmii_rxclk_m0 */
+				<4 RK_PA1 2 &pcfg_pull_none>,
+				/* rgmii_txclk_m0 */
+				<3 RK_PD6 2 &pcfg_pull_none>;
+		};
+
+		rgmiim0_rgmii_bus: rgmiim0-rgmii_bus {
+			rockchip,pins =
+				/* rgmii_rxd2_m0 */
+				<3 RK_PD7 2 &pcfg_pull_none>,
+				/* rgmii_rxd3_m0 */
+				<4 RK_PA0 2 &pcfg_pull_none>,
+				/* rgmii_txd2_m0 */
+				<3 RK_PD4 2 &pcfg_pull_none>,
+				/* rgmii_txd3_m0 */
+				<3 RK_PD5 2 &pcfg_pull_none>;
+		};
+
+		rgmiim0_clk: rgmiim0-clk {
+			rockchip,pins =
+				/* rgmiim0_clk */
+				<4 RK_PB7 2 &pcfg_pull_none>;
+		};
+
+		rgmiim1_miim: rgmiim1-miim {
+			rockchip,pins =
+				/* rgmii_mdc_m1 */
+				<1 RK_PC7 2 &pcfg_pull_none>,
+				/* rgmii_mdio_m1 */
+				<1 RK_PD0 2 &pcfg_pull_none>;
+		};
+
+		rgmiim1_rx_er: rgmiim1-rx_er {
+			rockchip,pins =
+				/* rgmii_rxer_m1 */
+				<2 RK_PA0 2 &pcfg_pull_none>;
+		};
+
+		rgmiim1_rx_bus2: rgmiim1-rx_bus2 {
+			rockchip,pins =
+				/* rgmii_rxd0_m1 */
+				<1 RK_PD4 2 &pcfg_pull_none>,
+				/* rgmii_rxd1_m1 */
+				<1 RK_PD7 2 &pcfg_pull_none>,
+				/* rgmii_rxdv_m1 */
+				<1 RK_PD6 2 &pcfg_pull_none>;
+		};
+
+		rgmiim1_tx_bus2: rgmiim1-tx_bus2 {
+			rockchip,pins =
+				/* rgmii_txd0_m1 */
+				<1 RK_PD1 2 &pcfg_pull_none>,
+				/* rgmii_txd1_m1 */
+				<1 RK_PD2 2 &pcfg_pull_none>,
+				/* rgmii_txen_m1 */
+				<1 RK_PD3 2 &pcfg_pull_none>;
+		};
+
+		rgmiim1_rgmii_clk: rgmiim1-rgmii_clk {
+			rockchip,pins =
+				/* rgmii_rxclk_m1 */
+				<1 RK_PC6 2 &pcfg_pull_none>,
+				/* rgmii_txclk_m1 */
+				<1 RK_PC3 2 &pcfg_pull_none>;
+		};
+
+		rgmiim1_rgmii_bus: rgmiim1-rgmii_bus {
+			rockchip,pins =
+				/* rgmii_rxd2_m1 */
+				<1 RK_PC4 2 &pcfg_pull_none>,
+				/* rgmii_rxd3_m1 */
+				<1 RK_PC5 2 &pcfg_pull_none>,
+				/* rgmii_txd2_m1 */
+				<1 RK_PC1 2 &pcfg_pull_none>,
+				/* rgmii_txd3_m1 */
+				<1 RK_PC2 2 &pcfg_pull_none>;
+		};
+
+		rgmiim1_clk: rgmiim1-clk {
+			rockchip,pins =
+				/* rgmiim1_clk */
+				<1 RK_PD5 2 &pcfg_pull_none>;
+		};
+	};
+
+	rmii {
+		rmii_pins: rmii-pins {
+			rockchip,pins =
+				/* rmii_clk */
+				<1 RK_PD5 5 &pcfg_pull_none>,
+				/* rmii_mdc */
+				<1 RK_PC7 5 &pcfg_pull_none>,
+				/* rmii_mdio */
+				<1 RK_PD0 5 &pcfg_pull_none>,
+				/* rmii_rxd0 */
+				<1 RK_PD4 5 &pcfg_pull_none>,
+				/* rmii_rxd1 */
+				<1 RK_PD7 6 &pcfg_pull_none>,
+				/* rmii_rxdv_crs */
+				<1 RK_PD6 5 &pcfg_pull_none>,
+				/* rmii_rxer */
+				<2 RK_PA0 6 &pcfg_pull_none>,
+				/* rmii_txd0 */
+				<1 RK_PD1 5 &pcfg_pull_none>,
+				/* rmii_txd1 */
+				<1 RK_PD2 5 &pcfg_pull_none>,
+				/* rmii_txen */
+				<1 RK_PD3 5 &pcfg_pull_none>;
+		};
+	};
+
+	sdmmc0_pins: sdmmc0-pins {
+		sdmmc0_bus4: sdmmc0-bus4 {
+			rockchip,pins =
+				/* sdmmc0_d0 */
+				<1 RK_PB3 1 &pcfg_pull_up_drv_level_2>,
+				/* sdmmc0_d1 */
+				<1 RK_PB4 1 &pcfg_pull_up_drv_level_2>,
+				/* sdmmc0_d2 */
+				<1 RK_PB5 1 &pcfg_pull_up_drv_level_2>,
+				/* sdmmc0_d3 */
+				<1 RK_PB6 1 &pcfg_pull_up_drv_level_2>;
+		};
+
+		sdmmc0_clk: sdmmc0-clk {
+			rockchip,pins =
+				/* sdmmc0_clk */
+				<1 RK_PC0 1 &pcfg_pull_up_drv_level_2>;
+		};
+
+		sdmmc0_cmd: sdmmc0-cmd {
+			rockchip,pins =
+				/* sdmmc0_cmd */
+				<1 RK_PB7 1 &pcfg_pull_up_drv_level_2>;
+		};
+
+		sdmmc0_det: sdmmc0-det {
+			rockchip,pins =
+				/* sdmmc0_detn */
+				<0 RK_PA4 1 &pcfg_pull_up>;
+		};
+
+		sdmmc0_pwren: sdmmc0-pwren {
+			rockchip,pins =
+				/* sdmmc0_pwren */
+				<0 RK_PA5 1 &pcfg_pull_none>;
+		};
+	};
+
+	sdmmc1 {
+		sdmmc1_bus4: sdmmc1-bus4 {
+			rockchip,pins =
+				/* sdmmc1_d0 */
+				<1 RK_PC1 1 &pcfg_pull_up_drv_level_2>,
+				/* sdmmc1_d1 */
+				<1 RK_PC2 1 &pcfg_pull_up_drv_level_2>,
+				/* sdmmc1_d2 */
+				<1 RK_PC3 1 &pcfg_pull_up_drv_level_2>,
+				/* sdmmc1_d3 */
+				<1 RK_PC4 1 &pcfg_pull_up_drv_level_2>;
+		};
+
+		sdmmc1_clk: sdmmc1-clk {
+			rockchip,pins =
+				/* sdmmc1_clk */
+				<1 RK_PC6 1 &pcfg_pull_up_drv_level_2>;
+		};
+
+		sdmmc1_cmd: sdmmc1-cmd {
+			rockchip,pins =
+				/* sdmmc1_cmd */
+				<1 RK_PC5 1 &pcfg_pull_up_drv_level_2>;
+		};
+
+		sdmmc1_det: sdmmc1-det {
+			rockchip,pins =
+				/* sdmmc1_detn */
+				<1 RK_PD0 1 &pcfg_pull_up>;
+		};
+
+		sdmmc1_pwren: sdmmc1-pwren {
+			rockchip,pins =
+				/* sdmmc1_pwren */
+				<1 RK_PC7 1 &pcfg_pull_none>;
+		};
+	};
+
+	spdif {
+		spdifm0_pins: spdifm0-pins {
+			rockchip,pins =
+				/* spdif_tx_m0 */
+				<3 RK_PA1 3 &pcfg_pull_none>;
+		};
+
+		spdifm1_pins: spdifm1-pins {
+			rockchip,pins =
+				/* spdif_tx_m1 */
+				<0 RK_PB7 4 &pcfg_pull_none>;
+		};
+
+		spdifm2_pins: spdifm2-pins {
+			rockchip,pins =
+				/* spdif_tx_m2 */
+				<1 RK_PB7 2 &pcfg_pull_none>;
+		};
+	};
+
+	spi0 {
+		spi0m0_pins: spi0m0-pins {
+			rockchip,pins =
+				/* spi0_clk_m0 */
+				<0 RK_PC3 3 &pcfg_pull_none>,
+				/* spi0_miso_m0 */
+				<0 RK_PC5 3 &pcfg_pull_none>,
+				/* spi0_mosi_m0 */
+				<0 RK_PC4 3 &pcfg_pull_none>;
+		};
+
+		spi0m0_csn0: spi0m0-csn0 {
+			rockchip,pins =
+				/* spi0m0_csn0 */
+				<0 RK_PC2 3 &pcfg_pull_none>;
+		};
+		spi0m0_csn1: spi0m0-csn1 {
+			rockchip,pins =
+				/* spi0m0_csn1 */
+				<0 RK_PB7 1 &pcfg_pull_none>;
+		};
+
+		spi0m1_pins: spi0m1-pins {
+			rockchip,pins =
+				/* spi0_clk_m1 */
+				<3 RK_PB5 4 &pcfg_pull_none>,
+				/* spi0_miso_m1 */
+				<3 RK_PC0 4 &pcfg_pull_none>,
+				/* spi0_mosi_m1 */
+				<3 RK_PB4 4 &pcfg_pull_none>;
+		};
+
+		spi0m1_csn0: spi0m1-csn0 {
+			rockchip,pins =
+				/* spi0m1_csn0 */
+				<3 RK_PB7 4 &pcfg_pull_none>;
+		};
+		spi0m1_csn1: spi0m1-csn1 {
+			rockchip,pins =
+				/* spi0m1_csn1 */
+				<3 RK_PB6 4 &pcfg_pull_none>;
+		};
+	};
+
+	spi1 {
+		spi1m0_pins: spi1m0-pins {
+			rockchip,pins =
+				/* spi1_clk_m0 */
+				<3 RK_PD6 4 &pcfg_pull_none>,
+				/* spi1_miso_m0 */
+				<4 RK_PA3 4 &pcfg_pull_none>,
+				/* spi1_mosi_m0 */
+				<4 RK_PA2 4 &pcfg_pull_none>;
+		};
+
+		spi1m0_csn0: spi1m0-csn0 {
+			rockchip,pins =
+				/* spi1m0_csn0 */
+				<3 RK_PD7 4 &pcfg_pull_none>;
+		};
+		spi1m0_csn1: spi1m0-csn1 {
+			rockchip,pins =
+				/* spi1m0_csn1 */
+				<4 RK_PA0 4 &pcfg_pull_none>;
+		};
+
+		spi1m1_pins: spi1m1-pins {
+			rockchip,pins =
+				/* spi1_clk_m1 */
+				<1 RK_PC0 4 &pcfg_pull_none>,
+				/* spi1_miso_m1 */
+				<1 RK_PB4 4 &pcfg_pull_none>,
+				/* spi1_mosi_m1 */
+				<1 RK_PB3 4 &pcfg_pull_none>;
+		};
+
+		spi1m1_csn0: spi1m1-csn0 {
+			rockchip,pins =
+				/* spi1m1_csn0 */
+				<1 RK_PB6 4 &pcfg_pull_none>;
+		};
+		spi1m1_csn1: spi1m1-csn1 {
+			rockchip,pins =
+				/* spi1m1_csn1 */
+				<1 RK_PB5 4 &pcfg_pull_none>;
+		};
+	};
+
+	spi2 {
+		spi2m0_pins: spi2m0-pins {
+			rockchip,pins =
+				/* spi2_clk_m0 */
+				<4 RK_PB6 4 &pcfg_pull_none>,
+				/* spi2_miso_m0 */
+				<3 RK_PD2 4 &pcfg_pull_none>,
+				/* spi2_mosi_m0 */
+				<3 RK_PD3 4 &pcfg_pull_none>;
+		};
+
+		spi2m0_csn0: spi2m0-csn0 {
+			rockchip,pins =
+				/* spi2m0_csn0 */
+				<4 RK_PB5 4 &pcfg_pull_none>;
+		};
+		spi2m0_csn1: spi2m0-csn1 {
+			rockchip,pins =
+				/* spi2m0_csn1 */
+				<4 RK_PB4 4 &pcfg_pull_none>;
+		};
+
+		spi2m1_pins: spi2m1-pins {
+			rockchip,pins =
+				/* spi2_clk_m1 */
+				<2 RK_PA1 4 &pcfg_pull_none>,
+				/* spi2_miso_m1 */
+				<2 RK_PA0 4 &pcfg_pull_none>,
+				/* spi2_mosi_m1 */
+				<1 RK_PD7 4 &pcfg_pull_none>;
+		};
+
+		spi2m1_csn0: spi2m1-csn0 {
+			rockchip,pins =
+				/* spi2m1_csn0 */
+				<1 RK_PD6 4 &pcfg_pull_none>;
+		};
+		spi2m1_csn1: spi2m1-csn1 {
+			rockchip,pins =
+				/* spi2m1_csn1 */
+				<1 RK_PD5 4 &pcfg_pull_none>;
+		};
+	};
+
+	tsadc {
+		tsadcm0_pins: tsadcm0-pins {
+			rockchip,pins =
+				/* tsadc_shut_m0 */
+				<0 RK_PA1 1 &pcfg_pull_none>;
+		};
+
+		tsadcm1_pins: tsadcm1-pins {
+			rockchip,pins =
+				/* tsadc_shut_m1 */
+				<0 RK_PA2 2 &pcfg_pull_none>;
+		};
+
+		tsadc_shut_org: tsadc-shut-org {
+			rockchip,pins =
+				/* tsadc_shut_org */
+				<0 RK_PA1 2 &pcfg_pull_none>;
+		};
+	};
+
+	uart0 {
+		uart0m0_xfer: uart0m0-xfer {
+			rockchip,pins =
+				/* uart0_rx_m0 */
+				<0 RK_PD0 1 &pcfg_pull_up>,
+				/* uart0_tx_m0 */
+				<0 RK_PD1 1 &pcfg_pull_up>;
+		};
+
+		uart0m1_xfer: uart0m1-xfer {
+			rockchip,pins =
+				/* uart0_rx_m1 */
+				<1 RK_PB3 2 &pcfg_pull_up>,
+				/* uart0_tx_m1 */
+				<1 RK_PB4 2 &pcfg_pull_up>;
+		};
+	};
+
+	uart1 {
+		uart1m0_xfer: uart1m0-xfer {
+			rockchip,pins =
+				/* uart1_rx_m0 */
+				<1 RK_PD1 1 &pcfg_pull_up>,
+				/* uart1_tx_m0 */
+				<1 RK_PD2 1 &pcfg_pull_up>;
+		};
+
+		uart1m0_ctsn: uart1m0-ctsn {
+			rockchip,pins =
+				/* uart1m0_ctsn */
+				<1 RK_PD4 1 &pcfg_pull_none>;
+		};
+		uart1m0_rtsn: uart1m0-rtsn {
+			rockchip,pins =
+				/* uart1m0_rtsn */
+				<1 RK_PD3 1 &pcfg_pull_none>;
+		};
+
+		uart1m1_xfer: uart1m1-xfer {
+			rockchip,pins =
+				/* uart1_rx_m1 */
+				<4 RK_PA6 3 &pcfg_pull_up>,
+				/* uart1_tx_m1 */
+				<4 RK_PA5 3 &pcfg_pull_up>;
+		};
+
+		uart1m1_ctsn: uart1m1-ctsn {
+			rockchip,pins =
+				/* uart1m1_ctsn */
+				<4 RK_PB0 3 &pcfg_pull_none>;
+		};
+		uart1m1_rtsn: uart1m1-rtsn {
+			rockchip,pins =
+				/* uart1m1_rtsn */
+				<4 RK_PA7 3 &pcfg_pull_none>;
+		};
+	};
+
+	uart2 {
+		uart2m0_xfer: uart2m0-xfer {
+			rockchip,pins =
+				/* uart2_rx_m0 */
+				<0 RK_PC1 1 &pcfg_pull_up>,
+				/* uart2_tx_m0 */
+				<0 RK_PC0 1 &pcfg_pull_up>;
+		};
+
+		uart2m0_ctsn: uart2m0-ctsn {
+			rockchip,pins =
+				/* uart2m0_ctsn */
+				<0 RK_PC2 1 &pcfg_pull_none>;
+		};
+		uart2m0_rtsn: uart2m0-rtsn {
+			rockchip,pins =
+				/* uart2m0_rtsn */
+				<0 RK_PC3 1 &pcfg_pull_none>;
+		};
+
+		uart2m1_xfer: uart2m1-xfer {
+			rockchip,pins =
+				/* uart2_rx_m1 */
+				<3 RK_PA1 2 &pcfg_pull_up>,
+				/* uart2_tx_m1 */
+				<3 RK_PA0 2 &pcfg_pull_up>;
+		};
+
+		uart2m1_ctsn: uart2m1-ctsn {
+			rockchip,pins =
+				/* uart2m1_ctsn */
+				<3 RK_PA2 2 &pcfg_pull_none>;
+		};
+		uart2m1_rtsn: uart2m1-rtsn {
+			rockchip,pins =
+				/* uart2m1_rtsn */
+				<3 RK_PA3 2 &pcfg_pull_none>;
+		};
+	};
+
+	uart3 {
+		uart3m0_xfer: uart3m0-xfer {
+			rockchip,pins =
+				/* uart3_rx_m0 */
+				<4 RK_PB5 6 &pcfg_pull_up>,
+				/* uart3_tx_m0 */
+				<4 RK_PB4 6 &pcfg_pull_up>;
+		};
+
+		uart3m0_ctsn: uart3m0-ctsn {
+			rockchip,pins =
+				/* uart3m0_ctsn */
+				<4 RK_PB6 3 &pcfg_pull_none>;
+		};
+		uart3m0_rtsn: uart3m0-rtsn {
+			rockchip,pins =
+				/* uart3m0_rtsn */
+				<3 RK_PD1 4 &pcfg_pull_none>;
+		};
+
+		uart3m1_xfer: uart3m1-xfer {
+			rockchip,pins =
+				/* uart3_rx_m1 */
+				<3 RK_PC0 3 &pcfg_pull_up>,
+				/* uart3_tx_m1 */
+				<3 RK_PB7 3 &pcfg_pull_up>;
+		};
+
+		uart3m1_ctsn: uart3m1-ctsn {
+			rockchip,pins =
+				/* uart3m1_ctsn */
+				<3 RK_PB6 3 &pcfg_pull_none>;
+		};
+		uart3m1_rtsn: uart3m1-rtsn {
+			rockchip,pins =
+				/* uart3m1_rtsn */
+				<3 RK_PC1 3 &pcfg_pull_none>;
+		};
+	};
+
+	uart4 {
+		uart4m0_xfer: uart4m0-xfer {
+			rockchip,pins =
+				/* uart4_rx_m0 */
+				<3 RK_PD1 3 &pcfg_pull_up>,
+				/* uart4_tx_m0 */
+				<3 RK_PD0 3 &pcfg_pull_up>;
+		};
+
+		uart4m0_ctsn: uart4m0-ctsn {
+			rockchip,pins =
+				/* uart4m0_ctsn */
+				<3 RK_PC5 3 &pcfg_pull_none>;
+		};
+		uart4m0_rtsn: uart4m0-rtsn {
+			rockchip,pins =
+				/* uart4m0_rtsn */
+				<3 RK_PC6 3 &pcfg_pull_none>;
+		};
+
+		uart4m1_xfer: uart4m1-xfer {
+			rockchip,pins =
+				/* uart4_rx_m1 */
+				<1 RK_PD5 3 &pcfg_pull_up>,
+				/* uart4_tx_m1 */
+				<1 RK_PD6 3 &pcfg_pull_up>;
+		};
+
+		uart4m1_ctsn: uart4m1-ctsn {
+			rockchip,pins =
+				/* uart4m1_ctsn */
+				<2 RK_PA0 3 &pcfg_pull_none>;
+		};
+		uart4m1_rtsn: uart4m1-rtsn {
+			rockchip,pins =
+				/* uart4m1_rtsn */
+				<1 RK_PD7 3 &pcfg_pull_none>;
+		};
+	};
+
+	uart5 {
+		uart5m0_xfer: uart5m0-xfer {
+			rockchip,pins =
+				/* uart5_rx_m0 */
+				<1 RK_PB7 3 &pcfg_pull_up>,
+				/* uart5_tx_m0 */
+				<1 RK_PC0 3 &pcfg_pull_up>;
+		};
+
+		uart5m0_ctsn: uart5m0-ctsn {
+			rockchip,pins =
+				/* uart5m0_ctsn */
+				<1 RK_PB5 3 &pcfg_pull_none>;
+		};
+		uart5m0_rtsn: uart5m0-rtsn {
+			rockchip,pins =
+				/* uart5m0_rtsn */
+				<1 RK_PB6 3 &pcfg_pull_none>;
+		};
+
+		uart5m1_xfer: uart5m1-xfer {
+			rockchip,pins =
+				/* uart5_rx_m1 */
+				<3 RK_PA7 5 &pcfg_pull_up>,
+				/* uart5_tx_m1 */
+				<3 RK_PA6 5 &pcfg_pull_up>;
+		};
+
+		uart5m1_ctsn: uart5m1-ctsn {
+			rockchip,pins =
+				/* uart5m1_ctsn */
+				<3 RK_PA0 5 &pcfg_pull_none>;
+		};
+		uart5m1_rtsn: uart5m1-rtsn {
+			rockchip,pins =
+				/* uart5m1_rtsn */
+				<3 RK_PA1 5 &pcfg_pull_none>;
+		};
+	};
+
+	uart6 {
+		uart6m0_xfer: uart6m0-xfer {
+			rockchip,pins =
+				/* uart6_rx_m0 */
+				<0 RK_PC7 1 &pcfg_pull_up>,
+				/* uart6_tx_m0 */
+				<0 RK_PC6 1 &pcfg_pull_up>;
+		};
+
+		uart6m0_ctsn: uart6m0-ctsn {
+			rockchip,pins =
+				/* uart6m0_ctsn */
+				<0 RK_PC4 1 &pcfg_pull_none>;
+		};
+		uart6m0_rtsn: uart6m0-rtsn {
+			rockchip,pins =
+				/* uart6m0_rtsn */
+				<0 RK_PC5 1 &pcfg_pull_none>;
+		};
+
+		uart6m1_xfer: uart6m1-xfer {
+			rockchip,pins =
+				/* uart6_rx_m1 */
+				<4 RK_PB0 5 &pcfg_pull_up>,
+				/* uart6_tx_m1 */
+				<4 RK_PA7 5 &pcfg_pull_up>;
+		};
+
+		uart6m1_ctsn: uart6m1-ctsn {
+			rockchip,pins =
+				/* uart6m1_ctsn */
+				<4 RK_PA2 3 &pcfg_pull_none>;
+		};
+		uart6m1_rtsn: uart6m1-rtsn {
+			rockchip,pins =
+				/* uart6m1_rtsn */
+				<4 RK_PA3 3 &pcfg_pull_none>;
+		};
+	};
+
+	uart7 {
+		uart7m0_xfer: uart7m0-xfer {
+			rockchip,pins =
+				/* uart7_rx_m0 */
+				<3 RK_PC7 3 &pcfg_pull_up>,
+				/* uart7_tx_m0 */
+				<3 RK_PC4 3 &pcfg_pull_up>;
+		};
+
+		uart7m0_ctsn: uart7m0-ctsn {
+			rockchip,pins =
+				/* uart7m0_ctsn */
+				<3 RK_PD2 3 &pcfg_pull_none>;
+		};
+		uart7m0_rtsn: uart7m0-rtsn {
+			rockchip,pins =
+				/* uart7m0_rtsn */
+				<3 RK_PD3 3 &pcfg_pull_none>;
+		};
+
+		uart7m1_xfer: uart7m1-xfer {
+			rockchip,pins =
+				/* uart7_rx_m1 */
+				<1 RK_PB3 3 &pcfg_pull_up>,
+				/* uart7_tx_m1 */
+				<1 RK_PB4 3 &pcfg_pull_up>;
+		};
+	};
+
+	uart8 {
+		uart8m0_xfer: uart8m0-xfer {
+			rockchip,pins =
+				/* uart8_rx_m0 */
+				<3 RK_PB3 3 &pcfg_pull_up>,
+				/* uart8_tx_m0 */
+				<3 RK_PB2 3 &pcfg_pull_up>;
+		};
+
+		uart8m0_ctsn: uart8m0-ctsn {
+			rockchip,pins =
+				/* uart8m0_ctsn */
+				<3 RK_PB4 3 &pcfg_pull_none>;
+		};
+		uart8m0_rtsn: uart8m0-rtsn {
+			rockchip,pins =
+				/* uart8m0_rtsn */
+				<3 RK_PB5 3 &pcfg_pull_none>;
+		};
+
+		uart8m1_xfer: uart8m1-xfer {
+			rockchip,pins =
+				/* uart8_rx_m1 */
+				<3 RK_PD5 3 &pcfg_pull_up>,
+				/* uart8_tx_m1 */
+				<3 RK_PD4 3 &pcfg_pull_up>;
+		};
+
+		uart8m1_ctsn: uart8m1-ctsn {
+			rockchip,pins =
+				/* uart8m1_ctsn */
+				<3 RK_PD7 3 &pcfg_pull_none>;
+		};
+		uart8m1_rtsn: uart8m1-rtsn {
+			rockchip,pins =
+				/* uart8m1_rtsn */
+				<4 RK_PA0 3 &pcfg_pull_none>;
+		};
+	};
+
+	uart9 {
+		uart9m0_xfer: uart9m0-xfer {
+			rockchip,pins =
+				/* uart9_rx_m0 */
+				<4 RK_PB3 3 &pcfg_pull_up>,
+				/* uart9_tx_m0 */
+				<4 RK_PB2 3 &pcfg_pull_up>;
+		};
+
+		uart9m0_ctsn: uart9m0-ctsn {
+			rockchip,pins =
+				/* uart9m0_ctsn */
+				<4 RK_PB4 3 &pcfg_pull_none>;
+		};
+		uart9m0_rtsn: uart9m0-rtsn {
+			rockchip,pins =
+				/* uart9m0_rtsn */
+				<4 RK_PB5 3 &pcfg_pull_none>;
+		};
+
+		uart9m1_xfer: uart9m1-xfer {
+			rockchip,pins =
+				/* uart9_rx_m1 */
+				<3 RK_PC3 3 &pcfg_pull_up>,
+				/* uart9_tx_m1 */
+				<3 RK_PC2 3 &pcfg_pull_up>;
+		};
+	};
+
+	vo {
+		vo_pins: vo-pins {
+			rockchip,pins =
+				/* vo_lcdc_clk */
+				<4 RK_PB7 1 &pcfg_pull_none>,
+				/* vo_lcdc_d0 */
+				<4 RK_PA4 1 &pcfg_pull_none>,
+				/* vo_lcdc_d1 */
+				<4 RK_PA5 1 &pcfg_pull_none>,
+				/* vo_lcdc_d2 */
+				<4 RK_PB2 1 &pcfg_pull_none>,
+				/* vo_lcdc_d3 */
+				<3 RK_PC4 1 &pcfg_pull_none>,
+				/* vo_lcdc_d4 */
+				<3 RK_PC5 1 &pcfg_pull_none>,
+				/* vo_lcdc_d5 */
+				<3 RK_PC6 1 &pcfg_pull_none>,
+				/* vo_lcdc_d6 */
+				<3 RK_PC7 1 &pcfg_pull_none>,
+				/* vo_lcdc_d7 */
+				<3 RK_PD0 1 &pcfg_pull_none>,
+				/* vo_lcdc_d8 */
+				<4 RK_PA6 1 &pcfg_pull_none>,
+				/* vo_lcdc_d9 */
+				<4 RK_PA7 1 &pcfg_pull_none>,
+				/* vo_lcdc_d10 */
+				<3 RK_PD1 1 &pcfg_pull_none>,
+				/* vo_lcdc_d11 */
+				<3 RK_PD2 1 &pcfg_pull_none>,
+				/* vo_lcdc_d12 */
+				<3 RK_PD3 1 &pcfg_pull_none>,
+				/* vo_lcdc_d13 */
+				<3 RK_PD4 1 &pcfg_pull_none>,
+				/* vo_lcdc_d14 */
+				<3 RK_PD5 1 &pcfg_pull_none>,
+				/* vo_lcdc_d15 */
+				<3 RK_PD6 1 &pcfg_pull_none>,
+				/* vo_lcdc_d16 */
+				<4 RK_PB0 1 &pcfg_pull_none>,
+				/* vo_lcdc_d17 */
+				<4 RK_PB1 1 &pcfg_pull_none>,
+				/* vo_lcdc_d18 */
+				<4 RK_PB3 1 &pcfg_pull_none>,
+				/* vo_lcdc_d19 */
+				<3 RK_PD7 1 &pcfg_pull_none>,
+				/* vo_lcdc_d20 */
+				<4 RK_PA0 1 &pcfg_pull_none>,
+				/* vo_lcdc_d21 */
+				<4 RK_PA1 1 &pcfg_pull_none>,
+				/* vo_lcdc_d22 */
+				<4 RK_PA2 1 &pcfg_pull_none>,
+				/* vo_lcdc_d23 */
+				<4 RK_PA3 1 &pcfg_pull_none>,
+				/* vo_lcdc_den */
+				<4 RK_PB6 1 &pcfg_pull_none>,
+				/* vo_lcdc_hsync */
+				<4 RK_PB4 1 &pcfg_pull_none>,
+				/* vo_lcdc_vsync */
+				<4 RK_PB5 1 &pcfg_pull_none>;
+		};
+	};
+};
+
diff --git a/dts/upstream/src/arm64/rockchip/rk3562-rk809.dtsi b/dts/upstream/src/arm64/rockchip/rk3562-rk809.dtsi
new file mode 100644
index 00000000000..d2de03581d7
--- /dev/null
+++ b/dts/upstream/src/arm64/rockchip/rk3562-rk809.dtsi
@@ -0,0 +1,268 @@
+// SPDX-License-Identifier: (GPL-2.0+ OR MIT)
+/*
+ * Copyright (c) 2022 Rockchip Electronics Co., Ltd.
+ *
+ */
+
+#include <dt-bindings/gpio/gpio.h>
+#include <dt-bindings/pinctrl/rockchip.h>
+
+&i2c0 {
+
+	rk809: pmic@20 {
+		compatible = "rockchip,rk809";
+		reg = <0x20>;
+		interrupt-parent = <&gpio0>;
+		interrupts = <3 IRQ_TYPE_LEVEL_LOW>;
+
+		pinctrl-names = "default", "pmic-sleep",
+			"pmic-power-off", "pmic-reset";
+		pinctrl-0 = <&pmic_int>;
+		pinctrl-1 = <&soc_slppin_slp>, <&rk817_slppin_slp>;
+		pinctrl-2 = <&soc_slppin_gpio>, <&rk817_slppin_pwrdn>;
+		pinctrl-3 = <&soc_slppin_gpio>, <&rk817_slppin_rst>;
+		rockchip,system-power-controller;
+		wakeup-source;
+		#clock-cells = <1>;
+		clock-output-names = "rk808-clkout1", "rk808-clkout2";
+		/* 1: rst regs (default in codes), 0: rst the pmic */
+		pmic-reset-func = <0>;
+		/* not save the PMIC_POWER_EN register in uboot */
+		not-save-power-en = <1>;
+
+		vcc1-supply = <&vcc3v3_sys>;
+		vcc2-supply = <&vcc3v3_sys>;
+		vcc3-supply = <&vcc3v3_sys>;
+		vcc4-supply = <&vcc3v3_sys>;
+		vcc5-supply = <&vcc3v3_sys>;
+		vcc6-supply = <&vcc3v3_sys>;
+		vcc7-supply = <&vcc3v3_sys>;
+		vcc8-supply = <&vcc3v3_sys>;
+		vcc9-supply = <&vcc3v3_sys>;
+
+		pwrkey {
+			status = "okay";
+		};
+
+		pinctrl_rk8xx: pinctrl_rk8xx {
+			gpio-controller;
+			#gpio-cells = <2>;
+
+			rk817_slppin_null: rk817_slppin_null {
+				pins = "gpio_slp";
+				function = "pin_fun0";
+			};
+
+			rk817_slppin_slp: rk817_slppin_slp {
+				pins = "gpio_slp";
+				function = "pin_fun1";
+			};
+
+			rk817_slppin_pwrdn: rk817_slppin_pwrdn {
+				pins = "gpio_slp";
+				function = "pin_fun2";
+			};
+
+			rk817_slppin_rst: rk817_slppin_rst {
+				pins = "gpio_slp";
+				function = "pin_fun3";
+			};
+		};
+
+		regulators {
+			vdd_logic: DCDC_REG1 {
+				regulator-always-on;
+				regulator-boot-on;
+				regulator-min-microvolt = <500000>;
+				regulator-max-microvolt = <1350000>;
+				regulator-init-microvolt = <900000>;
+				regulator-ramp-delay = <6001>;
+				regulator-initial-mode = <0x2>;
+				regulator-name = "vdd_logic";
+				regulator-state-mem {
+					regulator-off-in-suspend;
+				};
+			};
+
+			vdd_cpu: DCDC_REG2 {
+				regulator-always-on;
+				regulator-boot-on;
+				regulator-min-microvolt = <500000>;
+				regulator-max-microvolt = <1350000>;
+				regulator-init-microvolt = <900000>;
+				regulator-ramp-delay = <6001>;
+				regulator-initial-mode = <0x2>;
+				regulator-name = "vdd_cpu";
+				regulator-state-mem {
+					regulator-off-in-suspend;
+				};
+			};
+
+			vcc_ddr: DCDC_REG3 {
+				regulator-always-on;
+				regulator-boot-on;
+				regulator-initial-mode = <0x2>;
+				regulator-name = "vcc_ddr";
+				regulator-state-mem {
+					regulator-on-in-suspend;
+				};
+			};
+
+			vdd_gpu: DCDC_REG4 {
+				regulator-always-on;
+				regulator-boot-on;
+				regulator-min-microvolt = <500000>;
+				regulator-max-microvolt = <1350000>;
+				regulator-init-microvolt = <900000>;
+				regulator-ramp-delay = <6001>;
+				regulator-initial-mode = <0x2>;
+				regulator-name = "vdd_gpu";
+				regulator-state-mem {
+					regulator-off-in-suspend;
+				};
+			};
+
+			vcc2v8_dvp: LDO_REG1 {
+				regulator-min-microvolt = <2800000>;
+				regulator-max-microvolt = <2800000>;
+				regulator-name = "vcc2v8_dvp";
+				regulator-state-mem {
+					regulator-off-in-suspend;
+				};
+			};
+
+			vdda_0v9: LDO_REG2 {
+				regulator-always-on;
+				regulator-boot-on;
+				regulator-min-microvolt = <900000>;
+				regulator-max-microvolt = <900000>;
+				regulator-name = "vdda_0v9";
+				regulator-state-mem {
+					regulator-off-in-suspend;
+				};
+			};
+
+			vdda0v9_pmu: LDO_REG3 {
+				regulator-always-on;
+				regulator-boot-on;
+				regulator-min-microvolt = <900000>;
+				regulator-max-microvolt = <900000>;
+				regulator-name = "vdda0v9_pmu";
+				regulator-state-mem {
+				regulator-on-in-suspend;
+					regulator-suspend-microvolt = <900000>;
+				};
+			};
+
+			vccio_acodec: LDO_REG4 {
+				regulator-always-on;
+				regulator-boot-on;
+				regulator-min-microvolt = <3000000>;
+				regulator-max-microvolt = <3000000>;
+				regulator-name = "vccio_acodec";
+				regulator-state-mem {
+					regulator-off-in-suspend;
+				};
+			};
+
+			vccio_sd: LDO_REG5 {
+				regulator-always-on;
+				regulator-boot-on;
+				regulator-min-microvolt = <1800000>;
+				regulator-max-microvolt = <3300000>;
+				regulator-name = "vccio_sd";
+				regulator-state-mem {
+					regulator-off-in-suspend;
+				};
+			};
+
+			vcc3v3_pmu: LDO_REG6 {
+				regulator-always-on;
+				regulator-boot-on;
+				regulator-min-microvolt = <3300000>;
+				regulator-max-microvolt = <3300000>;
+				regulator-name = "vcc3v3_pmu";
+				regulator-state-mem {
+					regulator-on-in-suspend;
+					regulator-suspend-microvolt = <3300000>;
+				};
+			};
+
+			vcca_1v8: LDO_REG7 {
+				regulator-always-on;
+				regulator-boot-on;
+				regulator-min-microvolt = <1800000>;
+				regulator-max-microvolt = <1800000>;
+				regulator-name = "vcca_1v8";
+				regulator-state-mem {
+					regulator-off-in-suspend;
+				};
+			};
+
+			vcca1v8_pmu: LDO_REG8 {
+				regulator-always-on;
+				regulator-boot-on;
+				regulator-min-microvolt = <1800000>;
+				regulator-max-microvolt = <1800000>;
+				regulator-name = "vcca1v8_pmu";
+				regulator-state-mem {
+				regulator-on-in-suspend;
+					regulator-suspend-microvolt = <1800000>;
+				};
+			};
+
+			vcc1v8_dvp: LDO_REG9 {
+				regulator-min-microvolt = <1800000>;
+				regulator-max-microvolt = <1800000>;
+				regulator-name = "vcc1v8_dvp";
+				regulator-state-mem {
+					regulator-off-in-suspend;
+				};
+			};
+
+			vcc_1v8: DCDC_REG5 {
+				regulator-always-on;
+				regulator-boot-on;
+				regulator-min-microvolt = <1800000>;
+				regulator-max-microvolt = <1800000>;
+				regulator-name = "vcc_1v8";
+				regulator-state-mem {
+					regulator-off-in-suspend;
+				};
+			};
+
+			vcc_3v3: SWITCH_REG1 {
+				regulator-always-on;
+				regulator-boot-on;
+				regulator-name = "vcc_3v3";
+				regulator-state-mem {
+					regulator-off-in-suspend;
+				};
+			};
+
+			vcc3v3_sd: SWITCH_REG2 {
+				regulator-always-on;
+				regulator-boot-on;
+				regulator-name = "vcc3v3_sd";
+				regulator-state-mem {
+					regulator-off-in-suspend;
+				};
+			};
+		};
+
+		rk809_codec: codec {
+			#sound-dai-cells = <1>;
+			compatible = "rockchip,rk809-codec", "rockchip,rk817-codec";
+			clocks = <&mclkout_sai0>;
+			clock-names = "mclk";
+			assigned-clocks = <&mclkout_sai0>;
+			assigned-clock-rates = <12288000>;
+			pinctrl-names = "default";
+			pinctrl-0 = <&i2s0m0_mclk>;
+			hp-volume = <20>;
+			spk-volume = <3>;
+			mic-in-differential;
+			status = "disabled";
+		};
+	};
+};
diff --git a/dts/upstream/src/arm64/rockchip/rk3562.dtsi b/dts/upstream/src/arm64/rockchip/rk3562.dtsi
new file mode 100644
index 00000000000..555c6fb3308
--- /dev/null
+++ b/dts/upstream/src/arm64/rockchip/rk3562.dtsi
@@ -0,0 +1,2370 @@
+// SPDX-License-Identifier: (GPL-2.0+ OR MIT)
+/*
+ * Copyright (c) 2022 Rockchip Electronics Co., Ltd.
+ */
+
+#include <dt-bindings/clock/rk3562-cru.h>
+#include <dt-bindings/interrupt-controller/arm-gic.h>
+#include <dt-bindings/interrupt-controller/irq.h>
+#include <dt-bindings/phy/phy.h>
+#include <dt-bindings/power/rk3562-power.h>
+#include <dt-bindings/pinctrl/rockchip.h>
+#include <dt-bindings/soc/rockchip,boot-mode.h>
+#include <dt-bindings/soc/rockchip-system-status.h>
+#include <dt-bindings/thermal/thermal.h>
+
+/ {
+	compatible = "rockchip,rk3562";
+
+	interrupt-parent = <&gic>;
+	#address-cells = <2>;
+	#size-cells = <2>;
+
+	aliases {
+		csi2dphy0 = &csi2_dphy0;
+		csi2dphy1 = &csi2_dphy1;
+		csi2dphy2 = &csi2_dphy2;
+		csi2dphy3 = &csi2_dphy3;
+		csi2dphy4 = &csi2_dphy4;
+		csi2dphy5 = &csi2_dphy5;
+		ethernet0 = &gmac0;
+		ethernet1 = &gmac1;
+		gpio0 = &gpio0;
+		gpio1 = &gpio1;
+		gpio2 = &gpio2;
+		gpio3 = &gpio3;
+		gpio4 = &gpio4;
+		i2c0 = &i2c0;
+		i2c1 = &i2c1;
+		i2c2 = &i2c2;
+		i2c3 = &i2c3;
+		i2c4 = &i2c4;
+		i2c5 = &i2c5;
+		rkcif_mipi_lvds0= &rkcif_mipi_lvds;
+		rkcif_mipi_lvds1= &rkcif_mipi_lvds1;
+		rkcif_mipi_lvds2= &rkcif_mipi_lvds2;
+		rkcif_mipi_lvds3= &rkcif_mipi_lvds3;
+		serial0 = &uart0;
+		serial1 = &uart1;
+		serial2 = &uart2;
+		serial3 = &uart3;
+		serial4 = &uart4;
+		serial5 = &uart5;
+		serial6 = &uart6;
+		serial7 = &uart7;
+		serial8 = &uart8;
+		serial9 = &uart9;
+		spi0 = &spi0;
+		spi1 = &spi1;
+		spi2 = &spi2;
+		spi3 = &sfc;
+	};
+
+	clocks {
+		compatible = "simple-bus";
+		#address-cells = <2>;
+		#size-cells = <2>;
+		ranges;
+
+		xin32k: xin32k {
+			compatible = "fixed-clock";
+			#clock-cells = <0>;
+			clock-frequency = <32768>;
+			clock-output-names = "xin32k";
+		};
+
+		xin24m: xin24m {
+			compatible = "fixed-clock";
+			#clock-cells = <0>;
+			clock-frequency = <24000000>;
+			clock-output-names = "xin24m";
+		};
+
+		aclk_vepu: aclk_vepu@ff100324 {
+			compatible = "rockchip,rk3562-clock-gate-link";
+			reg = <0 0xff100324 0 0x10>;
+			clock-names = "link";
+			clocks = <&cru ACLK_ISP>;
+			#power-domain-cells = <1>;
+			#clock-cells = <0>;
+		};
+
+		aclk_vdpu: aclk_vdpu@ff100328 {
+			compatible = "rockchip,rk3562-clock-gate-link";
+			reg = <0 0xff100328 0 0x10>;
+			clock-names = "link";
+			clocks = <&cru ACLK_TOP_VIO>;
+			#power-domain-cells = <1>;
+			#clock-cells = <0>;
+		};
+
+		aclk_vi_isp: aclk_vi_isp@ff10032c {
+			compatible = "rockchip,rk3562-clock-gate-link";
+			reg = <0 0xff10032c 0 0x10>;
+			clock-names = "link";
+			clocks = <&cru ACLK_TOP_VIO>;
+			#power-domain-cells = <1>;
+			#clock-cells = <0>;
+		};
+
+		aclk_vo: aclk_vo@ff100334 {
+			compatible = "rockchip,rk3562-clock-gate-link";
+			reg = <0 0xff100334 0 0x10>;
+			clock-names = "link";
+			clocks = <&cru ACLK_TOP_VIO>;
+			#power-domain-cells = <1>;
+			#clock-cells = <0>;
+		};
+
+		aclk_rga_jdec: aclk_rga_jdec@ff100338 {
+			compatible = "rockchip,rk3562-clock-gate-link";
+			reg = <0 0xff100338 0 0x10>;
+			clock-names = "link";
+			clocks = <&cru ACLK_VOP>;
+			#power-domain-cells = <1>;
+			#clock-cells = <0>;
+		};
+
+		mclkin_sai0: mclkin-sai0 {
+			compatible = "fixed-clock";
+			#clock-cells = <0>;
+			clock-frequency = <0>;
+			clock-output-names = "mclk_sai0_from_io";
+		};
+
+		mclkin_sai1: mclkin-sai1 {
+			compatible = "fixed-clock";
+			#clock-cells = <0>;
+			clock-frequency = <0>;
+			clock-output-names = "mclk_sai1_from_io";
+		};
+
+		mclkin_sai2: mclkin-sai2 {
+			compatible = "fixed-clock";
+			#clock-cells = <0>;
+			clock-frequency = <0>;
+			clock-output-names = "mclk_sai2_from_io";
+		};
+
+		mclkout_sai0: mclkout-sai0@ff040070 {
+			compatible = "rockchip,clk-out";
+			reg = <0 0xff040070 0 0x4>;
+			clocks = <&cru MCLK_SAI0_OUT2IO>;
+			#clock-cells = <0>;
+			clock-output-names = "mclk_sai0_to_io";
+			rockchip,bit-shift = <4>;
+		};
+
+		mclkout_sai1: mclkout-sai1@ff040070 {
+			compatible = "rockchip,clk-out";
+			reg = <0 0xff040070 0 0x4>;
+			clocks = <&cru MCLK_SAI1_OUT2IO>;
+			#clock-cells = <0>;
+			clock-output-names = "mclk_sai1_to_io";
+			rockchip,bit-shift = <9>;
+		};
+
+		mclkout_sai2: mclkout-sai2@ff040070 {
+			compatible = "rockchip,clk-out";
+			reg = <0 0xff040070 0 0x4>;
+			clocks = <&cru MCLK_SAI2_OUT2IO>;
+			#clock-cells = <0>;
+			clock-output-names = "mclk_sai2_to_io";
+			rockchip,bit-shift = <11>;
+		};
+	};
+
+	cpus {
+		#address-cells = <2>;
+		#size-cells = <0>;
+
+		cpu0: cpu@0 {
+			device_type = "cpu";
+			compatible = "arm,cortex-a53";
+			reg = <0x0 0x0>;
+			enable-method = "psci";
+			clocks = <&cru ARMCLK>;
+			operating-points-v2 = <&cpu0_opp_table>;
+		};
+		cpu1: cpu@1 {
+			device_type = "cpu";
+			compatible = "arm,cortex-a53";
+			reg = <0x0 0x1>;
+			enable-method = "psci";
+			clocks = <&cru ARMCLK>;
+			operating-points-v2 = <&cpu0_opp_table>;
+		};
+		cpu2: cpu@2 {
+			device_type = "cpu";
+			compatible = "arm,cortex-a53";
+			reg = <0x0 0x2>;
+			enable-method = "psci";
+			clocks = <&cru ARMCLK>;
+			operating-points-v2 = <&cpu0_opp_table>;
+		};
+		cpu3: cpu@3 {
+			device_type = "cpu";
+			compatible = "arm,cortex-a53";
+			reg = <0x0 0x3>;
+			enable-method = "psci";
+			clocks = <&cru ARMCLK>;
+			operating-points-v2 = <&cpu0_opp_table>;
+		};
+	};
+
+	cpu0_opp_table: cpu0-opp-table {
+		compatible = "operating-points-v2";
+		opp-shared;
+
+		nvmem-cells = <&cpu_leakage>;
+		nvmem-cell-names = "leakage";
+
+		opp-408000000 {
+			opp-hz = /bits/ 64 <408000000>;
+			opp-microvolt = <900000 900000 1100000>;
+			clock-latency-ns = <40000>;
+			opp-suspend;
+		};
+		opp-600000000 {
+			opp-hz = /bits/ 64 <600000000>;
+			opp-microvolt = <900000 900000 1100000>;
+			clock-latency-ns = <40000>;
+		};
+		opp-816000000 {
+			opp-hz = /bits/ 64 <816000000>;
+			opp-microvolt = <900000 900000 1100000>;
+			clock-latency-ns = <40000>;
+		};
+		opp-1008000000 {
+			opp-hz = /bits/ 64 <1008000000>;
+			opp-microvolt = <900000 900000 1100000>;
+			clock-latency-ns = <40000>;
+		};
+		opp-1200000000 {
+			opp-hz = /bits/ 64 <1200000000>;
+			opp-microvolt = <900000 900000 1100000>;
+			clock-latency-ns = <40000>;
+		};
+	};
+
+	arm-pmu {
+		compatible = "arm,cortex-a53-pmu";
+		interrupts = <GIC_SPI 228 IRQ_TYPE_LEVEL_HIGH>,
+			     <GIC_SPI 229 IRQ_TYPE_LEVEL_HIGH>,
+			     <GIC_SPI 230 IRQ_TYPE_LEVEL_HIGH>,
+			     <GIC_SPI 231 IRQ_TYPE_LEVEL_HIGH>;
+		interrupt-affinity = <&cpu0>, <&cpu1>, <&cpu2>, <&cpu3>;
+	};
+
+	cpuinfo {
+		compatible = "rockchip,cpuinfo";
+		nvmem-cells = <&otp_id>, <&otp_cpu_version>, <&cpu_code>;
+		nvmem-cell-names = "id", "cpu-version", "cpu-code";
+	};
+
+	/* dphy0 full mode */
+	csi2_dphy0: csi2-dphy0 {
+		compatible = "rockchip,rk3562-csi2-dphy";
+		rockchip,hw = <&csi2_dphy0_hw>;
+		status = "disabled";
+	};
+
+	/* dphy0 split mode 01 */
+	csi2_dphy1: csi2-dphy1 {
+		compatible = "rockchip,rk3562-csi2-dphy";
+		rockchip,hw = <&csi2_dphy0_hw>;
+		status = "disabled";
+	};
+
+	/* dphy0 split mode 23 */
+	csi2_dphy2: csi2-dphy2 {
+		compatible = "rockchip,rk3562-csi2-dphy";
+		rockchip,hw = <&csi2_dphy0_hw>;
+		status = "disabled";
+	};
+
+	/* dphy1 full mode */
+	csi2_dphy3: csi2-dphy3 {
+		compatible = "rockchip,rk3562-csi2-dphy";
+		rockchip,hw = <&csi2_dphy1_hw>;
+		status = "disabled";
+	};
+
+	/* dphy1 split mode 01 */
+	csi2_dphy4: csi2-dphy4 {
+		compatible = "rockchip,rk3562-csi2-dphy";
+		rockchip,hw = <&csi2_dphy1_hw>;
+		status = "disabled";
+	};
+
+	/* dphy1 split mode 23 */
+	csi2_dphy5: csi2-dphy5 {
+		compatible = "rockchip,rk3562-csi2-dphy";
+		rockchip,hw = <&csi2_dphy1_hw>;
+		status = "disabled";
+	};
+
+	display_subsystem: display-subsystem {
+		compatible = "rockchip,display-subsystem";
+		ports = <&vop_out>;
+		status = "disabled";
+	};
+
+	firmware: firmware {
+		scmi: scmi {
+			compatible = "arm,scmi-smc";
+			shmem = <&scmi_shmem>;
+			arm,smc-id = <0x82000010>;
+			#address-cells = <1>;
+			#size-cells = <0>;
+
+			scmi_clk: protocol@14 {
+				reg = <0x14>;
+				#clock-cells = <1>;
+			};
+		};
+	};
+
+	mpp_srv: mpp-srv {
+		compatible = "rockchip,mpp-service";
+		rockchip,taskqueue-count = <3>;
+		rockchip,resetgroup-count = <3>;
+		status = "disabled";
+	};
+
+	psci: psci {
+		compatible = "arm,psci-1.0";
+		method = "smc";
+	};
+
+	rkcif_mipi_lvds: rkcif-mipi-lvds {
+		compatible = "rockchip,rkcif-mipi-lvds";
+		rockchip,hw = <&rkcif>;
+		iommus = <&rkcif_mmu>;
+		status = "disabled";
+	};
+
+	rkcif_mipi_lvds_sditf: rkcif-mipi-lvds-sditf {
+		compatible = "rockchip,rkcif-sditf";
+		rockchip,cif = <&rkcif_mipi_lvds>;
+		status = "disabled";
+	};
+
+	rkcif_mipi_lvds_sditf_vir1: rkcif-mipi-lvds-sditf-vir1 {
+		compatible = "rockchip,rkcif-sditf";
+		rockchip,cif = <&rkcif_mipi_lvds>;
+		status = "disabled";
+	};
+
+	rkcif_mipi_lvds_sditf_vir2: rkcif-mipi-lvds-sditf-vir2 {
+		compatible = "rockchip,rkcif-sditf";
+		rockchip,cif = <&rkcif_mipi_lvds>;
+		status = "disabled";
+	};
+
+	rkcif_mipi_lvds_sditf_vir3: rkcif-mipi-lvds-sditf-vir3 {
+		compatible = "rockchip,rkcif-sditf";
+		rockchip,cif = <&rkcif_mipi_lvds>;
+		status = "disabled";
+	};
+
+	rkcif_mipi_lvds1: rkcif-mipi-lvds1 {
+		compatible = "rockchip,rkcif-mipi-lvds";
+		rockchip,hw = <&rkcif>;
+		iommus = <&rkcif_mmu>;
+		status = "disabled";
+	};
+
+	rkcif_mipi_lvds1_sditf: rkcif-mipi-lvds1-sditf {
+		compatible = "rockchip,rkcif-sditf";
+		rockchip,cif = <&rkcif_mipi_lvds1>;
+		status = "disabled";
+	};
+
+	rkcif_mipi_lvds1_sditf_vir1: rkcif-mipi-lvds1-sditf-vir1 {
+		compatible = "rockchip,rkcif-sditf";
+		rockchip,cif = <&rkcif_mipi_lvds1>;
+		status = "disabled";
+	};
+
+	rkcif_mipi_lvds1_sditf_vir2: rkcif-mipi-lvds1-sditf-vir2 {
+		compatible = "rockchip,rkcif-sditf";
+		rockchip,cif = <&rkcif_mipi_lvds1>;
+		status = "disabled";
+	};
+
+	rkcif_mipi_lvds1_sditf_vir3: rkcif-mipi-lvds1-sditf-vir3 {
+		compatible = "rockchip,rkcif-sditf";
+		rockchip,cif = <&rkcif_mipi_lvds1>;
+		status = "disabled";
+	};
+
+	rkcif_mipi_lvds2: rkcif-mipi-lvds2 {
+		compatible = "rockchip,rkcif-mipi-lvds";
+		rockchip,hw = <&rkcif>;
+		iommus = <&rkcif_mmu>;
+		status = "disabled";
+	};
+
+	rkcif_mipi_lvds2_sditf: rkcif-mipi-lvds2-sditf {
+		compatible = "rockchip,rkcif-sditf";
+		rockchip,cif = <&rkcif_mipi_lvds2>;
+		status = "disabled";
+	};
+
+	rkcif_mipi_lvds2_sditf_vir1: rkcif-mipi-lvds2-sditf-vir1 {
+		compatible = "rockchip,rkcif-sditf";
+		rockchip,cif = <&rkcif_mipi_lvds2>;
+		status = "disabled";
+	};
+
+	rkcif_mipi_lvds2_sditf_vir2: rkcif-mipi-lvds2-sditf-vir2 {
+		compatible = "rockchip,rkcif-sditf";
+		rockchip,cif = <&rkcif_mipi_lvds2>;
+		status = "disabled";
+	};
+
+	rkcif_mipi_lvds2_sditf_vir3: rkcif-mipi-lvds2-sditf-vir3 {
+		compatible = "rockchip,rkcif-sditf";
+		rockchip,cif = <&rkcif_mipi_lvds2>;
+		status = "disabled";
+	};
+
+	rkcif_mipi_lvds3: rkcif-mipi-lvds3 {
+		compatible = "rockchip,rkcif-mipi-lvds";
+		rockchip,hw = <&rkcif>;
+		iommus = <&rkcif_mmu>;
+		status = "disabled";
+	};
+
+	rkcif_mipi_lvds3_sditf: rkcif-mipi-lvds3-sditf {
+		compatible = "rockchip,rkcif-sditf";
+		rockchip,cif = <&rkcif_mipi_lvds3>;
+		status = "disabled";
+	};
+
+	rkcif_mipi_lvds3_sditf_vir1: rkcif-mipi-lvds3-sditf-vir1 {
+		compatible = "rockchip,rkcif-sditf";
+		rockchip,cif = <&rkcif_mipi_lvds3>;
+		status = "disabled";
+	};
+
+	rkcif_mipi_lvds3_sditf_vir2: rkcif-mipi-lvds3-sditf-vir2 {
+		compatible = "rockchip,rkcif-sditf";
+		rockchip,cif = <&rkcif_mipi_lvds3>;
+		status = "disabled";
+	};
+
+	rkcif_mipi_lvds3_sditf_vir3: rkcif-mipi-lvds3-sditf-vir3 {
+		compatible = "rockchip,rkcif-sditf";
+		rockchip,cif = <&rkcif_mipi_lvds3>;
+		status = "disabled";
+	};
+
+	rkisp_vir0: rkisp-vir0 {
+		compatible = "rockchip,rkisp-vir";
+		rockchip,hw = <&rkisp>;
+		status = "disabled";
+	};
+
+	rkisp_vir1: rkisp-vir1 {
+		compatible = "rockchip,rkisp-vir";
+		rockchip,hw = <&rkisp>;
+		status = "disabled";
+	};
+
+	rkisp_vir2: rkisp-vir2 {
+		compatible = "rockchip,rkisp-vir";
+		rockchip,hw = <&rkisp>;
+		status = "disabled";
+	};
+
+	rkisp_vir3: rkisp-vir3 {
+		compatible = "rockchip,rkisp-vir";
+		rockchip,hw = <&rkisp>;
+		status = "disabled";
+	};
+
+	thermal_zones: thermal-zones {
+		soc_thermal: soc-thermal {
+			polling-delay-passive = <20>; /* milliseconds */
+			polling-delay = <1000>; /* milliseconds */
+
+			thermal-sensors = <&tsadc 0>;
+			trips {
+				soc_crit: soc-crit {
+					/* millicelsius */
+					temperature = <115000>;
+					/* millicelsius */
+					hysteresis = <2000>;
+					type = "critical";
+				};
+			};
+		};
+	};
+
+	timer {
+		compatible = "arm,armv8-timer";
+		interrupts = <GIC_PPI 13 (GIC_CPU_MASK_SIMPLE(4) | IRQ_TYPE_LEVEL_LOW)>,
+			     <GIC_PPI 14 (GIC_CPU_MASK_SIMPLE(4) | IRQ_TYPE_LEVEL_LOW)>,
+			     <GIC_PPI 11 (GIC_CPU_MASK_SIMPLE(4) | IRQ_TYPE_LEVEL_LOW)>,
+			     <GIC_PPI 10 (GIC_CPU_MASK_SIMPLE(4) | IRQ_TYPE_LEVEL_LOW)>;
+	};
+
+	scmi_shmem: scmi-shmem@10f000 {
+		compatible = "arm,scmi-shmem";
+		reg = <0x0 0x0010f000 0x0 0x100>;
+	};
+
+	usbdrd30: usbdrd {
+		compatible = "rockchip,rk3562-dwc3", "rockchip,rk3399-dwc3";
+		clocks = <&cru CLK_USB3OTG_REF>, <&cru CLK_USB3OTG_SUSPEND>,
+			 <&cru ACLK_USB3OTG>, <&cru PCLK_PHP>;
+		clock-names = "ref", "suspend", "bus", "pipe_clk";
+		#address-cells = <2>;
+		#size-cells = <2>;
+		ranges;
+		status = "disabled";
+
+		usbdrd_dwc3: usb@fe500000 {
+			compatible = "snps,dwc3";
+			reg = <0x0 0xfe500000 0x0 0x400000>;
+			interrupts = <GIC_SPI 149 IRQ_TYPE_LEVEL_HIGH>;
+			dr_mode = "otg";
+			phys = <&u2phy_otg>, <&combphy_pu PHY_TYPE_USB3>;
+			phy-names = "usb2-phy", "usb3-phy";
+			phy_type = "utmi_wide";
+			power-domains = <&power RK3562_PD_PHP>;
+			resets = <&cru SRST_USB3OTG>;
+			reset-names = "usb3-otg";
+			snps,dis_enblslpm_quirk;
+			snps,dis-u1-entry-quirk;
+			snps,dis-u2-entry-quirk;
+			snps,dis-u2-freeclk-exists-quirk;
+			snps,dis-del-phy-power-chg-quirk;
+			snps,dis-tx-ipgap-linecheck-quirk;
+			snps,dis_rxdet_inp3_quirk;
+			quirk-skip-phy-init;
+			status = "disabled";
+		};
+	};
+
+	gic: interrupt-controller@fe901000 {
+		compatible = "arm,gic-400";
+		#interrupt-cells = <3>;
+		#address-cells = <0>;
+		interrupt-controller;
+		reg = <0x0 0xfe901000 0 0x1000>,
+		      <0x0 0xfe902000 0 0x2000>,
+		      <0x0 0xfe904000 0 0x2000>,
+		      <0x0 0xfe906000 0 0x2000>;
+		interrupts = <GIC_PPI 9 (GIC_CPU_MASK_SIMPLE(4) | IRQ_TYPE_LEVEL_LOW)>;
+	};
+
+	usb_host0_ehci: usb@fed00000 {
+		compatible = "generic-ehci";
+		reg = <0x0 0xfed00000 0x0 0x40000>;
+		interrupts = <GIC_SPI 150 IRQ_TYPE_LEVEL_HIGH>;
+		clocks = <&cru HCLK_USB2HOST>, <&cru HCLK_USB2HOST_ARB>,
+			 <&u2phy>;
+		clock-names = "usbhost", "arbiter", "utmi";
+		phys = <&u2phy_host>;
+		phy-names = "usb2-phy";
+		status = "disabled";
+	};
+
+	usb_host0_ohci: usb@fed40000 {
+		compatible = "generic-ohci";
+		reg = <0x0 0xfed40000 0x0 0x40000>;
+		interrupts = <GIC_SPI 151 IRQ_TYPE_LEVEL_HIGH>;
+		clocks = <&cru HCLK_USB2HOST>, <&cru HCLK_USB2HOST_ARB>,
+			 <&u2phy>;
+		clock-names = "usbhost", "arbiter", "utmi";
+		phys = <&u2phy_host>;
+		phy-names = "usb2-phy";
+		status = "disabled";
+	};
+
+	qos_dma2ddr: qos@fee03800 {
+		compatible = "syscon";
+		reg = <0x0 0xfee03800 0x0 0x20>;
+	};
+
+	qos_mcu: qos@fee10000 {
+		compatible = "syscon";
+		reg = <0x0 0xfee10000 0x0 0x20>;
+	};
+
+	qos_dft_apb: qos@fee10100 {
+		compatible = "syscon";
+		reg = <0x0 0xfee10100 0x0 0x20>;
+	};
+
+	qos_gmac: qos@fee10200 {
+		compatible = "syscon";
+		reg = <0x0 0xfee10200 0x0 0x20>;
+	};
+
+	qos_mac100: qos@fee10300 {
+		compatible = "syscon";
+		reg = <0x0 0xfee10300 0x0 0x20>;
+	};
+
+	qos_dcf: qos@fee10400 {
+		compatible = "syscon";
+		reg = <0x0 0xfee10400 0x0 0x20>;
+	};
+
+	qos_cpu: qos@fee20000 {
+		compatible = "syscon";
+		reg = <0x0 0xfee20000 0x0 0x20>;
+	};
+
+	qos_daplite_apb: qos@fee20100 {
+		compatible = "syscon";
+		reg = <0x0 0xfee20100 0x0 0x20>;
+	};
+
+	qos_gpu: qos@fee30000 {
+		compatible = "syscon";
+		reg = <0x0 0xfee30000 0x0 0x20>;
+	};
+
+	qos_npu: qos@fee40000 {
+		compatible = "syscon";
+		reg = <0x0 0xfee40000 0x0 0x20>;
+	};
+
+	qos_rkvdec: qos@fee50000 {
+		compatible = "syscon";
+		reg = <0x0 0xfee50000 0x0 0x20>;
+	};
+
+	qos_vepu: qos@fee60000 {
+		compatible = "syscon";
+		reg = <0x0 0xfee60000 0x0 0x20>;
+	};
+
+	qos_isp: qos@fee70000 {
+		compatible = "syscon";
+		reg = <0x0 0xfee70000 0x0 0x20>;
+	};
+
+	qos_vicap: qos@fee70100 {
+		compatible = "syscon";
+		reg = <0x0 0xfee70100 0x0 0x20>;
+	};
+
+	qos_vop: qos@fee80000 {
+		compatible = "syscon";
+		reg = <0x0 0xfee80000 0x0 0x20>;
+	};
+
+	qos_jpeg: qos@fee90000 {
+		compatible = "syscon";
+		reg = <0x0 0xfee90000 0x0 0x20>;
+	};
+
+	qos_rga_rd: qos@fee90100 {
+		compatible = "syscon";
+		reg = <0x0 0xfee90100 0x0 0x20>;
+	};
+
+	qos_rga_wr: qos@fee90200 {
+		compatible = "syscon";
+		reg = <0x0 0xfee90200 0x0 0x20>;
+	};
+
+	qos_pcie: qos@feea0000 {
+		compatible = "syscon";
+		reg = <0x0 0xfeea0000 0x0 0x20>;
+	};
+
+	qos_usb3: qos@feea0100 {
+		compatible = "syscon";
+		reg = <0x0 0xfeea0100 0x0 0x20>;
+	};
+
+	qos_crypto_apb: qos@feeb0000 {
+		compatible = "syscon";
+		reg = <0x0 0xfeeb0000 0x0 0x20>;
+	};
+
+	qos_crypto: qos@feeb0100 {
+		compatible = "syscon";
+		reg = <0x0 0xfeeb0100 0x0 0x20>;
+	};
+
+	qos_dmac: qos@feeb0200 {
+		compatible = "syscon";
+		reg = <0x0 0xfeeb0200 0x0 0x20>;
+	};
+
+	qos_emmc: qos@feeb0300 {
+		compatible = "syscon";
+		reg = <0x0 0xfeeb0300 0x0 0x20>;
+	};
+
+	qos_fspi: qos@feeb0400 {
+		compatible = "syscon";
+		reg = <0x0 0xfeeb0400 0x0 0x20>;
+	};
+
+	qos_rkdma: qos@feeb0500 {
+		compatible = "syscon";
+		reg = <0x0 0xfeeb0500 0x0 0x20>;
+	};
+
+	qos_sdmmc0: qos@feeb0600 {
+		compatible = "syscon";
+		reg = <0x0 0xfeeb0600 0x0 0x20>;
+	};
+
+	qos_sdmmc1: qos@feeb0700 {
+		compatible = "syscon";
+		reg = <0x0 0xfeeb0700 0x0 0x20>;
+	};
+
+	qos_usb2: qos@feeb0800 {
+		compatible = "syscon";
+		reg = <0x0 0xfeeb0800 0x0 0x20>;
+	};
+
+	pmu_grf: syscon@ff010000 {
+		compatible = "rockchip,rk3562-pmu-grf", "syscon", "simple-mfd";
+		reg = <0x0 0xff010000 0x0 0x10000>;
+
+		reboot_mode: reboot-mode {
+			compatible = "syscon-reboot-mode";
+			offset = <0x200>;
+			mode-bootloader = <BOOT_BL_DOWNLOAD>;
+			mode-fastboot = <BOOT_FASTBOOT>;
+			mode-loader = <BOOT_BL_DOWNLOAD>;
+			mode-normal = <BOOT_NORMAL>;
+			mode-recovery = <BOOT_RECOVERY>;
+		};
+	};
+
+	sys_grf: syscon@ff030000 {
+		compatible = "rockchip,rk3562-sys-grf", "syscon", "simple-mfd";
+		reg = <0x0 0xff030000 0x0 0x10000>;
+
+		lvds: lvds {
+			compatible = "rockchip,rk3562-lvds";
+			phys = <&video_phy>;
+			phy-names = "phy";
+			status = "disabled";
+
+			ports {
+				#address-cells = <1>;
+				#size-cells = <0>;
+
+				port@0 {
+					reg = <0>;
+					#address-cells = <1>;
+					#size-cells = <0>;
+
+					lvds_in_vp0: endpoint@0 {
+						reg = <0>;
+						remote-endpoint = <&vp0_out_lvds>;
+						status = "disabled";
+					};
+
+					lvds_in_vp1: endpoint@1 {
+						reg = <1>;
+						remote-endpoint = <&vp1_out_lvds>;
+						status = "disabled";
+					};
+				};
+			};
+		};
+
+		rgb: rgb {
+			compatible = "rockchip,rk3562-rgb";
+			pinctrl-names = "default";
+			pinctrl-0 = <&vo_pins>;
+			status = "disabled";
+
+			ports {
+				#address-cells = <1>;
+				#size-cells = <0>;
+
+				port@0 {
+					reg = <0>;
+					#address-cells = <1>;
+					#size-cells = <0>;
+
+					rgb_in_vp0: endpoint@0 {
+						reg = <0>;
+						remote-endpoint = <&vp0_out_rgb>;
+						status = "disabled";
+					};
+
+					rgb_in_vp1: endpoint@1 {
+						reg = <1>;
+						remote-endpoint = <&vp1_out_rgb>;
+						status = "disabled";
+					};
+				};
+			};
+		};
+	};
+
+	peri_grf: syscon@ff040000 {
+		compatible = "rockchip,rk3562-peri-grf", "syscon";
+		reg = <0x0 0xff040000 0x0 0x10000>;
+	};
+
+	ioc_grf: syscon@ff060000 {
+		compatible = "rockchip,rk3562-ioc-grf", "syscon";
+		reg = <0x0 0xff060000 0x0 0x30000>;
+	};
+
+	usbphy_grf: syscon@ff090000 {
+		compatible = "rockchip,rk3562-usbphy-grf", "syscon";
+		reg = <0x0 0xff090000 0x0 0x8000>;
+	};
+
+	pipephy_grf: syscon@ff098000 {
+		compatible = "rockchip,rk3562-pipephy-grf", "syscon";
+		reg = <0x0 0xff098000 0x0 0x8000>;
+	};
+
+	cru: clock-controller@ff100000 {
+		compatible = "rockchip,rk3562-cru";
+		reg = <0x0 0xff100000 0x0 0x40000>;
+		rockchip,grf = <&sys_grf>;
+		#clock-cells = <1>;
+		#reset-cells = <1>;
+
+		assigned-clocks =
+			<&cru PLL_GPLL>, <&cru PLL_CPLL>,
+			<&cru ARMCLK>;
+		assigned-clock-rates =
+			<1188000000>, <1000000000>,
+			<600000000>;
+	};
+
+	i2c0: i2c@ff200000 {
+		compatible = "rockchip,rk3562-i2c", "rockchip,rk3399-i2c";
+		reg = <0x0 0xff200000 0x0 0x1000>;
+		clocks = <&cru CLK_PMU0_I2C0>, <&cru PCLK_PMU0_I2C0>;
+		clock-names = "i2c", "pclk";
+		interrupts = <GIC_SPI 12 IRQ_TYPE_LEVEL_HIGH>;
+		pinctrl-names = "default";
+		pinctrl-0 = <&i2c0_xfer>;
+		#address-cells = <1>;
+		#size-cells = <0>;
+		status = "disabled";
+	};
+
+	uart0: serial@ff210000 {
+		compatible = "rockchip,rk3562-uart", "snps,dw-apb-uart";
+		reg = <0x0 0xff210000 0x0 0x100>;
+		interrupts = <GIC_SPI 30 IRQ_TYPE_LEVEL_HIGH>;
+		clocks = <&cru SCLK_PMU1_UART0>, <&cru PCLK_PMU1_UART0>;
+		clock-names = "baudclk", "apb_pclk";
+		reg-shift = <2>;
+		reg-io-width = <4>;
+		dmas = <&dmac 0>;
+		status = "disabled";
+	};
+
+	spi0: spi@ff220000 {
+		compatible = "rockchip,rk3066-spi";
+		reg = <0x0 0xff220000 0x0 0x1000>;
+		interrupts = <GIC_SPI 52 IRQ_TYPE_LEVEL_HIGH>;
+		#address-cells = <1>;
+		#size-cells = <0>;
+		clocks = <&cru CLK_PMU1_SPI0>, <&cru PCLK_PMU1_SPI0>, <&cru PCLK_PMU1_SPI0>;
+		clock-names = "spiclk", "apb_pclk", "sclk_in";
+		dmas = <&dmac 13>, <&dmac 12>;
+		dma-names = "tx", "rx";
+		pinctrl-names = "default";
+		pinctrl-0 = <&spi0m0_csn0 &spi0m0_csn1 &spi0m0_pins>;
+		num-cs = <2>;
+		status = "disabled";
+	};
+
+	pwm0: pwm@ff230000 {
+		compatible = "rockchip,rk3562-pwm", "rockchip,rk3328-pwm";
+		reg = <0x0 0xff230000 0x0 0x10>;
+		#pwm-cells = <3>;
+		pinctrl-names = "active";
+		pinctrl-0 = <&pwm0m0_pins>;
+		clocks = <&cru CLK_PMU1_PWM0>, <&cru PCLK_PMU1_PWM0>;
+		clock-names = "pwm", "pclk";
+		status = "disabled";
+	};
+
+	pwm1: pwm@ff230010 {
+		compatible = "rockchip,rk3562-pwm", "rockchip,rk3328-pwm";
+		reg = <0x0 0xff230010 0x0 0x10>;
+		#pwm-cells = <3>;
+		pinctrl-names = "active";
+		pinctrl-0 = <&pwm1m0_pins>;
+		clocks = <&cru CLK_PMU1_PWM0>, <&cru PCLK_PMU1_PWM0>;
+		clock-names = "pwm", "pclk";
+		status = "disabled";
+	};
+
+	pwm2: pwm@ff230020 {
+		compatible = "rockchip,rk3562-pwm", "rockchip,rk3328-pwm";
+		reg = <0x0 0xff230020 0x0 0x10>;
+		#pwm-cells = <3>;
+		pinctrl-names = "active";
+		pinctrl-0 = <&pwm2m0_pins>;
+		clocks = <&cru CLK_PMU1_PWM0>, <&cru PCLK_PMU1_PWM0>;
+		clock-names = "pwm", "pclk";
+		status = "disabled";
+	};
+
+	pwm3: pwm@ff230030 {
+		compatible = "rockchip,rk3562-pwm", "rockchip,rk3328-pwm";
+		reg = <0x0 0xff230030 0x0 0x10>;
+		interrupts = <GIC_SPI 20 IRQ_TYPE_LEVEL_HIGH>,
+			     <GIC_SPI 21 IRQ_TYPE_LEVEL_HIGH>;
+		#pwm-cells = <3>;
+		pinctrl-names = "active";
+		pinctrl-0 = <&pwm3m0_pins>;
+		clocks = <&cru CLK_PMU1_PWM0>, <&cru PCLK_PMU1_PWM0>;
+		clock-names = "pwm", "pclk";
+		status = "disabled";
+	};
+
+	pmu: power-management@ff258000 {
+		compatible = "rockchip,rk3562-pmu", "syscon", "simple-mfd";
+		reg = <0x0 0xff258000 0x0 0x1000>;
+
+		power: power-controller {
+			compatible = "rockchip,rk3562-power-controller";
+			#power-domain-cells = <1>;
+			#address-cells = <1>;
+			#size-cells = <0>;
+			status = "okay";
+
+			/* These power domains are grouped by VD_GPU */
+			pd_gpu@RK3562_PD_GPU {
+				reg = <RK3562_PD_GPU>;
+				pm_qos = <&qos_gpu>;
+			};
+			/* These power domains are grouped by VD_NPU */
+			pd_npu@RK3562_PD_NPU {
+				reg = <RK3562_PD_NPU>;
+				pm_qos = <&qos_npu>;
+			};
+			/* These power domains are grouped by VD_LOGIC */
+			pd_vdpu@RK3562_PD_VDPU {
+				reg = <RK3562_PD_VDPU>;
+				pm_qos = <&qos_rkvdec>;
+			};
+			pd_vi@RK3562_PD_VI {
+				reg = <RK3562_PD_VI>;
+				#address-cells = <1>;
+				#size-cells = <0>;
+				pm_qos = <&qos_isp>,
+					 <&qos_vicap>;
+
+				pd_vepu@RK3562_PD_VEPU {
+					reg = <RK3562_PD_VEPU>;
+					pm_qos = <&qos_vepu>;
+				};
+			};
+			pd_vo@RK3562_PD_VO {
+				reg = <RK3562_PD_VO>;
+				#address-cells = <1>;
+				#size-cells = <0>;
+				pm_qos = <&qos_vop>;
+
+				pd_rga@RK3562_PD_RGA {
+					reg = <RK3562_PD_RGA>;
+					pm_qos = <&qos_rga_rd>,
+						 <&qos_rga_wr>,
+						 <&qos_jpeg>;
+				};
+			};
+			pd_php@RK3562_PD_PHP {
+				reg = <RK3562_PD_PHP>;
+				pm_qos = <&qos_pcie>,
+					 <&qos_usb3>;
+			};
+		};
+	};
+
+	pmu_mailbox: mailbox@ff290000 {
+		compatible = "rockchip,rk3562-mailbox",
+			     "rockchip,rk3368-mailbox";
+		reg = <0x0 0xff290000 0x0 0x200>;
+		interrupts = <GIC_SPI 18 IRQ_TYPE_LEVEL_HIGH>;
+		clocks = <&cru PCLK_PMU1_MAILBOX>;
+		clock-names = "pclk_mailbox";
+		#mbox-cells = <1>;
+		status = "disabled";
+	};
+
+	rknpu: npu@ff300000 {
+		compatible = "rockchip,rk3562-rknpu";
+		reg = <0x0 0xff300000 0x0 0x10000>;
+		interrupts = <GIC_SPI 119 IRQ_TYPE_LEVEL_HIGH>;
+		clocks = <&cru ACLK_RKNN>, <&cru HCLK_RKNN>;
+		clock-names = "aclk", "hclk";
+		assigned-clocks = <&cru ACLK_RKNN>;
+		assigned-clock-rates = <600000000>;
+		resets = <&cru SRST_A_RKNN>, <&cru SRST_H_RKNN>;
+		reset-names = "srst_a", "srst_h";
+		power-domains = <&power RK3562_PD_NPU>;
+		iommus = <&rknpu_mmu>;
+		status = "disabled";
+	};
+
+	rknpu_mmu: iommu@ff30b000 {
+		compatible = "rockchip,iommu-v2";
+		reg = <0x0 0xff30b000 0x0 0x40>;
+		interrupts = <GIC_SPI 119 IRQ_TYPE_LEVEL_HIGH>;
+		interrupt-names = "rknpu_mmu";
+		clocks = <&cru ACLK_RKNN>, <&cru HCLK_RKNN>;
+		clock-names = "aclk", "iface";
+		power-domains = <&power RK3562_PD_NPU>;
+		#iommu-cells = <0>;
+		status = "disabled";
+	};
+
+	gpu: gpu@ff320000 {
+		compatible = "arm,mali-bifrost";
+		reg = <0x0 0xff320000 0x0 0x4000>;
+
+		interrupts = <GIC_SPI 75 IRQ_TYPE_LEVEL_HIGH>,
+			     <GIC_SPI 77 IRQ_TYPE_LEVEL_HIGH>,
+			     <GIC_SPI 76 IRQ_TYPE_LEVEL_HIGH>;
+		interrupt-names = "GPU", "MMU", "JOB";
+
+		upthreshold = <40>;
+		downdifferential = <10>;
+
+		clocks = <&cru CLK_GPU>, <&cru CLK_GPU_BRG>;
+		clock-names = "clk_gpu", "clk_gpu_brg";
+		power-domains = <&power RK3562_PD_GPU>;
+		operating-points-v2 = <&gpu_opp_table>;
+		#cooling-cells = <2>;
+
+		status = "disabled";
+	};
+
+	gpu_opp_table: gpu-opp-table {
+		compatible = "operating-points-v2";
+
+		nvmem-cells = <&gpu_leakage>;
+		nvmem-cell-names = "leakage";
+
+		opp-300000000 {
+			opp-hz = /bits/ 64 <300000000>;
+			opp-microvolt = <900000 900000 1000000>;
+		};
+		opp-400000000 {
+			opp-hz = /bits/ 64 <400000000>;
+			opp-microvolt = <900000 900000 1000000>;
+		};
+	};
+
+	rkvdec: rkvdec@ff340100 {
+		compatible = "rockchip,rkv-decoder-vdpu382", "rockchip,rkv-decoder-v2";
+		reg = <0x0 0xff340100 0x0 0x400>, <0x0 0xff340000 0x0 0x100>;
+		reg-names = "regs", "link";
+		interrupts = <GIC_SPI 122 IRQ_TYPE_LEVEL_HIGH>;
+		interrupt-names = "irq_dec";
+		clocks = <&cru ACLK_RKVDEC>, <&cru HCLK_RKVDEC>, <&cru CLK_RKVDEC_HEVC_CA>;
+		clock-names = "aclk_vcodec", "hclk_vcodec","clk_hevc_cabac";
+		rockchip,normal-rates = <198000000>, <0>, <396000000>;
+		assigned-clocks = <&cru ACLK_RKVDEC>, <&cru CLK_RKVDEC_HEVC_CA>;
+		assigned-clock-rates = <198000000>, <396000000>;
+		resets = <&cru SRST_A_RKVDEC>, <&cru SRST_H_RKVDEC>,
+			 <&cru SRST_RKVDEC_HEVC_CA>;
+		reset-names = "video_a", "video_h", "video_hevc_cabac";
+		power-domains = <&power RK3562_PD_VDPU>;
+		iommus = <&rkvdec_mmu>;
+		rockchip,srv = <&mpp_srv>;
+		rockchip,taskqueue-node = <0>;
+		rockchip,resetgroup-node = <0>;
+		rockchip,task-capacity = <16>;
+		status = "disabled";
+	};
+
+	rkvdec_mmu: iommu@ff340800 {
+		compatible = "rockchip,iommu-v2";
+		reg = <0x0 0xff340800 0x0 0x40>, <0x0 0xff340900 0x0 0x40>;
+		interrupts = <GIC_SPI 123 IRQ_TYPE_LEVEL_HIGH>;
+		interrupt-names = "rkvdec_mmu";
+		clocks = <&cru ACLK_RKVDEC>, <&cru HCLK_RKVDEC>;
+		clock-names = "aclk", "iface";
+		power-domains = <&power RK3562_PD_VDPU>;
+		#iommu-cells = <0>;
+		status = "disabled";
+	};
+
+	rkvenc: rkvenc@ff360000 {
+		compatible = "rockchip,rkv-encoder-vepu540c", "rockchip,rkv-encoder-v2";
+		reg = <0x0 0xff360000 0x0 0x6000>;
+		interrupts = <GIC_SPI 136 IRQ_TYPE_LEVEL_HIGH>;
+		interrupt-names = "irq_rkvenc";
+		clocks = <&cru ACLK_RKVENC>, <&cru HCLK_RKVENC>, <&cru CLK_RKVENC_CORE>;
+		clock-names = "aclk_vcodec", "hclk_vcodec", "clk_core";
+		rockchip,normal-rates = <297000000>, <0>, <297000000>;
+		resets = <&cru SRST_A_RKVENC>, <&cru SRST_H_RKVENC>,
+			 <&cru SRST_RKVENC_CORE>;
+		reset-names = "video_a", "video_h", "video_core";
+		assigned-clocks = <&cru ACLK_RKVENC>, <&cru CLK_RKVENC_CORE>;
+		assigned-clock-rates = <297000000>, <297000000>;
+		power-domains = <&power RK3562_PD_VEPU>;
+		iommus = <&rkvenc_mmu>;
+		rockchip,srv = <&mpp_srv>;
+		rockchip,taskqueue-node = <1>;
+		rockchip,resetgroup-node = <1>;
+		status = "disabled";
+	};
+
+	rkvenc_mmu: iommu@ff36f000 {
+		compatible = "rockchip,iommu-v2";
+		reg = <0x0 0xff36f000 0x0 0x40>;
+		interrupts = <GIC_SPI 137 IRQ_TYPE_LEVEL_HIGH>;
+		interrupt-names = "rkvenc_mmu";
+		clocks = <&cru ACLK_RKVENC>, <&cru HCLK_RKVENC>;
+		clock-names = "aclk", "iface";
+		power-domains = <&power RK3562_PD_VEPU>;
+		#iommu-cells = <0>;
+		status = "disabled";
+	};
+
+	mipi0_csi2: mipi0-csi2@ff380000 {
+		compatible = "rockchip,rk3562-mipi-csi2";
+		reg = <0x0 0xff380000 0x0 0x10000>;
+		reg-names = "csihost_regs";
+		interrupts = <GIC_SPI 82 IRQ_TYPE_LEVEL_HIGH>,
+			     <GIC_SPI 83 IRQ_TYPE_LEVEL_HIGH>;
+		interrupt-names = "csi-intr1", "csi-intr2";
+		clocks = <&cru PCLK_CSIHOST0>;
+		clock-names = "pclk_csi2host";
+		resets = <&cru SRST_P_CSIHOST0>;
+		reset-names = "srst_csihost_p";
+		status = "disabled";
+	};
+
+	mipi1_csi2: mipi1-csi2@ff390000 {
+		compatible = "rockchip,rk3562-mipi-csi2";
+		reg = <0x0 0xff390000 0x0 0x10000>;
+		reg-names = "csihost_regs";
+		interrupts = <GIC_SPI 84 IRQ_TYPE_LEVEL_HIGH>,
+			     <GIC_SPI 85 IRQ_TYPE_LEVEL_HIGH>;
+		interrupt-names = "csi-intr1", "csi-intr2";
+		clocks = <&cru PCLK_CSIHOST1>;
+		clock-names = "pclk_csi2host";
+		resets = <&cru SRST_P_CSIHOST1>;
+		reset-names = "srst_csihost_p";
+		status = "disabled";
+	};
+
+	mipi2_csi2: mipi2-csi2@ff3a0000 {
+		compatible = "rockchip,rk3562-mipi-csi2";
+		reg = <0x0 0xff3a0000 0x0 0x10000>;
+		reg-names = "csihost_regs";
+		interrupts = <GIC_SPI 86 IRQ_TYPE_LEVEL_HIGH>,
+			     <GIC_SPI 87 IRQ_TYPE_LEVEL_HIGH>;
+		interrupt-names = "csi-intr1", "csi-intr2";
+		clocks = <&cru PCLK_CSIHOST2>;
+		clock-names = "pclk_csi2host";
+		resets = <&cru SRST_P_CSIHOST2>;
+		reset-names = "srst_csihost_p";
+		status = "disabled";
+	};
+
+	mipi3_csi2: mipi3-csi2@ff3b0000 {
+		compatible = "rockchip,rk3562-mipi-csi2";
+		reg = <0x0 0xff3b0000 0x0 0x10000>;
+		reg-names = "csihost_regs";
+		interrupts = <GIC_SPI 28 IRQ_TYPE_LEVEL_HIGH>,
+			     <GIC_SPI 29 IRQ_TYPE_LEVEL_HIGH>;
+		interrupt-names = "csi-intr1", "csi-intr2";
+		clocks = <&cru PCLK_CSIHOST3>;
+		clock-names = "pclk_csi2host";
+		resets = <&cru SRST_P_CSIHOST3>;
+		reset-names = "srst_csihost_p";
+		status = "disabled";
+	};
+
+	csi2_dphy0_hw: csi2-dphy0-hw@ff3c0000 {
+		compatible = "rockchip,rk3562-csi2-dphy-hw";
+		reg = <0x0 0xff3c0000 0x0 0x10000>;
+		clocks = <&cru PCLK_CSIPHY0>;
+		clock-names = "pclk";
+		resets = <&cru SRST_P_CSIPHY0>;
+		reset-names = "srst_p_csiphy0";
+		rockchip,grf = <&sys_grf>;
+		status = "disabled";
+	};
+
+	csi2_dphy1_hw: csi2-dphy1-hw@ff3d0000 {
+		compatible = "rockchip,rk3562-csi2-dphy-hw";
+		reg = <0x0 0xff3d0000 0x0 0x10000>;
+		clocks = <&cru PCLK_CSIPHY1>;
+		clock-names = "pclk";
+		resets = <&cru SRST_P_CSIPHY1>;
+		reset-names = "srst_p_csiphy1";
+		rockchip,grf = <&sys_grf>;
+		status = "disabled";
+	};
+
+	rkcif: rkcif@ff3e0000 {
+		compatible = "rockchip,rk3562-cif";
+		reg = <0x0 0xff3e0000 0x0 0x800>;
+		reg-names = "cif_regs";
+		interrupts = <GIC_SPI 99 IRQ_TYPE_LEVEL_HIGH>;
+		interrupt-names = "cif-intr";
+		clocks = <&cru ACLK_VICAP>, <&cru HCLK_VICAP>, <&cru DCLK_VICAP>;
+		clock-names = "aclk_cif", "hclk_cif", "dclk_cif";
+		resets = <&cru SRST_A_VICAP>, <&cru SRST_H_VICAP>, <&cru SRST_D_VICAP>,
+			 <&cru SRST_I0_VICAP>, <&cru SRST_I1_VICAP>, <&cru SRST_I2_VICAP>,
+			 <&cru SRST_I3_VICAP>;
+		reset-names = "rst_cif_a", "rst_cif_h", "rst_cif_d",
+			      "rst_cif_i0", "rst_cif_i1", "rst_cif_i2",
+			      "rst_cif_i3";
+		power-domains = <&power RK3562_PD_VI>;
+		rockchip,grf = <&sys_grf>;
+		iommus = <&rkcif_mmu>;
+		status = "disabled";
+	};
+
+	rkcif_mmu: iommu@ff3e0800 {
+		compatible = "rockchip,iommu-v2";
+		reg = <0x0 0xff3e0800 0x0 0x100>;
+		interrupts = <GIC_SPI 100 IRQ_TYPE_LEVEL_HIGH>;
+		interrupt-names = "cif_mmu";
+		clocks = <&cru ACLK_VICAP>, <&cru HCLK_VICAP>;
+		clock-names = "aclk", "iface";
+		power-domains = <&power RK3562_PD_VI>;
+		rockchip,disable-mmu-reset;
+		#iommu-cells = <0>;
+		status = "disabled";
+	};
+
+	rkisp: isp@ff3f0000 {
+		compatible = "rockchip,rk3562-rkisp";
+		reg = <0x0 0xff3f0000 0x0 0x7f00>;
+		interrupts = <GIC_SPI 88 IRQ_TYPE_LEVEL_HIGH>,
+			     <GIC_SPI 89 IRQ_TYPE_LEVEL_HIGH>,
+			     <GIC_SPI 90 IRQ_TYPE_LEVEL_HIGH>;
+		interrupt-names = "mipi_irq", "mi_irq", "isp_irq";
+		clocks = <&cru ACLK_ISP>, <&cru HCLK_ISP>, <&cru CLK_ISP>;
+		clock-names = "aclk_isp", "hclk_isp", "clk_isp_core";
+		power-domains = <&power RK3562_PD_VI>;
+		iommus = <&rkisp_mmu>;
+		status = "disabled";
+	};
+
+	rkisp_mmu: iommu@ff3f7f00 {
+		compatible = "rockchip,iommu-v2";
+		reg = <0x0 0xff3f7f00 0x0 0x100>;
+		interrupts = <GIC_SPI 91 IRQ_TYPE_LEVEL_HIGH>;
+		interrupt-names = "isp_mmu";
+		clocks = <&cru ACLK_RGA>, <&cru HCLK_RGA>;
+		clock-names = "aclk", "iface";
+		rockchip,disable-mmu-reset;
+		#iommu-cells = <0>;
+		power-domains = <&power RK3562_PD_VI>;
+		status = "disabled";
+	};
+
+	vop: vop@ff400000 {
+		compatible = "rockchip,rk3562-vop";
+		reg = <0x0 0xff400000 0x0 0x2000>, <0x0 0xff405000 0x0 0x1000>;
+		reg-names = "regs", "gamma_lut";
+		interrupts = <GIC_SPI 135 IRQ_TYPE_LEVEL_HIGH>;
+		clocks = <&cru ACLK_VOP>,
+			 <&cru HCLK_VOP>,
+			 <&cru DCLK_VOP>,
+			 <&cru DCLK_VOP1>;
+		clock-names = "aclk_vop",
+			      "hclk_vop",
+			      "dclk_vp0",
+			      "dclk_vp1";
+		resets = <&cru SRST_A_VOP>,
+			 <&cru SRST_H_VOP>,
+			 <&cru SRST_D_VOP>,
+			 <&cru SRST_D_VOP1>;
+		reset-names = "axi",
+			      "ahb",
+			      "dclk_vp0",
+			      "dclk_vp1";
+		iommus = <&vop_mmu>;
+		power-domains = <&power RK3562_PD_VO>;
+		rockchip,grf = <&sys_grf>;
+		status = "disabled";
+
+		vop_out: ports {
+			#address-cells = <1>;
+			#size-cells = <0>;
+
+			port@0 {
+				#address-cells = <1>;
+				#size-cells = <0>;
+				reg = <0>;
+
+				vp0_out_rgb: endpoint@0 {
+					reg = <0>;
+					remote-endpoint = <&rgb_in_vp0>;
+				};
+
+				vp0_out_dsi: endpoint@1 {
+					reg = <1>;
+					remote-endpoint = <&dsi_in_vp0>;
+				};
+
+				vp0_out_lvds: endpoint@2 {
+					reg = <2>;
+					remote-endpoint = <&lvds_in_vp0>;
+				};
+			};
+
+			port@1 {
+				#address-cells = <1>;
+				#size-cells = <0>;
+				reg = <1>;
+
+				vp1_out_rgb: endpoint@0 {
+					reg = <0>;
+					remote-endpoint = <&rgb_in_vp1>;
+				};
+
+				vp1_out_dsi: endpoint@1 {
+					reg = <1>;
+					remote-endpoint = <&dsi_in_vp1>;
+				};
+
+				vp1_out_lvds: endpoint@2 {
+					reg = <2>;
+					remote-endpoint = <&lvds_in_vp1>;
+				};
+			};
+		};
+	};
+
+	vop_mmu: iommu@ff407e00 {
+		compatible = "rockchip,iommu-v2";
+		reg = <0x0 0xff407e00 0x0 0x100>;
+		interrupts = <GIC_SPI 135 IRQ_TYPE_LEVEL_HIGH>;
+		interrupt-names = "vop_mmu";
+		clocks = <&cru ACLK_VOP>, <&cru HCLK_VOP>;
+		clock-names = "aclk", "iface";
+		#iommu-cells = <0>;
+		rockchip,disable-device-link-resume;
+		rockchip,shootdown-entire;
+		status = "disabled";
+	};
+
+	rga2: rga@ff440000 {
+		compatible = "rockchip,rga2_core0";
+		reg = <0x0 0xff440000 0x0 0x1000>;
+		interrupts = <GIC_SPI 126 IRQ_TYPE_LEVEL_HIGH>;
+		interrupt-names = "rga2_irq";
+		clocks = <&cru ACLK_RGA>, <&cru HCLK_RGA>, <&cru CLK_RGA_CORE>;
+		clock-names = "aclk_rga2", "hclk_rga2", "clk_rga2";
+		iommus = <&rga2_mmu>;
+		power-domains = <&power RK3562_PD_RGA>;
+		status = "disabled";
+	};
+
+	rga2_mmu: iommu@ff440f00 {
+		compatible = "rockchip,iommu-v2";
+		reg = <0x0 0xff440f00 0x0 0x100>;
+		interrupts = <GIC_SPI 126 IRQ_TYPE_LEVEL_HIGH>;
+		interrupt-names = "rga2_mmu";
+		clocks = <&cru ACLK_RGA>, <&cru HCLK_RGA>;
+		clock-names = "aclk", "iface";
+		#iommu-cells = <0>;
+		power-domains = <&power RK3562_PD_RGA>;
+		status = "disabled";
+	};
+
+	jpegd: jpegd@ff450000 {
+		compatible = "rockchip,rkv-jpeg-decoder-v1";
+		reg = <0x0 0xff450000 0x0 0x400>;
+		interrupts = <GIC_SPI 121 IRQ_TYPE_LEVEL_HIGH>;
+		clocks = <&cru ACLK_JDEC>, <&cru HCLK_JDEC>;
+		clock-names = "aclk_vcodec", "hclk_vcodec";
+		rockchip,disable-auto-freq;
+		resets = <&cru SRST_A_JDEC>, <&cru SRST_H_JDEC>;
+		reset-names = "video_a", "video_h";
+		power-domains = <&power RK3562_PD_RGA>;
+		iommus = <&jpegd_mmu>;
+		rockchip,srv = <&mpp_srv>;
+		rockchip,taskqueue-node = <2>;
+		rockchip,resetgroup-node = <2>;
+		status = "disabled";
+	};
+
+	jpegd_mmu: iommu@ff450480 {
+		compatible = "rockchip,iommu-v2";
+		reg = <0x0 0xff450480 0x0 0x40>;
+		interrupts = <GIC_SPI 120 IRQ_TYPE_LEVEL_HIGH>;
+		interrupt-names = "jpegd_mmu";
+		clock-names = "aclk", "iface";
+		clocks = <&cru ACLK_JDEC>, <&cru HCLK_JDEC>;
+		power-domains = <&power RK3562_PD_RGA>;
+		#iommu-cells = <0>;
+		status = "disabled";
+	};
+
+	pcie2x1: pcie@ff500000 {
+		compatible = "rockchip,rk3562-pcie", "snps,dw-pcie";
+		#address-cells = <3>;
+		#size-cells = <2>;
+		bus-range = <0x0 0xff>;
+		clocks = <&cru ACLK_PCIE20_MST>, <&cru ACLK_PCIE20_SLV>,
+			 <&cru ACLK_PCIE20_DBI>, <&cru PCLK_PCIE20>,
+			 <&cru CLK_PCIE20_AUX>;
+		clock-names = "aclk_mst", "aclk_slv",
+			      "aclk_dbi", "pclk", "aux";
+		device_type = "pci";
+		interrupts = <GIC_SPI 146 IRQ_TYPE_LEVEL_HIGH>,
+			     <GIC_SPI 145 IRQ_TYPE_LEVEL_HIGH>,
+			     <GIC_SPI 144 IRQ_TYPE_LEVEL_HIGH>,
+			     <GIC_SPI 143 IRQ_TYPE_LEVEL_HIGH>,
+			     <GIC_SPI 142 IRQ_TYPE_LEVEL_HIGH>,
+			     <GIC_SPI 141 IRQ_TYPE_LEVEL_HIGH>;
+		interrupt-names = "msi", "pmc", "sys", "legacy", "msg", "err";
+		#interrupt-cells = <1>;
+		interrupt-map-mask = <0 0 0 7>;
+		interrupt-map = <0 0 0 1 &pcie2x1_intc 0>,
+				<0 0 0 2 &pcie2x1_intc 1>,
+				<0 0 0 3 &pcie2x1_intc 2>,
+				<0 0 0 4 &pcie2x1_intc 3>;
+		linux,pci-domain = <0>;
+		num-ib-windows = <8>;
+		num-viewport = <8>;
+		num-ob-windows = <2>;
+		max-link-speed = <2>;
+		num-lanes = <1>;
+		phys = <&combphy_pu PHY_TYPE_PCIE>;
+		phy-names = "pcie-phy";
+		ranges = <0x00000800 0x0 0xfc000000 0x0 0xfc000000 0x0 0x100000
+			  0x81000000 0x0 0xfc100000 0x0 0xfc100000 0x0 0x100000
+			  0x82000000 0x0 0xfc200000 0x0 0xfc200000 0x0 0x1e00000
+			  0xc3000000 0x3 0x00000000 0x3 0x00000000 0x0 0x40000000>;
+		reg = <0x0 0xfe000000 0x0 0x400000>,
+		      <0x0 0xff500000 0x0 0x10000>;
+		reg-names = "pcie-dbi", "pcie-apb";
+		resets = <&cru SRST_PCIE20_POWERUP>;
+		reset-names = "pipe";
+		status = "disabled";
+
+		pcie2x1_intc: legacy-interrupt-controller {
+			interrupt-controller;
+			#address-cells = <0>;
+			#interrupt-cells = <1>;
+			interrupt-parent = <&gic>;
+		};
+	};
+
+	spi1: spi@ff640000 {
+		compatible = "rockchip,rk3066-spi";
+		reg = <0x0 0xff640000 0x0 0x1000>;
+		interrupts = <GIC_SPI 53 IRQ_TYPE_LEVEL_HIGH>;
+		#address-cells = <1>;
+		#size-cells = <0>;
+		clocks = <&cru CLK_SPI1>, <&cru PCLK_SPI1>;
+		clock-names = "spiclk", "apb_pclk";
+		dmas = <&dmac 15>, <&dmac 14>;
+		dma-names = "tx", "rx";
+		pinctrl-names = "default";
+		pinctrl-0 = <&spi1m0_csn0 &spi1m0_csn1 &spi1m0_pins>;
+		num-cs = <2>;
+		status = "disabled";
+	};
+
+	spi2: spi@ff650000 {
+		compatible = "rockchip,rk3066-spi";
+		reg = <0x0 0xff650000 0x0 0x1000>;
+		interrupts = <GIC_SPI 54 IRQ_TYPE_LEVEL_HIGH>;
+		#address-cells = <1>;
+		#size-cells = <0>;
+		clocks = <&cru CLK_SPI2>, <&cru PCLK_SPI2>;
+		clock-names = "spiclk", "apb_pclk";
+		dmas = <&dmac 17>, <&dmac 16>;
+		dma-names = "tx", "rx";
+		pinctrl-names = "default";
+		pinctrl-0 = <&spi2m0_csn0 &spi2m0_csn1 &spi2m0_pins>;
+		num-cs = <2>;
+		status = "disabled";
+	};
+
+	uart1: serial@ff670000 {
+		compatible = "rockchip,rk3562-uart", "snps,dw-apb-uart";
+		reg = <0x0 0xff670000 0x0 0x100>;
+		interrupts = <GIC_SPI 31 IRQ_TYPE_LEVEL_HIGH>;
+		clocks = <&cru SCLK_UART1>, <&cru PCLK_UART1>;
+		clock-names = "baudclk", "apb_pclk";
+		reg-shift = <2>;
+		reg-io-width = <4>;
+		dmas = <&dmac 1>, <&dmac 10>;
+		status = "disabled";
+	};
+
+	uart2: serial@ff680000 {
+		compatible = "rockchip,rk3562-uart", "snps,dw-apb-uart";
+		reg = <0x0 0xff680000 0x0 0x100>;
+		interrupts = <GIC_SPI 32 IRQ_TYPE_LEVEL_HIGH>;
+		clocks = <&cru SCLK_UART2>, <&cru PCLK_UART2>;
+		clock-names = "baudclk", "apb_pclk";
+		reg-shift = <2>;
+		reg-io-width = <4>;
+		dmas = <&dmac 2>;
+		status = "disabled";
+	};
+
+	uart3: serial@ff690000 {
+		compatible = "rockchip,rk3562-uart", "snps,dw-apb-uart";
+		reg = <0x0 0xff690000 0x0 0x100>;
+		interrupts = <GIC_SPI 33 IRQ_TYPE_LEVEL_HIGH>;
+		clocks = <&cru SCLK_UART3>, <&cru PCLK_UART3>;
+		clock-names = "baudclk", "apb_pclk";
+		reg-shift = <2>;
+		reg-io-width = <4>;
+		dmas = <&dmac 3>;
+		status = "disabled";
+	};
+
+	uart4: serial@ff6a0000 {
+		compatible = "rockchip,rk3562-uart", "snps,dw-apb-uart";
+		reg = <0x0 0xff6a0000 0x0 0x100>;
+		interrupts = <GIC_SPI 34 IRQ_TYPE_LEVEL_HIGH>;
+		clocks = <&cru SCLK_UART4>, <&cru PCLK_UART4>;
+		clock-names = "baudclk", "apb_pclk";
+		reg-shift = <2>;
+		reg-io-width = <4>;
+		dmas = <&dmac 4>;
+		status = "disabled";
+	};
+
+	uart5: serial@ff6b0000 {
+		compatible = "rockchip,rk3562-uart", "snps,dw-apb-uart";
+		reg = <0x0 0xff6b0000 0x0 0x100>;
+		interrupts = <GIC_SPI 35 IRQ_TYPE_LEVEL_HIGH>;
+		clocks = <&cru SCLK_UART5>, <&cru PCLK_UART5>;
+		clock-names = "baudclk", "apb_pclk";
+		reg-shift = <2>;
+		reg-io-width = <4>;
+		dmas = <&dmac 5>, <&dmac 11>;
+		status = "disabled";
+	};
+
+	uart6: serial@ff6c0000 {
+		compatible = "rockchip,rk3562-uart", "snps,dw-apb-uart";
+		reg = <0x0 0xff6c0000 0x0 0x100>;
+		interrupts = <GIC_SPI 36 IRQ_TYPE_LEVEL_HIGH>;
+		clocks = <&cru SCLK_UART6>, <&cru PCLK_UART6>;
+		clock-names = "baudclk", "apb_pclk";
+		reg-shift = <2>;
+		reg-io-width = <4>;
+		dmas = <&dmac 6>;
+		status = "disabled";
+	};
+
+	uart7: serial@ff6d0000 {
+		compatible = "rockchip,rk3562-uart", "snps,dw-apb-uart";
+		reg = <0x0 0xff6d0000 0x0 0x100>;
+		interrupts = <GIC_SPI 37 IRQ_TYPE_LEVEL_HIGH>;
+		clocks = <&cru SCLK_UART7>, <&cru PCLK_UART7>;
+		clock-names = "baudclk", "apb_pclk";
+		reg-shift = <2>;
+		reg-io-width = <4>;
+		dmas = <&dmac 7>;
+		status = "disabled";
+	};
+
+	uart8: serial@ff6e0000 {
+		compatible = "rockchip,rk3562-uart", "snps,dw-apb-uart";
+		reg = <0x0 0xff6e0000 0x0 0x100>;
+		interrupts = <GIC_SPI 38 IRQ_TYPE_LEVEL_HIGH>;
+		clocks = <&cru SCLK_UART8>, <&cru PCLK_UART8>;
+		clock-names = "baudclk", "apb_pclk";
+		reg-shift = <2>;
+		reg-io-width = <4>;
+		dmas = <&dmac 8>;
+		status = "disabled";
+	};
+
+	uart9: serial@ff6f0000 {
+		compatible = "rockchip,rk3562-uart", "snps,dw-apb-uart";
+		reg = <0x0 0xff6f0000 0x0 0x100>;
+		interrupts = <GIC_SPI 39 IRQ_TYPE_LEVEL_HIGH>;
+		clocks = <&cru SCLK_UART9>, <&cru PCLK_UART9>;
+		clock-names = "baudclk", "apb_pclk";
+		reg-shift = <2>;
+		reg-io-width = <4>;
+		dmas = <&dmac 9>;
+		status = "disabled";
+	};
+
+	pwm4: pwm@ff700000 {
+		compatible = "rockchip,rk3562-pwm", "rockchip,rk3328-pwm";
+		reg = <0x0 0xff700000 0x0 0x10>;
+		#pwm-cells = <3>;
+		pinctrl-names = "active";
+		pinctrl-0 = <&pwm4m0_pins>;
+		clocks = <&cru CLK_PWM1_PERI>, <&cru PCLK_PWM1_PERI>;
+		clock-names = "pwm", "pclk";
+		status = "disabled";
+	};
+
+	pwm5: pwm@ff700010 {
+		compatible = "rockchip,rk3562-pwm", "rockchip,rk3328-pwm";
+		reg = <0x0 0xff700010 0x0 0x10>;
+		#pwm-cells = <3>;
+		pinctrl-names = "active";
+		pinctrl-0 = <&pwm5m0_pins>;
+		clocks = <&cru CLK_PWM1_PERI>, <&cru PCLK_PWM1_PERI>;
+		clock-names = "pwm", "pclk";
+		status = "disabled";
+	};
+
+	pwm6: pwm@ff700020 {
+		compatible = "rockchip,rk3562-pwm", "rockchip,rk3328-pwm";
+		reg = <0x0 0xff700020 0x0 0x10>;
+		#pwm-cells = <3>;
+		pinctrl-names = "active";
+		pinctrl-0 = <&pwm6m0_pins>;
+		clocks = <&cru CLK_PWM1_PERI>, <&cru PCLK_PWM1_PERI>;
+		clock-names = "pwm", "pclk";
+		status = "disabled";
+	};
+
+	pwm7: pwm@ff700030 {
+		compatible = "rockchip,rk3562-pwm", "rockchip,rk3328-pwm";
+		reg = <0x0 0xff700030 0x0 0x10>;
+		interrupts = <GIC_SPI 22 IRQ_TYPE_LEVEL_HIGH>,
+			     <GIC_SPI 23 IRQ_TYPE_LEVEL_HIGH>;
+		#pwm-cells = <3>;
+		pinctrl-names = "active";
+		pinctrl-0 = <&pwm7m0_pins>;
+		clocks = <&cru CLK_PWM1_PERI>, <&cru PCLK_PWM1_PERI>;
+		clock-names = "pwm", "pclk";
+		status = "disabled";
+	};
+
+	pwm8: pwm@ff710000 {
+		compatible = "rockchip,rk3562-pwm", "rockchip,rk3328-pwm";
+		reg = <0x0 0xff710000 0x0 0x10>;
+		#pwm-cells = <3>;
+		pinctrl-names = "active";
+		pinctrl-0 = <&pwm8m0_pins>;
+		clocks = <&cru CLK_PWM2_PERI>, <&cru PCLK_PWM2_PERI>;
+		clock-names = "pwm", "pclk";
+		status = "disabled";
+	};
+
+	pwm9: pwm@ff710010 {
+		compatible = "rockchip,rk3562-pwm", "rockchip,rk3328-pwm";
+		reg = <0x0 0xff710010 0x0 0x10>;
+		#pwm-cells = <3>;
+		pinctrl-names = "active";
+		pinctrl-0 = <&pwm9m0_pins>;
+		clocks = <&cru CLK_PWM2_PERI>, <&cru PCLK_PWM2_PERI>;
+		clock-names = "pwm", "pclk";
+		status = "disabled";
+	};
+
+	pwm10: pwm@ff710020 {
+		compatible = "rockchip,rk3562-pwm", "rockchip,rk3328-pwm";
+		reg = <0x0 0xff710020 0x0 0x10>;
+		#pwm-cells = <3>;
+		pinctrl-names = "active";
+		pinctrl-0 = <&pwm10m0_pins>;
+		clocks = <&cru CLK_PWM2_PERI>, <&cru PCLK_PWM2_PERI>;
+		clock-names = "pwm", "pclk";
+		status = "disabled";
+	};
+
+	pwm11: pwm@ff710030 {
+		compatible = "rockchip,rk3562-pwm", "rockchip,rk3328-pwm";
+		reg = <0x0 0xff710030 0x0 0x10>;
+		interrupts = <GIC_SPI 24 IRQ_TYPE_LEVEL_HIGH>,
+			     <GIC_SPI 25 IRQ_TYPE_LEVEL_HIGH>;
+		#pwm-cells = <3>;
+		pinctrl-names = "active";
+		pinctrl-0 = <&pwm11m0_pins>;
+		clocks = <&cru CLK_PWM2_PERI>, <&cru PCLK_PWM2_PERI>;
+		clock-names = "pwm", "pclk";
+		status = "disabled";
+	};
+
+	pwm12: pwm@ff720000 {
+		compatible = "rockchip,rk3562-pwm", "rockchip,rk3328-pwm";
+		reg = <0x0 0xff720000 0x0 0x10>;
+		#pwm-cells = <3>;
+		pinctrl-names = "active";
+		pinctrl-0 = <&pwm12m0_pins>;
+		clocks = <&cru CLK_PWM3_PERI>, <&cru PCLK_PWM3_PERI>;
+		clock-names = "pwm", "pclk";
+		status = "disabled";
+	};
+
+	pwm13: pwm@ff720010 {
+		compatible = "rockchip,rk3562-pwm", "rockchip,rk3328-pwm";
+		reg = <0x0 0xff720010 0x0 0x10>;
+		#pwm-cells = <3>;
+		pinctrl-names = "active";
+		pinctrl-0 = <&pwm13m0_pins>;
+		clocks = <&cru CLK_PWM3_PERI>, <&cru PCLK_PWM3_PERI>;
+		clock-names = "pwm", "pclk";
+		status = "disabled";
+	};
+
+	pwm14: pwm@ff720020 {
+		compatible = "rockchip,rk3562-pwm", "rockchip,rk3328-pwm";
+		reg = <0x0 0xff720020 0x0 0x10>;
+		#pwm-cells = <3>;
+		pinctrl-names = "active";
+		pinctrl-0 = <&pwm14m0_pins>;
+		clocks = <&cru CLK_PWM3_PERI>, <&cru PCLK_PWM3_PERI>;
+		clock-names = "pwm", "pclk";
+		status = "disabled";
+	};
+
+	pwm15: pwm@ff720030 {
+		compatible = "rockchip,rk3562-pwm", "rockchip,rk3328-pwm";
+		reg = <0x0 0xff720030 0x0 0x10>;
+		interrupts = <GIC_SPI 26 IRQ_TYPE_LEVEL_HIGH>,
+			     <GIC_SPI 27 IRQ_TYPE_LEVEL_HIGH>;
+		#pwm-cells = <3>;
+		pinctrl-names = "active";
+		pinctrl-0 = <&pwm15m0_pins>;
+		clocks = <&cru CLK_PWM3_PERI>, <&cru PCLK_PWM3_PERI>;
+		clock-names = "pwm", "pclk";
+		status = "disabled";
+	};
+
+	saradc0: saradc@ff730000 {
+		compatible = "rockchip,rk3562-saradc";
+		reg = <0x0 0xff730000 0x0 0x100>;
+		interrupts = <GIC_SPI 40 IRQ_TYPE_LEVEL_HIGH>;
+		#io-channel-cells = <1>;
+		clocks = <&cru CLK_SARADC>, <&cru PCLK_SARADC>;
+		clock-names = "saradc", "apb_pclk";
+		resets = <&cru SRST_P_SARADC>;
+		reset-names = "saradc-apb";
+		status = "disabled";
+	};
+
+	u2phy: usb2-phy@ff740000 {
+		compatible = "rockchip,rk3562-usb2phy";
+		reg = <0x0 0xff740000 0x0 0x10000>;
+		clocks = <&cru CLK_USB2PHY_REF>, <&cru PCLK_USB2PHY>;
+		clock-names = "phyclk", "pclk";
+		#clock-cells = <0>;
+		clock-output-names = "usb480m_phy";
+		rockchip,usbgrf = <&usbphy_grf>;
+		status = "disabled";
+
+		u2phy_otg: otg-port {
+			#phy-cells = <0>;
+			interrupts = <GIC_SPI 153 IRQ_TYPE_LEVEL_HIGH>,
+				     <GIC_SPI 154 IRQ_TYPE_LEVEL_HIGH>,
+				     <GIC_SPI 155 IRQ_TYPE_LEVEL_HIGH>;
+			interrupt-names = "otg-bvalid", "otg-id", "linestate";
+			status = "disabled";
+		};
+
+		u2phy_host: host-port {
+			#phy-cells = <0>;
+			interrupts = <GIC_SPI 156 IRQ_TYPE_LEVEL_HIGH>;
+			interrupt-names = "linestate";
+			status = "disabled";
+		};
+	};
+
+	combphy_pu: phy@ff750000 {
+		compatible = "rockchip,rk3562-naneng-combphy";
+		reg = <0x0 0xff750000 0x0 0x100>;
+		#phy-cells = <1>;
+		clocks = <&cru CLK_PIPEPHY_REF>, <&cru PCLK_PIPEPHY>,
+			 <&cru PCLK_PHP>;
+		clock-names = "refclk", "apbclk", "pipe_clk";
+		assigned-clocks = <&cru CLK_PIPEPHY_REF>;
+		assigned-clock-rates = <100000000>;
+		resets = <&cru SRST_P_PIPEPHY>, <&cru SRST_PIPEPHY>;
+		reset-names = "combphy-apb", "combphy";
+		rockchip,pipe-grf = <&peri_grf>;
+		rockchip,pipe-phy-grf = <&pipephy_grf>;
+		status = "disabled";
+	};
+
+	sai0: sai@ff800000 {
+		compatible = "rockchip,rk3562-sai", "rockchip,sai-v1";
+		reg = <0x0 0xff800000 0x0 0x1000>;
+		interrupts = <GIC_SPI 78 IRQ_TYPE_LEVEL_HIGH>;
+		clocks = <&cru MCLK_SAI0>, <&cru HCLK_SAI0>;
+		clock-names = "mclk", "hclk";
+		dmas = <&dmac 19>, <&dmac 18>;
+		dma-names = "tx", "rx";
+		resets = <&cru SRST_M_SAI0_8CH>, <&cru SRST_H_SAI0_8CH>;
+		reset-names = "m", "h";
+		pinctrl-names = "default";
+		pinctrl-0 = <&i2s0m0_lrck
+			     &i2s0m0_sclk
+			     &i2s0m0_sdi0
+			     &i2s0m0_sdo0
+			     &i2s0m0_sdo1
+			     &i2s0m0_sdo2
+			     &i2s0m0_sdo3>;
+		#sound-dai-cells = <0>;
+		status = "disabled";
+	};
+
+	sai1: sai@ff810000 {
+		compatible = "rockchip,rk3562-sai", "rockchip,sai-v1";
+		reg = <0x0 0xff810000 0x0 0x1000>;
+		interrupts = <GIC_SPI 79 IRQ_TYPE_LEVEL_HIGH>;
+		clocks = <&cru MCLK_SAI1>, <&cru HCLK_SAI1>;
+		clock-names = "mclk", "hclk";
+		dmas = <&dmac 21>, <&dmac 20>;
+		dma-names = "tx", "rx";
+		resets = <&cru SRST_M_SAI1_8CH>, <&cru SRST_H_SAI1_8CH>;
+		reset-names = "m", "h";
+		pinctrl-names = "default";
+		pinctrl-0 = <&i2s1m0_lrck
+			     &i2s1m0_sclk
+			     &i2s1m0_sdi0
+			     &i2s1m0_sdi1
+			     &i2s1m0_sdi2
+			     &i2s1m0_sdi3
+			     &i2s1m0_sdo0
+			     &i2s1m0_sdo1
+			     &i2s1m0_sdo2
+			     &i2s1m0_sdo3>;
+		#sound-dai-cells = <0>;
+		status = "disabled";
+	};
+
+	sai2: sai@ff820000 {
+		compatible = "rockchip,rk3562-sai", "rockchip,sai-v1";
+		reg = <0x0 0xff820000 0x0 0x1000>;
+		interrupts = <GIC_SPI 80 IRQ_TYPE_LEVEL_HIGH>;
+		clocks = <&cru MCLK_SAI2>, <&cru HCLK_SAI2>;
+		clock-names = "mclk", "hclk";
+		dmas = <&dmac 23>, <&dmac 22>;
+		dma-names = "tx", "rx";
+		resets = <&cru SRST_M_SAI2_2CH>, <&cru SRST_H_SAI2_2CH>;
+		reset-names = "m", "h";
+		pinctrl-names = "default";
+		pinctrl-0 = <&i2s2m0_lrck
+			     &i2s2m0_sclk
+			     &i2s2m0_sdi
+			     &i2s2m0_sdo>;
+		#sound-dai-cells = <0>;
+		status = "disabled";
+	};
+
+	pdm: pdm@ff830000 {
+		compatible = "rockchip,rk3562-pdm", "rockchip,pdm";
+		reg = <0x0 0xff830000 0x0 0x1000>;
+		clocks = <&cru MCLK_PDM>, <&cru HCLK_PDM>;
+		clock-names = "pdm_clk", "pdm_hclk";
+		dmas = <&dmac 31>;
+		dma-names = "rx";
+		pinctrl-names = "default";
+		pinctrl-0 = <&pdmm0_clk0
+			     &pdmm0_clk1
+			     &pdmm0_sdi0
+			     &pdmm0_sdi1
+			     &pdmm0_sdi2
+			     &pdmm0_sdi3>;
+		#sound-dai-cells = <0>;
+		status = "disabled";
+	};
+
+	spdif_8ch: spdif@ff840000 {
+		compatible = "rockchip,rk3562-spdif", "rockchip,rk3568-spdif";
+		reg = <0x0 0xff840000 0x0 0x1000>;
+		interrupts = <GIC_SPI 127 IRQ_TYPE_LEVEL_HIGH>;
+		dmas = <&dmac 30>;
+		dma-names = "tx";
+		clock-names = "mclk", "hclk";
+		clocks = <&cru MCLK_SPDIF>, <&cru HCLK_SPDIF>;
+		#sound-dai-cells = <0>;
+		pinctrl-names = "default";
+		pinctrl-0 = <&spdifm0_pins>;
+		status = "disabled";
+	};
+
+	acdcdig_dsm: codec-digital@ff850000 {
+		compatible = "rockchip,rk3562-codec-digital", "rockchip,codec-digital-v1";
+		reg = <0x0 0xff850000 0x0 0x1000>;
+		clocks = <&cru CLK_DSM>, <&cru HCLK_DSM>;
+		clock-names = "dac", "pclk";
+		resets = <&cru SRST_DSM>;
+		reset-names = "reset" ;
+		rockchip,grf = <&sys_grf>;
+		rockchip,pwm-output-mode;
+		pinctrl-names = "default";
+		pinctrl-0 = <&dsm_pins>;
+		#sound-dai-cells = <0>;
+		status = "disabled";
+	};
+
+	sfc: spi@ff860000 {
+		compatible = "rockchip,sfc";
+		reg = <0x0 0xff860000 0x0 0x10000>;
+		interrupts = <GIC_SPI 128 IRQ_TYPE_LEVEL_HIGH>;
+		clocks = <&cru SCLK_SFC>, <&cru HCLK_SFC>;
+		clock-names = "clk_sfc", "hclk_sfc";
+		assigned-clocks = <&cru SCLK_SFC>;
+		assigned-clock-rates = <100000000>;
+		#address-cells = <1>;
+		#size-cells = <0>;
+		status = "disabled";
+	};
+
+	sdhci: mmc@ff870000 {
+		compatible = "rockchip,rk3562-dwcmshc", "rockchip,rk3528-dwcmshc";
+		reg = <0x0 0xff870000 0x0 0x10000>;
+		interrupts = <GIC_SPI 63 IRQ_TYPE_LEVEL_HIGH>;
+		assigned-clocks = <&cru BCLK_EMMC>, <&cru CCLK_EMMC>;
+		assigned-clock-rates = <200000000>, <200000000>;
+		clocks = <&cru CCLK_EMMC>, <&cru HCLK_EMMC>,
+			 <&cru ACLK_EMMC>, <&cru BCLK_EMMC>,
+			 <&cru TMCLK_EMMC>;
+		clock-names = "core", "bus", "axi", "block", "timer";
+		resets = <&cru SRST_C_EMMC>, <&cru SRST_H_EMMC>,
+			 <&cru SRST_A_EMMC>, <&cru SRST_B_EMMC>,
+			 <&cru SRST_T_EMMC>;
+		reset-names = "core", "bus", "axi", "block", "timer";
+		max-frequency = <200000000>;
+		status = "disabled";
+	};
+
+	sdmmc0: mmc@ff880000 {
+		compatible = "rockchip,rk3562-dw-mshc",
+			     "rockchip,rk3288-dw-mshc";
+		reg = <0x0 0xff880000 0x0 0x10000>;
+		interrupts = <GIC_SPI 56 IRQ_TYPE_LEVEL_HIGH>;
+		max-frequency = <150000000>;
+		clocks = <&cru HCLK_SDMMC0>, <&cru CCLK_SDMMC0>,
+			 <&cru SCLK_SDMMC0_DRV>, <&cru SCLK_SDMMC0_SAMPLE>;
+		clock-names = "biu", "ciu", "ciu-drive", "ciu-sample";
+		resets = <&cru SRST_H_SDMMC0>;
+		reset-names = "reset";
+		fifo-depth = <0x100>;
+		status = "disabled";
+	};
+
+	sdmmc1: mmc@ff890000 {
+		compatible = "rockchip,rk3562-dw-mshc",
+			     "rockchip,rk3288-dw-mshc";
+		reg = <0x0 0xff890000 0x0 0x10000>;
+		interrupts = <GIC_SPI 57 IRQ_TYPE_LEVEL_HIGH>;
+		max-frequency = <150000000>;
+		clocks = <&cru HCLK_SDMMC1>, <&cru CCLK_SDMMC1>,
+			 <&cru SCLK_SDMMC1_DRV>, <&cru SCLK_SDMMC1_SAMPLE>;
+		clock-names = "biu", "ciu", "ciu-drive", "ciu-sample";
+		resets = <&cru SRST_H_SDMMC1>;
+		reset-names = "reset";
+		fifo-depth = <0x100>;
+		status = "disabled";
+	};
+
+	crypto: crypto@ff8a0000 {
+		compatible = "rockchip,crypto-v4";
+		reg = <0x0 0xff8a0000 0x0 0x2000>;
+		interrupts = <GIC_SPI 116 IRQ_TYPE_LEVEL_HIGH>;
+		clocks = <&scmi_clk CLK_CORE_CRYPTO>, <&scmi_clk CLK_PKA_CRYPTO>,
+			 <&scmi_clk ACLK_CRYPTO>, <&scmi_clk HCLK_CRYPTO>,
+			 <&scmi_clk PCLK_CRYPTO>;
+		clock-names = "sclk", "pka", "aclk", "pclk", "pclk";
+		assigned-clocks = <&scmi_clk CLK_CORE_CRYPTO>, <&scmi_clk CLK_PKA_CRYPTO>;
+		assigned-clock-rates = <200000000>, <300000000>;
+		resets = <&cru SRST_CORE_CRYPTO>;
+		reset-names = "crypto-rst";
+		status = "disabled";
+	};
+
+	rng: rng@ff8e0000 {
+		compatible = "rockchip,rkrng";
+		reg = <0x0 0xff8e0000 0x0 0x200>;
+		interrupts = <GIC_SPI 93 IRQ_TYPE_LEVEL_HIGH>;
+		clocks = <&scmi_clk HCLK_RK_RNG_NS>;
+		clock-names = "hclk_trng";
+		resets = <&cru SRST_H_RK_RNG_NS>;
+		reset-names = "reset";
+		status = "disabled";
+	};
+
+	otp: otp@ff930000 {
+		compatible = "rockchip,rk3562-otp";
+		reg = <0x0 0xff930000 0x0 0x4000>;
+		#address-cells = <1>;
+		#size-cells = <1>;
+		clocks = <&cru CLK_USER_OTPC_NS>, <&cru CLK_SBPI_OTPC_NS>,
+			 <&cru PCLK_OTPC_NS>, <&cru CLK_OTPC_ARB>,
+			 <&cru PCLK_OTPPHY>;
+		clock-names = "usr", "sbpi", "apb", "arb", "phy";
+		resets = <&cru SRST_USER_OTPC_NS>, <&cru SRST_SBPI_OTPC_NS>,
+			 <&cru SRST_P_OTPC_NS>, <&cru SRST_OTPC_ARB>,
+			 <&cru SRST_P_OTPPHY>;
+		reset-names = "usr", "sbpi", "apb", "arb", "phy";
+
+		/* Data cells */
+		cpu_code: cpu-code@2 {
+			reg = <0x02 0x2>;
+		};
+		otp_cpu_version: cpu-version@8 {
+			reg = <0x08 0x1>;
+			bits = <3 3>;
+		};
+		otp_id: id@a {
+			reg = <0x0a 0x10>;
+		};
+		cpu_leakage: cpu-leakage@1a {
+			reg = <0x1a 0x1>;
+		};
+		log_leakage: log-leakage@1b {
+			reg = <0x1b 0x1>;
+		};
+		npu_leakage: npu-leakage@1c {
+			reg = <0x1c 0x1>;
+		};
+		gpu_leakage: gpu-leakage@1d {
+			reg = <0x1d 0x1>;
+		};
+	};
+
+	dmac: dma-controller@ff990000 {
+		compatible = "arm,pl330", "arm,primecell";
+		reg = <0x0 0xff990000 0x0 0x4000>;
+		interrupts = <GIC_SPI 111 IRQ_TYPE_LEVEL_HIGH>,
+			     <GIC_SPI 110 IRQ_TYPE_LEVEL_HIGH>;
+		clocks = <&cru ACLK_DMAC>;
+		clock-names = "apb_pclk";
+		#dma-cells = <1>;
+		arm,pl330-periph-burst;
+	};
+
+	hwlock: hwspinlock@ff9e0000 {
+		compatible = "rockchip,hwspinlock";
+		reg = <0x0 0xff9e0000 0x0 0x100>;
+		#hwlock-cells = <1>;
+		status = "disabled";
+	};
+
+	i2c1: i2c@ffa00000 {
+		compatible = "rockchip,rk3562-i2c", "rockchip,rk3399-i2c";
+		reg = <0x0 0xffa00000 0x0 0x1000>;
+		clocks = <&cru CLK_I2C1>, <&cru PCLK_I2C1>;
+		clock-names = "i2c", "pclk";
+		interrupts = <GIC_SPI 13 IRQ_TYPE_LEVEL_HIGH>;
+		pinctrl-names = "default";
+		pinctrl-0 = <&i2c1m0_xfer>;
+		#address-cells = <1>;
+		#size-cells = <0>;
+		status = "disabled";
+	};
+
+	i2c2: i2c@ffa10000 {
+		compatible = "rockchip,rk3562-i2c", "rockchip,rk3399-i2c";
+		reg = <0x0 0xffa10000 0x0 0x1000>;
+		clocks = <&cru CLK_I2C2>, <&cru PCLK_I2C2>;
+		clock-names = "i2c", "pclk";
+		interrupts = <GIC_SPI 14 IRQ_TYPE_LEVEL_HIGH>;
+		pinctrl-names = "default";
+		pinctrl-0 = <&i2c2m0_xfer>;
+		#address-cells = <1>;
+		#size-cells = <0>;
+		status = "disabled";
+	};
+
+	i2c3: i2c@ffa20000 {
+		compatible = "rockchip,rk3562-i2c", "rockchip,rk3399-i2c";
+		reg = <0x0 0xffa20000 0x0 0x1000>;
+		clocks = <&cru CLK_I2C3>, <&cru PCLK_I2C3>;
+		clock-names = "i2c", "pclk";
+		interrupts = <GIC_SPI 15 IRQ_TYPE_LEVEL_HIGH>;
+		pinctrl-names = "default";
+		pinctrl-0 = <&i2c3m0_xfer>;
+		#address-cells = <1>;
+		#size-cells = <0>;
+		status = "disabled";
+	};
+
+	i2c4: i2c@ffa30000 {
+		compatible = "rockchip,rk3562-i2c", "rockchip,rk3399-i2c";
+		reg = <0x0 0xffa30000 0x0 0x1000>;
+		clocks = <&cru CLK_I2C4>, <&cru PCLK_I2C4>;
+		clock-names = "i2c", "pclk";
+		interrupts = <GIC_SPI 16 IRQ_TYPE_LEVEL_HIGH>;
+		pinctrl-names = "default";
+		pinctrl-0 = <&i2c4m0_xfer>;
+		#address-cells = <1>;
+		#size-cells = <0>;
+		status = "disabled";
+	};
+
+	i2c5: i2c@ffa40000 {
+		compatible = "rockchip,rk3562-i2c", "rockchip,rk3399-i2c";
+		reg = <0x0 0xffa40000 0x0 0x1000>;
+		clocks = <&cru CLK_I2C5>, <&cru PCLK_I2C5>;
+		clock-names = "i2c", "pclk";
+		interrupts = <GIC_SPI 17 IRQ_TYPE_LEVEL_HIGH>;
+		pinctrl-names = "default";
+		pinctrl-0 = <&i2c5m0_xfer>;
+		#address-cells = <1>;
+		#size-cells = <0>;
+		status = "disabled";
+	};
+
+	wdt: watchdog@ffa60000 {
+		compatible = "snps,dw-wdt";
+		reg = <0x0 0xffa60000 0x0 0x100>;
+		clocks = <&cru CLK_WDTNS>, <&cru PCLK_WDTNS>;
+		clock-names = "tclk", "pclk";
+		interrupts = <GIC_SPI 102 IRQ_TYPE_LEVEL_HIGH>;
+		status = "disabled";
+	};
+
+	tsadc: tsadc@ffa70000 {
+		compatible = "rockchip,rk3562-tsadc";
+		reg = <0x0 0xffa70000 0x0 0x400>;
+		rockchip,grf = <&sys_grf>;
+		interrupts = <GIC_SPI 125 IRQ_TYPE_LEVEL_HIGH>;
+		clocks = <&cru CLK_TSADC>, <&cru CLK_TSADC_TSEN>, <&cru PCLK_TSADC>;
+		clock-names = "tsadc", "tsadc_tsen", "apb_pclk";
+		assigned-clocks = <&cru CLK_TSADC>, <&cru CLK_TSADC_TSEN>;
+		assigned-clock-rates = <1200000>, <12000000>;
+		resets = <&cru SRST_TSADC>, <&cru SRST_P_TSADC>, <&cru SRST_TSADCPHY>;
+		reset-names = "tsadc", "tsadc-apb", "tsadc-phy";
+		#thermal-sensor-cells = <1>;
+		rockchip,hw-tshut-temp = <120000>;
+		rockchip,hw-tshut-mode = <0>; /* tshut mode 0:CRU 1:GPIO */
+		rockchip,hw-tshut-polarity = <0>; /* tshut polarity 0:LOW 1:HIGH */
+		status = "disabled";
+	};
+
+	gmac0: ethernet@ffa80000 {
+		compatible = "rockchip,rk3562-gmac", "snps,dwmac-4.20a";
+		reg = <0x0 0xffa80000 0x0 0x10000>;
+		interrupts = <GIC_SPI 73 IRQ_TYPE_LEVEL_HIGH>,
+			     <GIC_SPI 70 IRQ_TYPE_LEVEL_HIGH>;
+		interrupt-names = "macirq", "eth_wake_irq";
+		rockchip,grf = <&sys_grf>;
+		rockchip,php_grf = <&ioc_grf>;
+		clocks = <&cru CLK_GMAC_125M_CRU_I>, <&cru CLK_GMAC_50M_CRU_I>,
+			 <&cru PCLK_GMAC>, <&cru ACLK_GMAC>;
+		clock-names = "stmmaceth", "clk_mac_ref",
+			      "pclk_mac", "aclk_mac";
+		resets = <&cru SRST_A_GMAC>;
+		reset-names = "stmmaceth";
+
+		snps,mixed-burst;
+		snps,tso;
+
+		snps,axi-config = <&gmac0_stmmac_axi_setup>;
+		snps,mtl-rx-config = <&gmac0_mtl_rx_setup>;
+		snps,mtl-tx-config = <&gmac0_mtl_tx_setup>;
+		status = "disabled";
+
+		mdio0: mdio {
+			compatible = "snps,dwmac-mdio";
+			#address-cells = <0x1>;
+			#size-cells = <0x0>;
+		};
+
+		gmac0_stmmac_axi_setup: stmmac-axi-config {
+			snps,wr_osr_lmt = <4>;
+			snps,rd_osr_lmt = <8>;
+			snps,blen = <0 0 0 0 16 8 4>;
+		};
+
+		gmac0_mtl_rx_setup: rx-queues-config {
+			snps,rx-queues-to-use = <1>;
+			queue0 {};
+		};
+
+		gmac0_mtl_tx_setup: tx-queues-config {
+			snps,tx-queues-to-use = <1>;
+			queue0 {};
+		};
+	};
+
+	saradc1: saradc@ffaa0000 {
+		compatible = "rockchip,rk3562-saradc";
+		reg = <0x0 0xffaa0000 0x0 0x100>;
+		interrupts = <GIC_SPI 124 IRQ_TYPE_LEVEL_HIGH>;
+		#io-channel-cells = <1>;
+		clocks = <&cru CLK_SARADC_VCCIO156>, <&cru PCLK_SARADC_VCCIO156>;
+		clock-names = "saradc", "apb_pclk";
+		resets = <&cru SRST_P_SARADC_VCCIO156>;
+		reset-names = "saradc-apb";
+		status = "disabled";
+	};
+
+	mailbox: mailbox@ffae0000 {
+		compatible = "rockchip,rk3562-mailbox",
+			     "rockchip,rk3368-mailbox";
+		reg = <0x0 0xffae0000 0x0 0x200>;
+		interrupts = <GIC_SPI 114 IRQ_TYPE_LEVEL_HIGH>;
+		clocks = <&cru PCLK_MAILBOX>;
+		clock-names = "pclk_mailbox";
+		#mbox-cells = <1>;
+		status = "disabled";
+	};
+
+	dsi: dsi@ffb10000 {
+		compatible = "rockchip,rk3562-mipi-dsi";
+		reg = <0x0 0xffb10000 0x0 0x10000>;
+		interrupts = <GIC_SPI 132 IRQ_TYPE_LEVEL_HIGH>;
+		clocks = <&cru PCLK_DSITX>;
+		clock-names = "pclk";
+		resets = <&cru SRST_P_DSITX>;
+		reset-names = "apb";
+		phys = <&video_phy>;
+		phy-names = "dphy";
+		rockchip,grf = <&sys_grf>;
+		#address-cells = <1>;
+		#size-cells = <0>;
+		status = "disabled";
+
+		ports {
+			#address-cells = <1>;
+			#size-cells = <0>;
+
+			dsi_in: port@0 {
+				reg = <0>;
+				#address-cells = <1>;
+				#size-cells = <0>;
+
+				dsi_in_vp0: endpoint@0 {
+					reg = <0>;
+					remote-endpoint = <&vp0_out_dsi>;
+					status = "disabled";
+				};
+
+				dsi_in_vp1: endpoint@1 {
+					reg = <1>;
+					remote-endpoint = <&vp1_out_dsi>;
+					status = "disabled";
+				};
+			};
+		};
+	};
+
+	video_phy: phy@ffb20000 {
+		compatible = "rockchip,rk3562-dsi-dphy", "rockchip,rk3562-video-phy",
+			     "rockchip,rk3568-dsi-dphy", "rockchip,rk3568-video-phy";
+		reg = <0x0 0xffb20000 0x0 0x10000>,
+		      <0x0 0xffb10000 0x0 0x10000>;
+		reg-names = "phy", "host";
+		clocks = <&cru CLK_MIPIDSIPHY_REF>,
+			 <&cru PCLK_DSIPHY>, <&cru PCLK_DSITX>;
+		clock-names = "ref", "pclk", "pclk_host";
+		#clock-cells = <0>;
+		resets = <&cru SRST_P_DSIPHY>;
+		reset-names = "apb";
+		#phy-cells = <0>;
+		status = "disabled";
+	};
+
+	gmac1: ethernet@ffb30000 {
+		compatible = "rockchip,rk3562-gmac";
+		reg = <0x0 0xffb30000 0x0 0x10000>;
+		interrupts = <GIC_SPI 67 IRQ_TYPE_LEVEL_HIGH>,
+			     <GIC_SPI 68 IRQ_TYPE_LEVEL_HIGH>;
+		interrupt-names = "macirq", "eth_wake_irq";
+		rockchip,grf = <&sys_grf>;
+		rockchip,php_grf = <&ioc_grf>;
+		clocks = <&cru CLK_GMAC_50M_CRU_I>, <&cru CLK_GMAC_50M_CRU_I>,
+			 <&cru PCLK_GMAC>, <&cru ACLK_GMAC>;
+		clock-names = "stmmaceth", "clk_mac_ref",
+			      "pclk_mac", "aclk_mac";
+		resets = <&cru SRST_A_MAC100>;
+		reset-names = "stmmaceth";
+		status = "disabled";
+
+		mdio1: mdio {
+			compatible = "snps,dwmac-mdio";
+			#address-cells = <0x1>;
+			#size-cells = <0x0>;
+		};
+	};
+
+	pinctrl: pinctrl {
+		compatible = "rockchip,rk3562-pinctrl";
+		rockchip,grf = <&ioc_grf>;
+		#address-cells = <2>;
+		#size-cells = <2>;
+		ranges;
+
+		gpio0: gpio@ff260000 {
+			compatible = "rockchip,gpio-bank";
+			reg = <0x0 0xff260000 0x0 0x100>;
+			interrupts = <GIC_SPI 0 IRQ_TYPE_LEVEL_HIGH>;
+			clocks = <&cru PCLK_PMU0_GPIO0>, <&cru DBCLK_PMU0_GPIO0>;
+
+			gpio-controller;
+			#gpio-cells = <2>;
+			gpio-ranges = <&pinctrl 0 0 32>;
+			interrupt-controller;
+			#interrupt-cells = <2>;
+		};
+
+		gpio1: gpio@ff620000 {
+			compatible = "rockchip,gpio-bank";
+			reg = <0x0 0xff620000 0x0 0x100>;
+			interrupts = <GIC_SPI 2 IRQ_TYPE_LEVEL_HIGH>;
+			clocks = <&cru PCLK_PERI_GPIO1>, <&cru DCLK_PERI_GPIO1>;
+
+			gpio-controller;
+			#gpio-cells = <2>;
+			gpio-ranges = <&pinctrl 0 32 32>;
+			interrupt-controller;
+			#interrupt-cells = <2>;
+		};
+
+		gpio2: gpio@ff630000 {
+			compatible = "rockchip,gpio-bank";
+			reg = <0x0 0xff630000 0x0 0x100>;
+			interrupts = <GIC_SPI 4 IRQ_TYPE_LEVEL_HIGH>;
+			clocks = <&cru PCLK_PERI_GPIO2>, <&cru DCLK_PERI_GPIO2>;
+
+			gpio-controller;
+			#gpio-cells = <2>;
+			gpio-ranges = <&pinctrl 0 64 32>;
+			interrupt-controller;
+			#interrupt-cells = <2>;
+		};
+
+		gpio3: gpio@ffac0000 {
+			compatible = "rockchip,gpio-bank";
+			reg = <0x0 0xffac0000 0x0 0x100>;
+			interrupts = <GIC_SPI 6 IRQ_TYPE_LEVEL_HIGH>;
+			clocks = <&cru PCLK_GPIO3_VCCIO156>, <&cru DCLK_BUS_GPIO3>;
+
+			gpio-controller;
+			#gpio-cells = <2>;
+			gpio-ranges = <&pinctrl 0 96 32>;
+			interrupt-controller;
+			#interrupt-cells = <2>;
+		};
+
+		gpio4: gpio@ffad0000 {
+			compatible = "rockchip,gpio-bank";
+			reg = <0x0 0xffad0000 0x0 0x100>;
+			interrupts = <GIC_SPI 8 IRQ_TYPE_LEVEL_HIGH>;
+			clocks = <&cru PCLK_GPIO4_VCCIO156>, <&cru DCLK_BUS_GPIO4>;
+
+			gpio-controller;
+			#gpio-cells = <2>;
+			gpio-ranges = <&pinctrl 0 128 32>;
+			interrupt-controller;
+			#interrupt-cells = <2>;
+		};
+	};
+};
+
+#include "rk3562-pinctrl.dtsi"
+
diff --git a/include/clk.h b/include/clk.h
index 045e923a529..e19604fd44f 100644
--- a/include/clk.h
+++ b/include/clk.h
@@ -13,6 +13,28 @@
 #include <linux/errno.h>
 #include <linux/types.h>
 
+enum if_type {
+        IF_TYPE_UNKNOWN = 0,
+        IF_TYPE_IDE,
+        IF_TYPE_SCSI,
+        IF_TYPE_ATAPI,
+        IF_TYPE_USB,
+        IF_TYPE_DOC,
+        IF_TYPE_MMC,
+        IF_TYPE_SD,
+        IF_TYPE_SATA,
+        IF_TYPE_HOST,
+        IF_TYPE_SYSTEMACE,
+        IF_TYPE_NVME,
+        IF_TYPE_RKNAND,
+        IF_TYPE_SPINAND,
+        IF_TYPE_SPINOR,
+        IF_TYPE_RAMDISK,
+        IF_TYPE_MTD,
+        IF_TYPE_COUNT,                  /* Number of interface types */
+};
+
+
 /**
  * DOC: Overview
  *
diff --git a/include/configs/evb_rk3562.h b/include/configs/evb_rk3562.h
new file mode 100644
index 00000000000..2f901e07261
--- /dev/null
+++ b/include/configs/evb_rk3562.h
@@ -0,0 +1,20 @@
+/*
+ * SPDX-License-Identifier:     GPL-2.0+
+ *
+ * Copyright (c) 2022 Rockchip Electronics Co., Ltd
+ */
+
+#ifndef __CONFIGS_RK3562_EVB_H
+#define __CONFIGS_RK3562_EVB_H
+
+#include <configs/rk3562_common.h>
+
+
+#define ROCKCHIP_DEVICE_SETTINGS \
+		"stdin=serial,usbkbd\0" \
+		"stdout=serial,vidconsole\0" \
+		"stderr=serial,vidconsole\0"
+
+
+
+#endif /* __CONFIGS_RK3562_EVB_H */
diff --git a/include/configs/geekpi-1-rk3562.h b/include/configs/geekpi-1-rk3562.h
new file mode 100644
index 00000000000..b406e6cd14d
--- /dev/null
+++ b/include/configs/geekpi-1-rk3562.h
@@ -0,0 +1,11 @@
+#ifndef __GEEKPI_1_RK3562_H
+#define __GEEKPI_1_RK3562_H
+
+#include <configs/evb_rk3562.h>
+
+#define DEBUG 1
+
+#define SDRAM_MAX_SIZE                  0xfc000000
+
+
+#endif /* __GEEKPI_1_RK3562_H */
diff --git a/include/configs/rk3562_common.h b/include/configs/rk3562_common.h
new file mode 100644
index 00000000000..fde99e9dc8d
--- /dev/null
+++ b/include/configs/rk3562_common.h
@@ -0,0 +1,39 @@
+/* SPDX-License-Identifier:     GPL-2.0+ */
+/*
+ * (C) Copyright 2022 Rockchip Electronics Co., Ltd
+ *
+ */
+
+#ifndef __CONFIG_RK3562_COMMON_H
+#define __CONFIG_RK3562_COMMON_H
+
+
+#define CFG_IRAM_BASE                      0xfe480000
+#define CFG_CPUID_OFFSET		0xa
+
+#include "rockchip-common.h"
+
+#define CFG_SYS_SDRAM_BASE             0
+#define CFG_SYS_SDRAM_SIZE	0x40000000
+
+
+#define ENV_MEM_LAYOUT_SETTINGS         \
+        "scriptaddr=0x00c00000\0"       \
+        "script_offset_f=0xffe000\0"    \
+        "script_size_f=0x2000\0"        \
+        "pxefile_addr_r=0x00e00000\0"   \
+        "kernel_addr_r=0x02000000\0"    \
+        "kernel_comp_addr_r=0x0a000000\0"       \
+        "fdt_addr_r=0x12000000\0"       \
+        "fdtoverlay_addr_r=0x12100000\0"        \
+        "ramdisk_addr_r=0x12180000\0"   \
+        "kernel_comp_size=0x8000000\0"
+
+#define CFG_EXTRA_ENV_SETTINGS          \
+        "fdtfile=" CONFIG_DEFAULT_FDT_FILE "\0" \
+        "partitions=" PARTS_DEFAULT     \
+        ENV_MEM_LAYOUT_SETTINGS         \
+        ROCKCHIP_DEVICE_SETTINGS        \
+        "boot_targets=" BOOT_TARGETS "\0"
+
+#endif
diff --git a/include/dt-bindings/power/rk3562-power.h b/include/dt-bindings/power/rk3562-power.h
new file mode 100644
index 00000000000..ed57c406f2d
--- /dev/null
+++ b/include/dt-bindings/power/rk3562-power.h
@@ -0,0 +1,33 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+#ifndef __DT_BINDINGS_POWER_RK3562_POWER_H__
+#define __DT_BINDINGS_POWER_RK3562_POWER_H__
+
+/* VD_CORE */
+#define RK3562_PD_CPU_0		0
+#define RK3562_PD_CPU_1		1
+#define RK3562_PD_CPU_2		2
+#define RK3562_PD_CPU_3		3
+#define RK3562_PD_CORE_ALIVE	4
+
+/* VD_PMU */
+#define RK3562_PD_PMU		5
+#define RK3562_PD_PMU_ALIVE	6
+
+/* VD_NPU */
+#define RK3562_PD_NPU		7
+
+/* VD_GPU */
+#define RK3562_PD_GPU		8
+
+/* VD_LOGIC */
+#define RK3562_PD_DDR		9
+#define RK3562_PD_VEPU		10
+#define RK3562_PD_VDPU		11
+#define RK3562_PD_VI		12
+#define RK3562_PD_VO		13
+#define RK3562_PD_RGA		14
+#define RK3562_PD_EBK		15
+#define RK3562_PD_PHP		16
+#define RK3562_PD_LOGIC_ALIVE	17
+
+#endif
diff --git a/include/dt-bindings/soc/rockchip-system-status.h b/include/dt-bindings/soc/rockchip-system-status.h
new file mode 100644
index 00000000000..fe103a55f22
--- /dev/null
+++ b/include/dt-bindings/soc/rockchip-system-status.h
@@ -0,0 +1,43 @@
+/*
+ *
+ * Copyright (C) 2017 ROCKCHIP, Inc.
+ *
+ * This software is licensed under the terms of the GNU General Public
+ * License version 2, as published by the Free Software Foundation, and
+ * may be copied, distributed, and modified under those terms.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ */
+
+#ifndef _DT_BINDINGS_SOC_ROCKCHIP_SYSTEM_STATUS_H
+#define _DT_BINDINGS_SOC_ROCKCHIP_SYSTEM_STATUS_H
+
+#define SYS_STATUS_NORMAL	(1 << 0)
+#define SYS_STATUS_SUSPEND	(1 << 1)
+#define SYS_STATUS_IDLE		(1 << 2)
+#define SYS_STATUS_REBOOT	(1 << 3)
+#define SYS_STATUS_VIDEO_4K	(1 << 4)
+#define SYS_STATUS_VIDEO_1080P	(1 << 5)
+#define SYS_STATUS_GPU		(1 << 6)
+#define SYS_STATUS_RGA		(1 << 7)
+#define SYS_STATUS_CIF0		(1 << 8)
+#define SYS_STATUS_CIF1		(1 << 9)
+#define SYS_STATUS_LCDC0	(1 << 10)
+#define SYS_STATUS_LCDC1	(1 << 11)
+#define SYS_STATUS_BOOST	(1 << 12)
+#define SYS_STATUS_PERFORMANCE	(1 << 13)
+#define SYS_STATUS_ISP		(1 << 14)
+#define SYS_STATUS_HDMI		(1 << 15)
+#define SYS_STATUS_VIDEO_4K_10B	(1 << 16)
+#define SYS_STATUS_LOW_POWER	(1 << 17)
+
+#define SYS_STATUS_VIDEO	(SYS_STATUS_VIDEO_4K | \
+				 SYS_STATUS_VIDEO_1080P | \
+				 SYS_STATUS_VIDEO_4K_10B)
+#define SYS_STATUS_DUALVIEW	(SYS_STATUS_LCDC0 | SYS_STATUS_LCDC1)
+
+#endif
diff --git a/tools/rkcommon.c b/tools/rkcommon.c
index 3e52236b15a..b43a4af1c37 100644
--- a/tools/rkcommon.c
+++ b/tools/rkcommon.c
@@ -134,6 +134,7 @@ static struct spl_info spl_infos[] = {
 	{ "rk3399", "RK33", 0x30000 - 0x2000, false, RK_HEADER_V1 },
 	{ "rv1108", "RK11", 0x1800, false, RK_HEADER_V1 },
 	{ "rv1126", "110B", 0x10000 - 0x1000, false, RK_HEADER_V1 },
+	{ "rk3562", "RK35", 0x10000 - 0x1000, false, RK_HEADER_V2 },
 	{ "rk3568", "RK35", 0x10000 - 0x1000, false, RK_HEADER_V2 },
 	{ "rk3588", "RK35", 0x100000 - 0x1000, false, RK_HEADER_V2 },
 };
